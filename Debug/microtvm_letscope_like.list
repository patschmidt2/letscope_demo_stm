
microtvm_letscope_like.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000430b8  08007380  08007380  00017380  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804a438  0804a438  000601b8  2**0
                  CONTENTS
  4 .ARM          00000008  0804a438  0804a438  0005a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804a440  0804a440  000601b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804a440  0804a440  0005a440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a444  0804a444  0005a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0804a448  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0804a4c0  00060078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0804a560  00060118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000271c  200001b8  0804a600  000601b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200028d4  0804a600  000628d4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000601b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017b71  00000000  00000000  000601e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000313c  00000000  00000000  00077d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  0007ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fe0  00000000  00000000  0007bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028df7  00000000  00000000  0007cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015294  00000000  00000000  000a5da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6739  00000000  00000000  000bb03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b1774  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005218  00000000  00000000  001b17c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800735c 	.word	0x0800735c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800735c 	.word	0x0800735c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <TVMLogf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TVMLogf(const char* msg, ...) {
 80005b4:	b40f      	push	{r0, r1, r2, r3}
 80005b6:	b480      	push	{r7}
 80005b8:	b0a3      	sub	sp, #140	; 0x8c
 80005ba:	af00      	add	r7, sp, #0
  char buffer[128];
  int size;
  va_list args;
  va_start(args, msg);
 80005bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005c0:	607b      	str	r3, [r7, #4]
  va_end(args);
}
 80005c2:	bf00      	nop
 80005c4:	378c      	adds	r7, #140	; 0x8c
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fdea 	bl	80011ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f845 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f99d 	bl	800091c <MX_GPIO_Init>
  MX_ETH_Init();
 80005e2:	f000 f8b1 	bl	8000748 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f93b 	bl	8000860 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ea:	f000 f969 	bl	80008c0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005ee:	f000 f8f9 	bl	80007e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  TVMPlatformInitialize();
 80005f2:	f000 fa73 	bl	8000adc <TVMPlatformInitialize>
  int8_t input[DUMMY_INPUT_LEN];

  int8_t sensor_data[3];
  int8_t reference_speed, steepness;

  struct tvmgen_default_inputs inputs = {
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0x90>)
 80005f8:	60bb      	str	r3, [r7, #8]
  .serving_default_input_1_0 = (void*)&dummy_input,
  };
  struct tvmgen_default_outputs outputs = {
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	607b      	str	r3, [r7, #4]
  .StatefulPartitionedCall_0 = (void*)&output,
  };
  uint32_t timer_val;

  // Test run
  timer_val = HAL_GetTick();
 8000600:	f000 fe26 	bl	8001250 <HAL_GetTick>
 8000604:	61f8      	str	r0, [r7, #28]
  tvmgen_default_run(&inputs, &outputs);
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4611      	mov	r1, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fbba 	bl	8004d88 <tvmgen_default_run>
  timer_val = HAL_GetTick() - timer_val;
 8000614:	f000 fe1c 	bl	8001250 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	61fb      	str	r3, [r7, #28]
  timer_val = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  // Set the correct input
  // Requires reading data from sensors, and steepness + reference_speed
  inputs.serving_default_input_1_0 = (void*)&input;
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_SPI_Receive(&hspi1, (uint8_t*) sensor_data, 3, HAL_MAX_DELAY); //assuming 3 values read from sensor
 800062a:	f107 010c 	add.w	r1, r7, #12
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2203      	movs	r2, #3
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <main+0x94>)
 8000636:	f002 ff1a 	bl	800346e <HAL_SPI_Receive>
	  memcpy(input, sensor_data, 3);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	4611      	mov	r1, r2
 8000646:	8019      	strh	r1, [r3, #0]
 8000648:	3302      	adds	r3, #2
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	701a      	strb	r2, [r3, #0]
	  //input[4] = steepness;
	  //input[5] = reference_speed;

	  tvmgen_default_run(&inputs, &outputs);
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fb96 	bl	8004d88 <tvmgen_default_run>
	  HAL_SPI_Receive(&hspi1, (uint8_t*) sensor_data, 3, HAL_MAX_DELAY); //assuming 3 values read from sensor
 800065c:	e7e5      	b.n	800062a <main+0x5a>
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	200002bc 	.word	0x200002bc

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fd53 	bl	8006122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f001 fd2a 	bl	80020e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a2a      	ldr	r2, [pc, #168]	; (8000740 <SystemClock_Config+0xd8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xd8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <SystemClock_Config+0xdc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SystemClock_Config+0xdc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006d8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e2:	2309      	movs	r3, #9
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fd5a 	bl	80021a4 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006f6:	f000 f9b3 	bl	8000a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fa:	f001 fd03 	bl	8002104 <HAL_PWREx_EnableOverDrive>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000704:	f000 f9ac 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800071a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2107      	movs	r1, #7
 8000726:	4618      	mov	r0, r3
 8000728:	f001 ffe0 	bl	80026ec <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000732:	f000 f995 	bl	8000a60 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ETH_Init+0x84>)
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <MX_ETH_Init+0x88>)
 8000750:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ETH_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_ETH_Init+0x8c>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ETH_Init+0x8c>)
 8000760:	22e1      	movs	r2, #225	; 0xe1
 8000762:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_ETH_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ETH_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_ETH_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ETH_Init+0x84>)
 8000778:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_ETH_Init+0x8c>)
 800077a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_ETH_Init+0x84>)
 800077e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000782:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ETH_Init+0x84>)
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_ETH_Init+0x90>)
 8000788:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_ETH_Init+0x84>)
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_ETH_Init+0x94>)
 800078e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_ETH_Init+0x84>)
 8000792:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000796:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_ETH_Init+0x84>)
 800079a:	f000 fe6f 	bl	800147c <HAL_ETH_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f95c 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a8:	2238      	movs	r2, #56	; 0x38
 80007aa:	2100      	movs	r1, #0
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_ETH_Init+0x98>)
 80007ae:	f005 fcb8 	bl	8006122 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_ETH_Init+0x98>)
 80007b4:	2221      	movs	r2, #33	; 0x21
 80007b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_ETH_Init+0x98>)
 80007ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_ETH_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000020c 	.word	0x2000020c
 80007d0:	40028000 	.word	0x40028000
 80007d4:	200008b0 	.word	0x200008b0
 80007d8:	20000118 	.word	0x20000118
 80007dc:	20000078 	.word	0x20000078
 80007e0:	200001d4 	.word	0x200001d4

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_SPI1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_SPI1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_SPI1_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x74>)
 80007fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x74>)
 8000812:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x74>)
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x74>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_SPI1_Init+0x74>)
 8000844:	f002 fd68 	bl	8003318 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f907 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002bc 	.word	0x200002bc
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_USART3_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART3_UART_Init+0x58>)
 80008a4:	f003 fb2a 	bl	8003efc <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f8d7 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000320 	.word	0x20000320
 80008bc:	40004800 	.word	0x40004800

080008c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2206      	movs	r2, #6
 80008d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	f001 faa5 	bl	8001e52 <HAL_PCD_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 f8a7 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003a8 	.word	0x200003a8

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a46      	ldr	r2, [pc, #280]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a3a      	ldr	r2, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x134>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <MX_GPIO_Init+0x134>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c8:	4822      	ldr	r0, [pc, #136]	; (8000a54 <MX_GPIO_Init+0x138>)
 80009ca:	f001 fa29 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	4821      	ldr	r0, [pc, #132]	; (8000a58 <MX_GPIO_Init+0x13c>)
 80009d4:	f001 fa24 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x140>)
 80009f0:	f001 f86a 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_GPIO_Init+0x138>)
 8000a0e:	f001 f85b 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0x13c>)
 8000a2a:	f001 f84d 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_GPIO_Init+0x13c>)
 8000a42:	f001 f841 	bl	8001ac8 <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40021800 	.word	0x40021800
 8000a5c:	40020800 	.word	0x40020800

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>

08000a6a <TVMPlatformAbort>:

uint8_t memory[TVM_WORKSPACE_SIZE_BYTES];
MemoryManagerInterface* memory_manager;

// Called when an internal error occurs and execution cannot continue.
void TVMPlatformAbort(tvm_crt_error_t error_code) { exit(1); }
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	2001      	movs	r0, #1
 8000a74:	f005 fa9a 	bl	8005fac <exit>

08000a78 <TVMPlatformMemoryAllocate>:
                                va_list args) {
  return vsprintf(out_buf, fmt, args);
}

// Allocate memory for use by TVM.
tvm_crt_error_t TVMPlatformMemoryAllocate(size_t num_bytes, DLDevice dev, void** out_ptr) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	1d38      	adds	r0, r7, #4
 8000a82:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a86:	603b      	str	r3, [r7, #0]
  return memory_manager->Allocate(memory_manager, num_bytes, dev, out_ptr);
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <TVMPlatformMemoryAllocate+0x30>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681c      	ldr	r4, [r3, #0]
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <TVMPlatformMemoryAllocate+0x30>)
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	cb0c      	ldmia	r3, {r2, r3}
 8000a9a:	68f9      	ldr	r1, [r7, #12]
 8000a9c:	47a0      	blx	r4
 8000a9e:	4603      	mov	r3, r0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	200028b8 	.word	0x200028b8

08000aac <TVMPlatformMemoryFree>:

// Free memory used by TVM.
tvm_crt_error_t TVMPlatformMemoryFree(void* ptr, DLDevice dev) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	e883 0006 	stmia.w	r3, {r1, r2}
  return memory_manager->Free(memory_manager, ptr, dev);
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <TVMPlatformMemoryFree+0x2c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685c      	ldr	r4, [r3, #4]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <TVMPlatformMemoryFree+0x2c>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	cb0c      	ldmia	r3, {r2, r3}
 8000ac8:	68f9      	ldr	r1, [r7, #12]
 8000aca:	47a0      	blx	r4
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200028b8 	.word	0x200028b8

08000adc <TVMPlatformInitialize>:
tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
  return kTvmErrorNoError;
}

// Initialize TVM inference.
tvm_crt_error_t TVMPlatformInitialize() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  int status =
      PageMemoryManagerCreate(&memory_manager, memory, sizeof(memory), 8 /* page_size_log2 */);
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae8:	490b      	ldr	r1, [pc, #44]	; (8000b18 <TVMPlatformInitialize+0x3c>)
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <TVMPlatformInitialize+0x40>)
 8000aec:	f005 f9a2 	bl	8005e34 <PageMemoryManagerCreate>
 8000af0:	6078      	str	r0, [r7, #4]
  if (status != 0) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00a      	beq.n	8000b0e <TVMPlatformInitialize+0x32>
    fprintf(stderr, "error initiailizing memory manager\n");
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <TVMPlatformInitialize+0x44>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	2223      	movs	r2, #35	; 0x23
 8000b00:	2101      	movs	r1, #1
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <TVMPlatformInitialize+0x48>)
 8000b04:	f005 fad8 	bl	80060b8 <fwrite>
    return kTvmErrorPlatformMemoryManagerInitialized;
 8000b08:	f240 5301 	movw	r3, #1281	; 0x501
 8000b0c:	e000      	b.n	8000b10 <TVMPlatformInitialize+0x34>
  }
  return kTvmErrorNoError;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200008b8 	.word	0x200008b8
 8000b1c:	200028b8 	.word	0x200028b8
 8000b20:	20000014 	.word	0x20000014
 8000b24:	08007380 	.word	0x08007380

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a4e      	ldr	r2, [pc, #312]	; (8000cc8 <HAL_ETH_MspInit+0x158>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	f040 8096 	bne.w	8000cc0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	4b47      	ldr	r3, [pc, #284]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a46      	ldr	r2, [pc, #280]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a3a      	ldr	r2, [pc, #232]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a34      	ldr	r2, [pc, #208]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <HAL_ETH_MspInit+0x160>)
 8000c58:	f000 ff36 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c5c:	2386      	movs	r3, #134	; 0x86
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_ETH_MspInit+0x164>)
 8000c78:	f000 ff26 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <HAL_ETH_MspInit+0x168>)
 8000c9a:	f000 ff15 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <HAL_ETH_MspInit+0x16c>)
 8000cbc:	f000 ff04 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40021800 	.word	0x40021800

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <HAL_SPI_MspInit+0xb4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d143      	bne.n	8000d8a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_SPI_MspInit+0xb8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d4a:	2370      	movs	r3, #112	; 0x70
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <HAL_SPI_MspInit+0xbc>)
 8000d66:	f000 feaf 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <HAL_SPI_MspInit+0xc0>)
 8000d86:	f000 fe9f 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0aa      	sub	sp, #168	; 0xa8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2284      	movs	r2, #132	; 0x84
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 f9ac 	bl	8006122 <memset>
  if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <HAL_UART_MspInit+0xb4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d13c      	bne.n	8000e4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fea8 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff fe37 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_UART_MspInit+0xb8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0xbc>)
 8000e4a:	f000 fe3d 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	37a8      	adds	r7, #168	; 0xa8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020c00 	.word	0x40020c00

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ac      	sub	sp, #176	; 0xb0
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	2284      	movs	r2, #132	; 0x84
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 f94c 	bl	8006122 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e92:	d159      	bne.n	8000f48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fe47 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000eb0:	f7ff fdd6 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ecc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000ef4:	f000 fde8 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <HAL_PCD_MspInit+0xf0>)
 8000f14:	f000 fdd8 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f22:	6353      	str	r3, [r2, #52]	; 0x34
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	37b0      	adds	r7, #176	; 0xb0
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f940 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_kill>:

int _kill(int pid, int sig)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fc6:	f004 ffeb 	bl	8005fa0 <__errno>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2216      	movs	r2, #22
 8000fce:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_exit>:

void _exit (int status)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe7 	bl	8000fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fee:	e7fe      	b.n	8000fee <_exit+0x12>

08000ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf1      	blt.n	800103c <_write+0x12>
  }
  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108a:	605a      	str	r2, [r3, #4]
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_isatty>:

int _isatty(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f004 ff50 	bl	8005fa0 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20050000 	.word	0x20050000
 800112c:	00000400 	.word	0x00000400
 8001130:	200028bc 	.word	0x200028bc
 8001134:	200028d8 	.word	0x200028d8

08001138 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f004 ffa3 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fa1f 	bl	80005d0 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011a0:	0804a448 	.word	0x0804a448
  ldr r2, =_sbss
 80011a4:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80011a8:	200028d4 	.word	0x200028d4

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>

080011ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f92e 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f805 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011be:	f7ff fcb3 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f911 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000008 	.word	0x20000008
 8001220:	20000010 	.word	0x20000010
 8001224:	2000000c 	.word	0x2000000c

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000010 	.word	0x20000010
 800124c:	200028c0 	.word	0x200028c0

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200028c0 	.word	0x200028c0

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000010 	.word	0x20000010

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e06a      	b.n	8001564 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2223      	movs	r2, #35	; 0x23
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fb65 	bl	8000b70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_ETH_Init+0xf0>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <HAL_ETH_Init+0xf0>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_ETH_Init+0xf0>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4927      	ldr	r1, [pc, #156]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff feac 	bl	8001250 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014fa:	e011      	b.n	8001520 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014fc:	f7ff fea8 	bl	8001250 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800150a:	d909      	bls.n	8001520 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2204      	movs	r2, #4
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	22e0      	movs	r2, #224	; 0xe0
 8001518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e4      	bne.n	80014fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f958 	bl	80017e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f9ff 	bl	800193c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fa55 	bl	80019ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	461a      	mov	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f9bd 	bl	80018cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2210      	movs	r2, #16
 800155e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800

08001574 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <ETH_SetMACConfig+0x15c>)
 800158a:	4013      	ands	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <ETH_SetMACConfig+0x28>
 8001596:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800159a:	e000      	b.n	800159e <ETH_SetMACConfig+0x2a>
 800159c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7c5b      	ldrb	r3, [r3, #17]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <ETH_SetMACConfig+0x38>
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	e000      	b.n	80015ae <ETH_SetMACConfig+0x3a>
 80015ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7fdb      	ldrb	r3, [r3, #31]
 80015ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	7f92      	ldrb	r2, [r2, #30]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d102      	bne.n	80015d2 <ETH_SetMACConfig+0x5e>
 80015cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d0:	e000      	b.n	80015d4 <ETH_SetMACConfig+0x60>
 80015d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80015d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	7f1b      	ldrb	r3, [r3, #28]
 80015da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	d102      	bne.n	80015fc <ETH_SetMACConfig+0x88>
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	e000      	b.n	80015fe <ETH_SetMACConfig+0x8a>
 80015fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7bdb      	ldrb	r3, [r3, #15]
 8001604:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001606:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800160c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001614:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001616:	4313      	orrs	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff fe1a 	bl	8001268 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	f64f 7341 	movw	r3, #65345	; 0xff41
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001652:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800165a:	2a00      	cmp	r2, #0
 800165c:	d101      	bne.n	8001662 <ETH_SetMACConfig+0xee>
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	e000      	b.n	8001664 <ETH_SetMACConfig+0xf0>
 8001662:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001664:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800166a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001672:	2a01      	cmp	r2, #1
 8001674:	d101      	bne.n	800167a <ETH_SetMACConfig+0x106>
 8001676:	2208      	movs	r2, #8
 8001678:	e000      	b.n	800167c <ETH_SetMACConfig+0x108>
 800167a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800167c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001684:	2a01      	cmp	r2, #1
 8001686:	d101      	bne.n	800168c <ETH_SetMACConfig+0x118>
 8001688:	2204      	movs	r2, #4
 800168a:	e000      	b.n	800168e <ETH_SetMACConfig+0x11a>
 800168c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800168e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001696:	2a01      	cmp	r2, #1
 8001698:	d101      	bne.n	800169e <ETH_SetMACConfig+0x12a>
 800169a:	2202      	movs	r2, #2
 800169c:	e000      	b.n	80016a0 <ETH_SetMACConfig+0x12c>
 800169e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fdd5 	bl	8001268 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	ff20810f 	.word	0xff20810f

080016d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <ETH_SetDMAConfig+0x110>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <ETH_SetDMAConfig+0x2c>
 80016fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016fe:	e000      	b.n	8001702 <ETH_SetDMAConfig+0x2e>
 8001700:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7b5b      	ldrb	r3, [r3, #13]
 8001706:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001708:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	7f52      	ldrb	r2, [r2, #29]
 800170e:	2a00      	cmp	r2, #0
 8001710:	d102      	bne.n	8001718 <ETH_SetDMAConfig+0x44>
 8001712:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001716:	e000      	b.n	800171a <ETH_SetDMAConfig+0x46>
 8001718:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800171a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	7b9b      	ldrb	r3, [r3, #14]
 8001720:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001722:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001728:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7f1b      	ldrb	r3, [r3, #28]
 800172e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001730:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7f9b      	ldrb	r3, [r3, #30]
 8001736:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001738:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800173e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001746:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001748:	4313      	orrs	r3, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	461a      	mov	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fd7c 	bl	8001268 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	791b      	ldrb	r3, [r3, #4]
 8001782:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001788:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800178e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001794:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800179c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800179e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fd4d 	bl	8001268 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f8de3f23 	.word	0xf8de3f23

080017e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0a6      	sub	sp, #152	; 0x98
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001824:	2300      	movs	r3, #0
 8001826:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800182e:	2300      	movs	r3, #0
 8001830:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800184a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001854:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800185c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fe86 	bl	8001574 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800186c:	2301      	movs	r3, #1
 800186e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff08 	bl	80016d4 <ETH_SetDMAConfig>
}
 80018c4:	bf00      	nop
 80018c6:	3798      	adds	r7, #152	; 0x98
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	3204      	adds	r2, #4
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <ETH_MACAddressConfig+0x68>)
 80018ee:	4413      	add	r3, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3303      	adds	r3, #3
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	061a      	lsls	r2, r3, #24
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3302      	adds	r3, #2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3301      	adds	r3, #1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	4313      	orrs	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <ETH_MACAddressConfig+0x6c>)
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40028040 	.word	0x40028040
 8001938:	40028044 	.word	0x40028044

0800193c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e03e      	b.n	80019c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68d9      	ldr	r1, [r3, #12]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	3206      	adds	r2, #6
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d80c      	bhi.n	80019ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	e004      	b.n	80019b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d9bd      	bls.n	800194a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	611a      	str	r2, [r3, #16]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e046      	b.n	8001a8a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	3212      	adds	r2, #18
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d80c      	bhi.n	8001a7a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6919      	ldr	r1, [r3, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	e004      	b.n	8001a84 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d9b5      	bls.n	80019fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aba:	60da      	str	r2, [r3, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e175      	b.n	8001dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8164 	bne.w	8001dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_GPIO_Init+0x56>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d130      	bne.n	8001b80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d017      	beq.n	8001bbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80be 	beq.w	8001dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c6a:	4a61      	ldr	r2, [pc, #388]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d037      	beq.n	8001d06 <HAL_GPIO_Init+0x23e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_GPIO_Init+0x23a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x334>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x236>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <HAL_GPIO_Init+0x338>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x232>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_Init+0x33c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x22e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_GPIO_Init+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x22a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_Init+0x344>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x348>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x34c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x350>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cde:	2309      	movs	r3, #9
 8001ce0:	e012      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	e010      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae86 	bls.w	8001ae8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40022400 	.word	0x40022400
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e54:	b08f      	sub	sp, #60	; 0x3c
 8001e56:	af0a      	add	r7, sp, #40	; 0x28
 8001e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e116      	b.n	8002092 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fff0 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fcd4 	bl	8004850 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	687e      	ldr	r6, [r7, #4]
 8001eb0:	466d      	mov	r5, sp
 8001eb2:	f106 0410 	add.w	r4, r6, #16
 8001eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec6:	1d33      	adds	r3, r6, #4
 8001ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f002 fc68 	bl	80047a0 <USB_CoreInit>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0d7      	b.n	8002092 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fcc2 	bl	8004872 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e04a      	b.n	8001f8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	333d      	adds	r3, #61	; 0x3d
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	333c      	adds	r3, #60	; 0x3c
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	b298      	uxth	r0, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3344      	adds	r3, #68	; 0x44
 8001f30:	4602      	mov	r2, r0
 8001f32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3340      	adds	r3, #64	; 0x40
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3348      	adds	r3, #72	; 0x48
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334c      	adds	r3, #76	; 0x4c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3354      	adds	r3, #84	; 0x54
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3af      	bcc.n	8001ef4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e044      	b.n	8002024 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3b5      	bcc.n	8001f9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	687e      	ldr	r6, [r7, #4]
 8002036:	466d      	mov	r5, sp
 8002038:	f106 0410 	add.w	r4, r6, #16
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002048:	e885 0003 	stmia.w	r5, {r0, r1}
 800204c:	1d33      	adds	r3, r6, #4
 800204e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002050:	6838      	ldr	r0, [r7, #0]
 8002052:	f002 fc5b 	bl	800490c <USB_DevInit>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e014      	b.n	8002092 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f80b 	bl	800209c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fe19 	bl	8004cc2 <USB_DevDisconnect>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800209c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	10000003 	.word	0x10000003

080020e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40007000 	.word	0x40007000

08002104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002132:	f7ff f88d 	bl	8001250 <HAL_GetTick>
 8002136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002138:	e009      	b.n	800214e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800213a:	f7ff f889 	bl	8001250 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002148:	d901      	bls.n	800214e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e022      	b.n	8002194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d1ee      	bne.n	800213a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002168:	f7ff f872 	bl	8001250 <HAL_GetTick>
 800216c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800216e:	e009      	b.n	8002184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002170:	f7ff f86e 	bl	8001250 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217e:	d901      	bls.n	8002184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e007      	b.n	8002194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002190:	d1ee      	bne.n	8002170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e291      	b.n	80026de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8087 	beq.w	80022d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	4b96      	ldr	r3, [pc, #600]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d4:	4b93      	ldr	r3, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d112      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
 80021e0:	4b90      	ldr	r3, [pc, #576]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d10b      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d06c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x130>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d168      	bne.n	80022d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e26b      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x7a>
 8002210:	4b84      	ldr	r3, [pc, #528]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a83      	ldr	r2, [pc, #524]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e02e      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x9c>
 8002226:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7e      	ldr	r2, [pc, #504]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b7c      	ldr	r3, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0xc0>
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6b      	ldr	r2, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe ffe4 	bl	8001250 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe ffe0 	bl	8001250 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e21f      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ffd0 	bl	8001250 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7fe ffcc 	bl	8001250 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e20b      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x110>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d069      	beq.n	80023b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d11c      	bne.n	8002334 <HAL_RCC_OscConfig+0x190>
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x17a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e1df      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	493d      	ldr	r1, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	e040      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe ff82 	bl	8001250 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe ff7e 	bl	8001250 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1bd      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4929      	ldr	r1, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
 8002382:	e018      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe ff5e 	bl	8001250 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe ff5a 	bl	8001250 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e199      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d038      	beq.n	8002434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe ff3b 	bl	8001250 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe ff37 	bl	8001250 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e176      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x23a>
 80023fc:	e01a      	b.n	8002434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe ff21 	bl	8001250 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe ff1d 	bl	8001250 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d903      	bls.n	8002428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e15c      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
 8002424:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b91      	ldr	r3, [pc, #580]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a4 	beq.w	800258a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a87      	ldr	r2, [pc, #540]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b85      	ldr	r3, [pc, #532]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246a:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002476:	4b7f      	ldr	r3, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7e      	ldr	r2, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe fee5 	bl	8001250 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fee1 	bl	8001250 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e120      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x31a>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x33c>
 80024c6:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a66      	ldr	r2, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x35e>
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a5d      	ldr	r2, [pc, #372]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 8002502:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a5a      	ldr	r2, [pc, #360]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7fe fe95 	bl	8001250 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fe91 	bl	8001250 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0ce      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x386>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fe7f 	bl	8001250 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fe7b 	bl	8001250 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b8      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a4 	beq.w	80026dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d06b      	beq.n	8002678 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d149      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a30      	ldr	r2, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fe4c 	bl	8001250 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fe48 	bl	8001250 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e087      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	4313      	orrs	r3, r2
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002606:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fe1c 	bl	8001250 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fe18 	bl	8001250 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e057      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x478>
 800263a:	e04f      	b.n	80026dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fe02 	bl	8001250 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fdfe 	bl	8001250 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e03d      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x4ac>
 800266e:	e035      	b.n	80026dc <HAL_RCC_OscConfig+0x538>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x544>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d028      	beq.n	80026d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d121      	bne.n	80026d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d11a      	bne.n	80026d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d111      	bne.n	80026d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0d0      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 020f 	bic.w	r2, r3, #15
 800271a:	4965      	ldr	r1, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d040      	beq.n	8002810 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e073      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4936      	ldr	r1, [pc, #216]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd36 	bl	8001250 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fd32 	bl	8001250 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e053      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d210      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 020f 	bic.w	r2, r3, #15
 8002826:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1d0>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1d4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc92 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	080076f8 	.word	0x080076f8
 80028bc:	20000008 	.word	0x20000008
 80028c0:	2000000c 	.word	0x2000000c

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b094      	sub	sp, #80	; 0x50
 80028ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
 80028d0:	2300      	movs	r3, #0
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d00d      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	f200 80e1 	bhi.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x3a>
 80028f6:	e0db      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fc:	e0db      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_GetSysClockFreq+0x208>)
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002902:	e0d8      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002904:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800290e:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
 8002924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
 800292e:	2300      	movs	r3, #0
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
 8002932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4621      	mov	r1, r4
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	6139      	str	r1, [r7, #16]
 8002954:	4629      	mov	r1, r5
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002968:	4659      	mov	r1, fp
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4651      	mov	r1, sl
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	ebb2 0801 	subs.w	r8, r2, r1
 800297c:	4659      	mov	r1, fp
 800297e:	eb63 0901 	sbc.w	r9, r3, r1
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800298e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002996:	4690      	mov	r8, r2
 8002998:	4699      	mov	r9, r3
 800299a:	4623      	mov	r3, r4
 800299c:	eb18 0303 	adds.w	r3, r8, r3
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	462b      	mov	r3, r5
 80029a4:	eb49 0303 	adc.w	r3, r9, r3
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029b6:	4629      	mov	r1, r5
 80029b8:	024b      	lsls	r3, r1, #9
 80029ba:	4621      	mov	r1, r4
 80029bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c0:	4621      	mov	r1, r4
 80029c2:	024a      	lsls	r2, r1, #9
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ca:	2200      	movs	r2, #0
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d4:	f7fd fc6c 	bl	80002b0 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4613      	mov	r3, r2
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	2200      	movs	r2, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	4611      	mov	r1, r2
 80029ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	f04f 0000 	mov.w	r0, #0
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	0159      	lsls	r1, r3, #5
 8002a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0e:	0150      	lsls	r0, r2, #5
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4641      	mov	r1, r8
 8002a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a34:	ebb2 040a 	subs.w	r4, r2, sl
 8002a38:	eb63 050b 	sbc.w	r5, r3, fp
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	18e3      	adds	r3, r4, r3
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	464b      	mov	r3, r9
 8002a58:	eb45 0303 	adc.w	r3, r5, r3
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	028b      	lsls	r3, r1, #10
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a74:	4621      	mov	r1, r4
 8002a76:	028a      	lsls	r2, r1, #10
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	61fa      	str	r2, [r7, #28]
 8002a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a88:	f7fd fc12 	bl	80002b0 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4613      	mov	r3, r2
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3750      	adds	r7, #80	; 0x50
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08007708 	.word	0x08007708

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08007708 	.word	0x08007708

08002b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b6a:	6093      	str	r3, [r2, #8]
 8002b6c:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4964      	ldr	r1, [pc, #400]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	4959      	ldr	r1, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d017      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	494a      	ldr	r1, [pc, #296]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 808b 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a39      	ldr	r2, [pc, #228]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fb06 	bl	8001250 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe fb02 	bl	8001250 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e357      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d035      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d02e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d114      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe faca 	bl	8001250 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fac6 	bl	8001250 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e319      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cee:	d111      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	4901      	ldr	r1, [pc, #4]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	0ffffcff 	.word	0x0ffffcff
 8002d14:	4baa      	ldr	r3, [pc, #680]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4aa9      	ldr	r2, [pc, #676]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d1e:	6093      	str	r3, [r2, #8]
 8002d20:	4ba7      	ldr	r3, [pc, #668]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	49a4      	ldr	r1, [pc, #656]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d3e:	4ba0      	ldr	r3, [pc, #640]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d44:	4a9e      	ldr	r2, [pc, #632]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d4e:	4b9c      	ldr	r3, [pc, #624]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	4999      	ldr	r1, [pc, #612]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6c:	4b94      	ldr	r3, [pc, #592]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7a:	4991      	ldr	r1, [pc, #580]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d8e:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9c:	4988      	ldr	r1, [pc, #544]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db0:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	4980      	ldr	r1, [pc, #512]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dd2:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4977      	ldr	r1, [pc, #476]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df4:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	496f      	ldr	r1, [pc, #444]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e16:	4b6a      	ldr	r3, [pc, #424]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f023 020c 	bic.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	4966      	ldr	r1, [pc, #408]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e38:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	495e      	ldr	r1, [pc, #376]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e5a:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	4955      	ldr	r1, [pc, #340]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e9e:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	4944      	ldr	r1, [pc, #272]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	493c      	ldr	r1, [pc, #240]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	4933      	ldr	r1, [pc, #204]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f04:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f12:	492b      	ldr	r1, [pc, #172]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f34:	4922      	ldr	r1, [pc, #136]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	4912      	ldr	r1, [pc, #72]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d006      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80d9 	beq.w	8003166 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a01      	ldr	r2, [pc, #4]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fbe:	e001      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc6:	f7fe f943 	bl	8001250 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fce:	f7fe f93f 	bl	8001250 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e194      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d021      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11d      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800300e:	4b61      	ldr	r3, [pc, #388]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003014:	0e1b      	lsrs	r3, r3, #24
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	019a      	lsls	r2, r3, #6
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	071b      	lsls	r3, r3, #28
 8003034:	4957      	ldr	r1, [pc, #348]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02e      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003066:	d129      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307c:	0f1b      	lsrs	r3, r3, #28
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	019a      	lsls	r2, r3, #6
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	431a      	orrs	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	071b      	lsls	r3, r3, #28
 800309c:	493d      	ldr	r1, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030aa:	f023 021f 	bic.w	r2, r3, #31
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	3b01      	subs	r3, #1
 80030b4:	4937      	ldr	r1, [pc, #220]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01d      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	0e1b      	lsrs	r3, r3, #24
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030dc:	0f1b      	lsrs	r3, r3, #28
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	019a      	lsls	r2, r3, #6
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	071b      	lsls	r3, r3, #28
 80030fc:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	019a      	lsls	r2, r3, #6
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	4919      	ldr	r1, [pc, #100]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003140:	f7fe f886 	bl	8001250 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003148:	f7fe f882 	bl	8001250 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0d7      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 80cd 	bne.w	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317a:	f7fe f869 	bl	8001250 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003182:	f7fe f865 	bl	8001250 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	; 0x64
 800318e:	d903      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0ba      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003194:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003198:	4b5e      	ldr	r3, [pc, #376]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a4:	d0ed      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02e      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12a      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ce:	4b51      	ldr	r3, [pc, #324]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4944      	ldr	r1, [pc, #272]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003210:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	493d      	ldr	r1, [pc, #244]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003238:	d11d      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0e1b      	lsrs	r3, r3, #24
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	0f1b      	lsrs	r3, r3, #28
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	431a      	orrs	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	4929      	ldr	r1, [pc, #164]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	0e1b      	lsrs	r3, r3, #24
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	019a      	lsls	r2, r3, #6
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	431a      	orrs	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	4917      	ldr	r1, [pc, #92]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	4911      	ldr	r1, [pc, #68]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd ffb6 	bl	8001250 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e8:	f7fd ffb2 	bl	8001250 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e007      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003306:	d1ef      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e09d      	b.n	8003466 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d009      	beq.n	8003350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
 8003342:	e005      	b.n	8003350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fcb8 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003386:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003390:	d902      	bls.n	8003398 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e002      	b.n	800339e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033a6:	d007      	beq.n	80033b8 <HAL_SPI_Init+0xa0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	ea42 0103 	orr.w	r1, r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	f003 0204 	and.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003434:	ea42 0103 	orr.w	r1, r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b088      	sub	sp, #32
 8003472:	af02      	add	r7, sp, #8
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348a:	d112      	bne.n	80034b2 <HAL_SPI_Receive+0x44>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10e      	bne.n	80034b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2204      	movs	r2, #4
 8003498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f910 	bl	80036ce <HAL_SPI_TransmitReceive>
 80034ae:	4603      	mov	r3, r0
 80034b0:	e109      	b.n	80036c6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_SPI_Receive+0x52>
 80034bc:	2302      	movs	r3, #2
 80034be:	e102      	b.n	80036c6 <HAL_SPI_Receive+0x258>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c8:	f7fd fec2 	bl	8001250 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d002      	beq.n	80034e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034de:	e0e9      	b.n	80036b4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_SPI_Receive+0x7e>
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034f0:	e0e0      	b.n	80036b4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2204      	movs	r2, #4
 80034f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800353c:	d908      	bls.n	8003550 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	e007      	b.n	8003560 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003568:	d10f      	bne.n	800358a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d007      	beq.n	80035a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b0:	d867      	bhi.n	8003682 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035b2:	e030      	b.n	8003616 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d117      	bne.n	80035f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f103 020c 	add.w	r2, r3, #12
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035f0:	e011      	b.n	8003616 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fd fe2d 	bl	8001250 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_Receive+0x19c>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Receive+0x1a2>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003614:	e04e      	b.n	80036b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1c8      	bne.n	80035b4 <HAL_SPI_Receive+0x146>
 8003622:	e034      	b.n	800368e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800365c:	e011      	b.n	8003682 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800365e:	f7fd fdf7 	bl	8001250 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d803      	bhi.n	8003676 <HAL_SPI_Receive+0x208>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d102      	bne.n	800367c <HAL_SPI_Receive+0x20e>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003680:	e018      	b.n	80036b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ca      	bne.n	8003624 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fb4c 	bl	8003d30 <SPI_EndRxTransaction>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
 80036b0:	e000      	b.n	80036b4 <HAL_SPI_Receive+0x246>
  }

error :
 80036b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b08a      	sub	sp, #40	; 0x28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036dc:	2301      	movs	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x26>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e1fb      	b.n	8003aec <HAL_SPI_TransmitReceive+0x41e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036fc:	f7fd fda8 	bl	8001250 <HAL_GetTick>
 8003700:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003708:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003718:	7efb      	ldrb	r3, [r7, #27]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d00e      	beq.n	800373c <HAL_SPI_TransmitReceive+0x6e>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003724:	d106      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x66>
 800372e:	7efb      	ldrb	r3, [r7, #27]
 8003730:	2b04      	cmp	r3, #4
 8003732:	d003      	beq.n	800373c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800373a:	e1cd      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_SPI_TransmitReceive+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_TransmitReceive+0x80>
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003754:	e1c0      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b04      	cmp	r3, #4
 8003760:	d003      	beq.n	800376a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2205      	movs	r2, #5
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	887a      	ldrh	r2, [r7, #2]
 800377a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ac:	d802      	bhi.n	80037b4 <HAL_SPI_TransmitReceive+0xe6>
 80037ae:	8a3b      	ldrh	r3, [r7, #16]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d908      	bls.n	80037c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	e007      	b.n	80037d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d007      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037fc:	d97c      	bls.n	80038f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_SPI_TransmitReceive+0x13e>
 8003806:	8a7b      	ldrh	r3, [r7, #18]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d169      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003830:	e056      	b.n	80038e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11b      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x1aa>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_SPI_TransmitReceive+0x1aa>
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	2b01      	cmp	r3, #1
 800384e:	d113      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d11c      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x1f2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	b292      	uxth	r2, r2
 800389e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	1c9a      	adds	r2, r3, #2
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c0:	f7fd fcc6 	bl	8001250 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d807      	bhi.n	80038e0 <HAL_SPI_TransmitReceive+0x212>
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d003      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038de:	e0fb      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1a3      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x164>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d19d      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x164>
 80038f6:	e0df      	b.n	8003ab8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x23a>
 8003900:	8a7b      	ldrh	r3, [r7, #18]
 8003902:	2b01      	cmp	r3, #1
 8003904:	f040 80cb 	bne.w	8003a9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d912      	bls.n	8003938 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b02      	subs	r3, #2
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003936:	e0b2      	b.n	8003a9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395e:	e09e      	b.n	8003a9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d134      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x30a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02f      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x30a>
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b01      	cmp	r3, #1
 800397c:	d12c      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d912      	bls.n	80039ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b02      	subs	r3, #2
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ac:	e012      	b.n	80039d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d148      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x3aa>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d042      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d923      	bls.n	8003a46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b02      	subs	r3, #2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d81f      	bhi.n	8003a74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	e016      	b.n	8003a74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f103 020c 	add.w	r2, r3, #12
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a74:	2301      	movs	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a78:	f7fd fbea 	bl	8001250 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d803      	bhi.n	8003a90 <HAL_SPI_TransmitReceive+0x3c2>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x3c8>
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a9c:	e01c      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f af5b 	bne.w	8003960 <HAL_SPI_TransmitReceive+0x292>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f47f af54 	bne.w	8003960 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f9b3 	bl	8003e28 <SPI_EndRxTxTransaction>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ad4:	e000      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b04:	f7fd fba4 	bl	8001250 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b14:	f7fd fb9c 	bl	8001250 <HAL_GetTick>
 8003b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	015b      	lsls	r3, r3, #5
 8003b20:	0d1b      	lsrs	r3, r3, #20
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b2a:	e054      	b.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d050      	beq.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b34:	f7fd fb8c 	bl	8001250 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d902      	bls.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d13d      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d111      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6c:	d004      	beq.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d107      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d10f      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e017      	b.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d19b      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000008 	.word	0x20000008

08003c04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c16:	f7fd fb1b 	bl	8001250 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c26:	f7fd fb13 	bl	8001250 <HAL_GetTick>
 8003c2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	0d1b      	lsrs	r3, r3, #20
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c4c:	e060      	b.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c54:	d107      	bne.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d050      	beq.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c6e:	f7fd faef 	bl	8001250 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d902      	bls.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13d      	bne.n	8003d00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9c:	d111      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	d004      	beq.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d107      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cca:	d10f      	bne.n	8003cec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e010      	b.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d196      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000008 	.word	0x20000008

08003d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d44:	d111      	bne.n	8003d6a <SPI_EndRxTransaction+0x3a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4e:	d004      	beq.n	8003d5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d58:	d107      	bne.n	8003d6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d112      	bne.n	8003d9a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff feb8 	bl	8003af4 <SPI_WaitFlagStateUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d021      	beq.n	8003dce <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e03d      	b.n	8003e16 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <SPI_EndRxTransaction+0xf0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <SPI_EndRxTransaction+0xf4>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0d5b      	lsrs	r3, r3, #21
 8003da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d0f2      	beq.n	8003db0 <SPI_EndRxTransaction+0x80>
 8003dca:	e000      	b.n	8003dce <SPI_EndRxTransaction+0x9e>
        break;
 8003dcc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d11d      	bne.n	8003e14 <SPI_EndRxTransaction+0xe4>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d004      	beq.n	8003dec <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d113      	bne.n	8003e14 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff ff03 	bl	8003c04 <SPI_WaitFifoStateUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e000      	b.n	8003e16 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000008 	.word	0x20000008
 8003e24:	165e9f81 	.word	0x165e9f81

08003e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff fedf 	bl	8003c04 <SPI_WaitFifoStateUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e046      	b.n	8003eea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <SPI_EndRxTxTransaction+0xcc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a25      	ldr	r2, [pc, #148]	; (8003ef8 <SPI_EndRxTxTransaction+0xd0>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0d5b      	lsrs	r3, r3, #21
 8003e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d112      	bne.n	8003ea2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff fe34 	bl	8003af4 <SPI_WaitFlagStateUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e023      	b.n	8003eea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d0f2      	beq.n	8003ea2 <SPI_EndRxTxTransaction+0x7a>
 8003ebc:	e000      	b.n	8003ec0 <SPI_EndRxTxTransaction+0x98>
        break;
 8003ebe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fe99 	bl	8003c04 <SPI_WaitFifoStateUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e000      	b.n	8003eea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000008 	.word	0x20000008
 8003ef8:	165e9f81 	.word	0x165e9f81

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc ff40 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f82c 	bl	8003f98 <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e022      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa84 	bl	8004460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb0b 	bl	80045a4 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4ba6      	ldr	r3, [pc, #664]	; (800425c <UART_SetConfig+0x2c4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a94      	ldr	r2, [pc, #592]	; (8004260 <UART_SetConfig+0x2c8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d120      	bne.n	8004056 <UART_SetConfig+0xbe>
 8004014:	4b93      	ldr	r3, [pc, #588]	; (8004264 <UART_SetConfig+0x2cc>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b03      	cmp	r3, #3
 8004020:	d816      	bhi.n	8004050 <UART_SetConfig+0xb8>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x90>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004039 	.word	0x08004039
 800402c:	08004045 	.word	0x08004045
 8004030:	0800403f 	.word	0x0800403f
 8004034:	0800404b 	.word	0x0800404b
 8004038:	2301      	movs	r3, #1
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e150      	b.n	80042e0 <UART_SetConfig+0x348>
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e14d      	b.n	80042e0 <UART_SetConfig+0x348>
 8004044:	2304      	movs	r3, #4
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e14a      	b.n	80042e0 <UART_SetConfig+0x348>
 800404a:	2308      	movs	r3, #8
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e147      	b.n	80042e0 <UART_SetConfig+0x348>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e144      	b.n	80042e0 <UART_SetConfig+0x348>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a83      	ldr	r2, [pc, #524]	; (8004268 <UART_SetConfig+0x2d0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d132      	bne.n	80040c6 <UART_SetConfig+0x12e>
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <UART_SetConfig+0x2cc>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d828      	bhi.n	80040c0 <UART_SetConfig+0x128>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0xdc>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040c1 	.word	0x080040c1
 800407c:	080040c1 	.word	0x080040c1
 8004080:	080040c1 	.word	0x080040c1
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040c1 	.word	0x080040c1
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040c1 	.word	0x080040c1
 8004094:	080040af 	.word	0x080040af
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c1 	.word	0x080040c1
 80040a4:	080040bb 	.word	0x080040bb
 80040a8:	2300      	movs	r3, #0
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e118      	b.n	80042e0 <UART_SetConfig+0x348>
 80040ae:	2302      	movs	r3, #2
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e115      	b.n	80042e0 <UART_SetConfig+0x348>
 80040b4:	2304      	movs	r3, #4
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e112      	b.n	80042e0 <UART_SetConfig+0x348>
 80040ba:	2308      	movs	r3, #8
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e10f      	b.n	80042e0 <UART_SetConfig+0x348>
 80040c0:	2310      	movs	r3, #16
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e10c      	b.n	80042e0 <UART_SetConfig+0x348>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a68      	ldr	r2, [pc, #416]	; (800426c <UART_SetConfig+0x2d4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d120      	bne.n	8004112 <UART_SetConfig+0x17a>
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <UART_SetConfig+0x2cc>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d013      	beq.n	8004106 <UART_SetConfig+0x16e>
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	d814      	bhi.n	800410c <UART_SetConfig+0x174>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d009      	beq.n	80040fa <UART_SetConfig+0x162>
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d810      	bhi.n	800410c <UART_SetConfig+0x174>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <UART_SetConfig+0x15c>
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d006      	beq.n	8004100 <UART_SetConfig+0x168>
 80040f2:	e00b      	b.n	800410c <UART_SetConfig+0x174>
 80040f4:	2300      	movs	r3, #0
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e0f2      	b.n	80042e0 <UART_SetConfig+0x348>
 80040fa:	2302      	movs	r3, #2
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e0ef      	b.n	80042e0 <UART_SetConfig+0x348>
 8004100:	2304      	movs	r3, #4
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0ec      	b.n	80042e0 <UART_SetConfig+0x348>
 8004106:	2308      	movs	r3, #8
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e0e9      	b.n	80042e0 <UART_SetConfig+0x348>
 800410c:	2310      	movs	r3, #16
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e0e6      	b.n	80042e0 <UART_SetConfig+0x348>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a56      	ldr	r2, [pc, #344]	; (8004270 <UART_SetConfig+0x2d8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d120      	bne.n	800415e <UART_SetConfig+0x1c6>
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <UART_SetConfig+0x2cc>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004126:	2bc0      	cmp	r3, #192	; 0xc0
 8004128:	d013      	beq.n	8004152 <UART_SetConfig+0x1ba>
 800412a:	2bc0      	cmp	r3, #192	; 0xc0
 800412c:	d814      	bhi.n	8004158 <UART_SetConfig+0x1c0>
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x1ae>
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d810      	bhi.n	8004158 <UART_SetConfig+0x1c0>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0x1a8>
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d006      	beq.n	800414c <UART_SetConfig+0x1b4>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x1c0>
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e0cc      	b.n	80042e0 <UART_SetConfig+0x348>
 8004146:	2302      	movs	r3, #2
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e0c9      	b.n	80042e0 <UART_SetConfig+0x348>
 800414c:	2304      	movs	r3, #4
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e0c6      	b.n	80042e0 <UART_SetConfig+0x348>
 8004152:	2308      	movs	r3, #8
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e0c3      	b.n	80042e0 <UART_SetConfig+0x348>
 8004158:	2310      	movs	r3, #16
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e0c0      	b.n	80042e0 <UART_SetConfig+0x348>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a44      	ldr	r2, [pc, #272]	; (8004274 <UART_SetConfig+0x2dc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d125      	bne.n	80041b4 <UART_SetConfig+0x21c>
 8004168:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <UART_SetConfig+0x2cc>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004176:	d017      	beq.n	80041a8 <UART_SetConfig+0x210>
 8004178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417c:	d817      	bhi.n	80041ae <UART_SetConfig+0x216>
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d00b      	beq.n	800419c <UART_SetConfig+0x204>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d811      	bhi.n	80041ae <UART_SetConfig+0x216>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <UART_SetConfig+0x1fe>
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d006      	beq.n	80041a2 <UART_SetConfig+0x20a>
 8004194:	e00b      	b.n	80041ae <UART_SetConfig+0x216>
 8004196:	2300      	movs	r3, #0
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e0a1      	b.n	80042e0 <UART_SetConfig+0x348>
 800419c:	2302      	movs	r3, #2
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e09e      	b.n	80042e0 <UART_SetConfig+0x348>
 80041a2:	2304      	movs	r3, #4
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e09b      	b.n	80042e0 <UART_SetConfig+0x348>
 80041a8:	2308      	movs	r3, #8
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e098      	b.n	80042e0 <UART_SetConfig+0x348>
 80041ae:	2310      	movs	r3, #16
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e095      	b.n	80042e0 <UART_SetConfig+0x348>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <UART_SetConfig+0x2e0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d125      	bne.n	800420a <UART_SetConfig+0x272>
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <UART_SetConfig+0x2cc>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041cc:	d017      	beq.n	80041fe <UART_SetConfig+0x266>
 80041ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d2:	d817      	bhi.n	8004204 <UART_SetConfig+0x26c>
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d00b      	beq.n	80041f2 <UART_SetConfig+0x25a>
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041de:	d811      	bhi.n	8004204 <UART_SetConfig+0x26c>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <UART_SetConfig+0x254>
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d006      	beq.n	80041f8 <UART_SetConfig+0x260>
 80041ea:	e00b      	b.n	8004204 <UART_SetConfig+0x26c>
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e076      	b.n	80042e0 <UART_SetConfig+0x348>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e073      	b.n	80042e0 <UART_SetConfig+0x348>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e070      	b.n	80042e0 <UART_SetConfig+0x348>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e06d      	b.n	80042e0 <UART_SetConfig+0x348>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e06a      	b.n	80042e0 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	; (800427c <UART_SetConfig+0x2e4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d138      	bne.n	8004286 <UART_SetConfig+0x2ee>
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800421e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004222:	d017      	beq.n	8004254 <UART_SetConfig+0x2bc>
 8004224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004228:	d82a      	bhi.n	8004280 <UART_SetConfig+0x2e8>
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422e:	d00b      	beq.n	8004248 <UART_SetConfig+0x2b0>
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004234:	d824      	bhi.n	8004280 <UART_SetConfig+0x2e8>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <UART_SetConfig+0x2aa>
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d006      	beq.n	800424e <UART_SetConfig+0x2b6>
 8004240:	e01e      	b.n	8004280 <UART_SetConfig+0x2e8>
 8004242:	2300      	movs	r3, #0
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e04b      	b.n	80042e0 <UART_SetConfig+0x348>
 8004248:	2302      	movs	r3, #2
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e048      	b.n	80042e0 <UART_SetConfig+0x348>
 800424e:	2304      	movs	r3, #4
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e045      	b.n	80042e0 <UART_SetConfig+0x348>
 8004254:	2308      	movs	r3, #8
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e042      	b.n	80042e0 <UART_SetConfig+0x348>
 800425a:	bf00      	nop
 800425c:	efff69f3 	.word	0xefff69f3
 8004260:	40011000 	.word	0x40011000
 8004264:	40023800 	.word	0x40023800
 8004268:	40004400 	.word	0x40004400
 800426c:	40004800 	.word	0x40004800
 8004270:	40004c00 	.word	0x40004c00
 8004274:	40005000 	.word	0x40005000
 8004278:	40011400 	.word	0x40011400
 800427c:	40007800 	.word	0x40007800
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e02c      	b.n	80042e0 <UART_SetConfig+0x348>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a72      	ldr	r2, [pc, #456]	; (8004454 <UART_SetConfig+0x4bc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <UART_SetConfig+0x344>
 8004290:	4b71      	ldr	r3, [pc, #452]	; (8004458 <UART_SetConfig+0x4c0>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800429a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800429e:	d017      	beq.n	80042d0 <UART_SetConfig+0x338>
 80042a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042a4:	d817      	bhi.n	80042d6 <UART_SetConfig+0x33e>
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042aa:	d00b      	beq.n	80042c4 <UART_SetConfig+0x32c>
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	d811      	bhi.n	80042d6 <UART_SetConfig+0x33e>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <UART_SetConfig+0x326>
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ba:	d006      	beq.n	80042ca <UART_SetConfig+0x332>
 80042bc:	e00b      	b.n	80042d6 <UART_SetConfig+0x33e>
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e00d      	b.n	80042e0 <UART_SetConfig+0x348>
 80042c4:	2302      	movs	r3, #2
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e00a      	b.n	80042e0 <UART_SetConfig+0x348>
 80042ca:	2304      	movs	r3, #4
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e007      	b.n	80042e0 <UART_SetConfig+0x348>
 80042d0:	2308      	movs	r3, #8
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x348>
 80042d6:	2310      	movs	r3, #16
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e001      	b.n	80042e0 <UART_SetConfig+0x348>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d15b      	bne.n	80043a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042ea:	7ffb      	ldrb	r3, [r7, #31]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d828      	bhi.n	8004342 <UART_SetConfig+0x3aa>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x360>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004343 	.word	0x08004343
 8004308:	08004333 	.word	0x08004333
 800430c:	08004343 	.word	0x08004343
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7fe fbe4 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004320:	61b8      	str	r0, [r7, #24]
        break;
 8004322:	e013      	b.n	800434c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe fbf4 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8004328:	61b8      	str	r0, [r7, #24]
        break;
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <UART_SetConfig+0x4c4>)
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe fac7 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8004336:	61b8      	str	r0, [r7, #24]
        break;
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e004      	b.n	800434c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	77bb      	strb	r3, [r7, #30]
        break;
 800434a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d074      	beq.n	800443c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	005a      	lsls	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d916      	bls.n	800439c <UART_SetConfig+0x404>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d212      	bcs.n	800439c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f023 030f 	bic.w	r3, r3, #15
 800437e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	b29b      	uxth	r3, r3
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	b29a      	uxth	r2, r3
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	4313      	orrs	r3, r2
 8004390:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	89fa      	ldrh	r2, [r7, #14]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	e04f      	b.n	800443c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	77bb      	strb	r3, [r7, #30]
 80043a0:	e04c      	b.n	800443c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d828      	bhi.n	80043fa <UART_SetConfig+0x462>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x418>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fe fb88 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 80043d8:	61b8      	str	r0, [r7, #24]
        break;
 80043da:	e013      	b.n	8004404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe fb98 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80043e0:	61b8      	str	r0, [r7, #24]
        break;
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <UART_SetConfig+0x4c4>)
 80043e6:	61bb      	str	r3, [r7, #24]
        break;
 80043e8:	e00c      	b.n	8004404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fe fa6b 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80043ee:	61b8      	str	r0, [r7, #24]
        break;
 80043f0:	e008      	b.n	8004404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e004      	b.n	8004404 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	77bb      	strb	r3, [r7, #30]
        break;
 8004402:	bf00      	nop
    }

    if (pclk != 0U)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085a      	lsrs	r2, r3, #1
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	441a      	add	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d909      	bls.n	8004438 <UART_SetConfig+0x4a0>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d205      	bcs.n	8004438 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e001      	b.n	800443c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004448:	7fbb      	ldrb	r3, [r7, #30]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40007c00 	.word	0x40007c00
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400

08004460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d10a      	bne.n	8004576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b4:	f7fc fe4c 	bl	8001250 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10e      	bne.n	80045e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f81b 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e011      	b.n	800460a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b09c      	sub	sp, #112	; 0x70
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	e0a7      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	f000 80a3 	beq.w	8004774 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fc fe0f 	bl	8001250 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <UART_WaitOnFlagUntilTimeout+0x32>
 800463e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004640:	2b00      	cmp	r3, #0
 8004642:	d13f      	bne.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004658:	667b      	str	r3, [r7, #100]	; 0x64
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004664:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e6      	bne.n	8004644 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004696:	64ba      	str	r2, [r7, #72]	; 0x48
 8004698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800469c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e068      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d050      	beq.n	8004774 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d148      	bne.n	8004774 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
 800470c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e6      	bne.n	80046ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3308      	adds	r3, #8
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	613b      	str	r3, [r7, #16]
   return(result);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	66bb      	str	r3, [r7, #104]	; 0x68
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800473e:	623a      	str	r2, [r7, #32]
 8004740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	69f9      	ldr	r1, [r7, #28]
 8004744:	6a3a      	ldr	r2, [r7, #32]
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	61bb      	str	r3, [r7, #24]
   return(result);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e010      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	f43f af48 	beq.w	8004624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3770      	adds	r7, #112	; 0x70
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047a0:	b084      	sub	sp, #16
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	f107 001c 	add.w	r0, r7, #28
 80047ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d120      	bne.n	80047fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <USB_CoreInit+0xac>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa96 	bl	8004d20 <USB_CoreReset>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e010      	b.n	800481c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa8a 	bl	8004d20 <USB_CoreReset>
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10b      	bne.n	800483a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f043 0206 	orr.w	r2, r3, #6
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004846:	b004      	add	sp, #16
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	ffbdffbf 	.word	0xffbdffbf

08004850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f023 0201 	bic.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d115      	bne.n	80048c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fc fce1 	bl	8001268 <HAL_Delay>
      ms++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa29 	bl	8004d04 <USB_GetMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d01e      	beq.n	80048f6 <USB_SetCurrentMode+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b31      	cmp	r3, #49	; 0x31
 80048bc:	d9f0      	bls.n	80048a0 <USB_SetCurrentMode+0x2e>
 80048be:	e01a      	b.n	80048f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d115      	bne.n	80048f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d2:	2001      	movs	r0, #1
 80048d4:	f7fc fcc8 	bl	8001268 <HAL_Delay>
      ms++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa10 	bl	8004d04 <USB_GetMode>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <USB_SetCurrentMode+0x84>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b31      	cmp	r3, #49	; 0x31
 80048ee:	d9f0      	bls.n	80048d2 <USB_SetCurrentMode+0x60>
 80048f0:	e001      	b.n	80048f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e005      	b.n	8004902 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b32      	cmp	r3, #50	; 0x32
 80048fa:	d101      	bne.n	8004900 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800490c:	b084      	sub	sp, #16
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800491a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e009      	b.n	8004940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3340      	adds	r3, #64	; 0x40
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0e      	cmp	r3, #14
 8004944:	d9f2      	bls.n	800492c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11c      	bne.n	8004986 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495a:	f043 0302 	orr.w	r3, r3, #2
 800495e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	4619      	mov	r1, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ac:	461a      	mov	r2, r3
 80049ae:	680b      	ldr	r3, [r1, #0]
 80049b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10c      	bne.n	80049d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049be:	2100      	movs	r1, #0
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f965 	bl	8004c90 <USB_SetDevSpeed>
 80049c6:	e008      	b.n	80049da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c8:	2101      	movs	r1, #1
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f960 	bl	8004c90 <USB_SetDevSpeed>
 80049d0:	e003      	b.n	80049da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049d2:	2103      	movs	r1, #3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f95b 	bl	8004c90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049da:	2110      	movs	r1, #16
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8f3 	bl	8004bc8 <USB_FlushTxFifo>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f91f 	bl	8004c30 <USB_FlushRxFifo>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	e043      	b.n	8004aae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3c:	d118      	bne.n	8004a70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e013      	b.n	8004a82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e008      	b.n	8004a82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3b7      	bcc.n	8004a26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e043      	b.n	8004b44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad2:	d118      	bne.n	8004b06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e013      	b.n	8004b18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e008      	b.n	8004b18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	461a      	mov	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d3b7      	bcc.n	8004abc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <USB_DevInit+0x2b4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f043 0208 	orr.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <USB_DevInit+0x2b8>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbc:	b004      	add	sp, #16
 8004bbe:	4770      	bx	lr
 8004bc0:	803c3800 	.word	0x803c3800
 8004bc4:	40000004 	.word	0x40000004

08004bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <USB_FlushTxFifo+0x64>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e01b      	b.n	8004c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	daf2      	bge.n	8004bd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <USB_FlushTxFifo+0x64>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e006      	b.n	8004c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d0f0      	beq.n	8004c00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	00030d40 	.word	0x00030d40

08004c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <USB_FlushRxFifo+0x5c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e018      	b.n	8004c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	daf2      	bge.n	8004c3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <USB_FlushRxFifo+0x5c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e006      	b.n	8004c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d0f0      	beq.n	8004c60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	00030d40 	.word	0x00030d40

08004c90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cdc:	f023 0303 	bic.w	r3, r3, #3
 8004ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0301 	and.w	r3, r3, #1
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <USB_CoreReset+0x64>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e01b      	b.n	8004d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	daf2      	bge.n	8004d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <USB_CoreReset+0x64>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e006      	b.n	8004d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d0f0      	beq.n	8004d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	00030d40 	.word	0x00030d40

08004d88 <tvmgen_default_run>:
#ifdef __cplusplus
extern "C" {
#endif
#include <tvmgen_default.h>
TVM_DLL int32_t tvmgen_default___tvm_main__(void* serving_default_input_1_0,void* output0);
int32_t tvmgen_default_run(struct tvmgen_default_inputs* inputs,struct tvmgen_default_outputs* outputs) {return tvmgen_default___tvm_main__(inputs->serving_default_input_1_0,outputs->StatefulPartitionedCall_0);
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fcaf 	bl	8005700 <tvmgen_default___tvm_main__>
 8004da2:	4603      	mov	r3, r0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_>:
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_(int8_t* p0, int8_t* T_cast) {
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0a6      	sub	sp, #152	; 0x98
 8004db2:	af02      	add	r7, sp, #8
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
  void* dense = TVMBackendAllocWorkspace(1, 0, (uint64_t)2048, 0, 32);
 8004db8:	2320      	movs	r3, #32
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f000 fd24 	bl	8005818 <TVMBackendAllocWorkspace>
 8004dd0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (dense == NULL) {
 8004dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x36>
    return -1;
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8004de0:	e16c      	b.n	80050bc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x310>
  }
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004de8:	e0b7      	b.n	8004f5a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x1ae>
    gemm_1x1x1_reset_QBTRSJPK((&(((int32_t*)dense)[y_outer])), 1);
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004df4:	4413      	add	r3, r2
 8004df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df8:	2301      	movs	r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int i = 0; i < 1; i++) {
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8004e00:	e016      	b.n	8004e30 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x84>
    for (int j = 0; j < 1; j++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	663b      	str	r3, [r7, #96]	; 0x60
 8004e06:	e00d      	b.n	8004e24 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x78>
      cc[i*C_stride + j] = 0;
 8004e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e0c:	fb03 f202 	mul.w	r2, r3, r2
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e18:	4413      	add	r3, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8004e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e20:	3301      	adds	r3, #1
 8004e22:	663b      	str	r3, [r7, #96]	; 0x60
 8004e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	ddee      	ble.n	8004e08 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x5c>
  for (int i = 0; i < 1; i++) {
 8004e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	dde5      	ble.n	8004e02 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x56>
    for (int32_t k_outer = 0; k_outer < 5; ++k_outer) {
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e3c:	e083      	b.n	8004f46 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x19a>
      gemm_1x1x1_update_QBTRSJPK((&(p0[k_outer])), (&(((int8_t*)fused_constant)[((y_outer * 5) + k_outer)])), (&(((int32_t*)dense)[y_outer])), 1, 1, 1);
 8004e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	18d1      	adds	r1, r2, r3
 8004e46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e54:	4413      	add	r3, r2
 8004e56:	461a      	mov	r2, r3
 8004e58:	4b9b      	ldr	r3, [pc, #620]	; (80050c8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x31c>)
 8004e5a:	441a      	add	r2, r3
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004e66:	4403      	add	r3, r0
 8004e68:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004e6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e6e:	2301      	movs	r3, #1
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
 8004e72:	2301      	movs	r3, #1
 8004e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e76:	2301      	movs	r3, #1
 8004e78:	64bb      	str	r3, [r7, #72]	; 0x48
  int32_t retcode = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
 8004e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < 1; i++) {
 8004e96:	2300      	movs	r3, #0
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e9a:	e048      	b.n	8004f2e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x182>
    for (int j = 0; j < 1; j++) {
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e03f      	b.n	8004f22 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x176>
      int32_t sum = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e01e      	b.n	8004eea <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x13e>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb0:	fb03 f202 	mul.w	r2, r3, r2
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	fb03 f202 	mul.w	r2, r3, r2
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	dddd      	ble.n	8004eac <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x100>
      cc[i*C_stride + j] += sum;
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef4:	fb03 f202 	mul.w	r2, r3, r2
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f00:	4413      	add	r3, r2
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f08:	fb03 f202 	mul.w	r2, r3, r2
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f14:	4413      	add	r3, r2
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	440a      	add	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	3301      	adds	r3, #1
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	ddbc      	ble.n	8004ea2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0xf6>
  for (int i = 0; i < 1; i++) {
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	ddb3      	ble.n	8004e9c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0xf0>
  return 0;
 8004f34:	2300      	movs	r3, #0
    retcode = gemm_1x1x1_update_loop_QBTRSJPK(aa, bb, cc, A_stride, B_stride, C_stride);
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
    goto out;
 8004f38:	bf00      	nop
  return retcode;
 8004f3a:	bf00      	nop
    for (int32_t k_outer = 0; k_outer < 5; ++k_outer) {
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f40:	3301      	adds	r3, #1
 8004f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	f77f af77 	ble.w	8004e3e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x92>
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8004f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f54:	3301      	adds	r3, #1
 8004f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	f6ff af42 	blt.w	8004dea <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x3e>
    }
  }
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f6c:	e093      	b.n	8005096 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2ea>
    int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant)[ax1]) - ((int32_t*)fused_nn_dense_constant)[ax1])) << ((int64_t)0)) : ((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant)[ax1]) - ((int32_t*)fused_nn_dense_constant)[ax1]))) * (int64_t)1365986415) + ((int64_t)1 << ((int64_t)((8 + 31) - 1)))) >> ((int64_t)(8 + 31)))) - 1;
 8004f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f78:	4413      	add	r3, r2
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4952      	ldr	r1, [pc, #328]	; (80050cc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x320>)
 8004f84:	440b      	add	r3, r1
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	441a      	add	r2, r3
 8004f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	494f      	ldr	r1, [pc, #316]	; (80050d0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x324>)
 8004f92:	440b      	add	r3, r1
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	17da      	asrs	r2, r3, #31
 8004f9a:	4698      	mov	r8, r3
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x328>)
 8004fa0:	fb03 f209 	mul.w	r2, r3, r9
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	fb03 f308 	mul.w	r3, r3, r8
 8004faa:	4413      	add	r3, r2
 8004fac:	4a49      	ldr	r2, [pc, #292]	; (80050d4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x328>)
 8004fae:	fba8 4502 	umull	r4, r5, r8, r2
 8004fb2:	442b      	add	r3, r5
 8004fb4:	461d      	mov	r5, r3
 8004fb6:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 8004fba:	46a2      	mov	sl, r4
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	ea4f 12eb 	mov.w	r2, fp, asr #7
 8004fc8:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8004fcc:	4613      	mov	r3, r2
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t v__1 = (v_) < (127) ? (v_) : (127);
 8004fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	bfa8      	it	ge
 8004fd8:	237f      	movge	r3, #127	; 0x7f
 8004fda:	67bb      	str	r3, [r7, #120]	; 0x78
    float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 1)) * 3.400486e-01f))))) * 2.560000e+02f)) + -1.280000e+02f;
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fde:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	bfb8      	it	lt
 8004fe6:	4613      	movlt	r3, r2
 8004fe8:	3301      	adds	r3, #1
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80050d8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x32c>
 8004ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ffa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80050dc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x330>
 8004ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005002:	eeb0 0a67 	vmov.f32	s0, s15
 8005006:	f002 f875 	bl	80070f4 <expf>
 800500a:	eef0 7a40 	vmov.f32	s15, s0
 800500e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80050e0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x334>
 8005022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005026:	eeb0 0a67 	vmov.f32	s0, s15
 800502a:	f002 f83f 	bl	80070ac <roundf>
 800502e:	eef0 7a40 	vmov.f32	s15, s0
 8005032:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80050e4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x338>
 8005036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800503a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 800503e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005042:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80050e8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x33c>
 8005046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	d501      	bpl.n	8005054 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2a8>
 8005050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005052:	e000      	b.n	8005056 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2aa>
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x340>)
 8005056:	673b      	str	r3, [r7, #112]	; 0x70
    T_cast[ax1] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 8005058:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800505c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80050f0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x344>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	dd08      	ble.n	800507c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2d0>
 800506a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800506e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005072:	edc7 7a01 	vstr	s15, [r7, #4]
 8005076:	793b      	ldrb	r3, [r7, #4]
 8005078:	b259      	sxtb	r1, r3
 800507a:	e001      	b.n	8005080 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2d4>
 800507c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8005080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	4413      	add	r3, r2
 8005088:	460a      	mov	r2, r1
 800508a:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 800508c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005090:	3301      	adds	r3, #1
 8005092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	f6ff af66 	blt.w	8004f6e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x1c2>
  }
  if (TVMBackendFreeWorkspace(1, 0, dense) != 0) {
 80050a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050a6:	2100      	movs	r1, #0
 80050a8:	2001      	movs	r0, #1
 80050aa:	f000 fc09 	bl	80058c0 <TVMBackendFreeWorkspace>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x30e>
    return -1;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	e000      	b.n	80050bc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x310>
  }
  return 0;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3790      	adds	r7, #144	; 0x90
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop
 80050c8:	08008710 	.word	0x08008710
 80050cc:	08007f10 	.word	0x08007f10
 80050d0:	08007710 	.word	0x08007710
 80050d4:	516b4c6f 	.word	0x516b4c6f
 80050d8:	3eae1ada 	.word	0x3eae1ada
 80050dc:	00000000 	.word	0x00000000
 80050e0:	43800000 	.word	0x43800000
 80050e4:	43000000 	.word	0x43000000
 80050e8:	42fe0000 	.word	0x42fe0000
 80050ec:	42fe0000 	.word	0x42fe0000
 80050f0:	c3000000 	.word	0xc3000000

080050f4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1(int8_t* p0, int8_t* T_cast) {
 80050f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f8:	b0a6      	sub	sp, #152	; 0x98
 80050fa:	af02      	add	r7, sp, #8
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
  void* dense = TVMBackendAllocWorkspace(1, 0, (uint64_t)2048, 0, 32);
 8005100:	2320      	movs	r3, #32
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	2100      	movs	r1, #0
 8005112:	2001      	movs	r0, #1
 8005114:	f000 fb80 	bl	8005818 <TVMBackendAllocWorkspace>
 8005118:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (dense == NULL) {
 800511c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x36>
    return -1;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	e16b      	b.n	8005402 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30e>
  }
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 800512a:	2300      	movs	r3, #0
 800512c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005130:	e0b6      	b.n	80052a0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x1ac>
    gemm_1x1x1_reset_TIIKKEPU((&(((int32_t*)dense)[y_outer])), 1);
 8005132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800513c:	4413      	add	r3, r2
 800513e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005140:	2301      	movs	r3, #1
 8005142:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int i = 0; i < 1; i++) {
 8005144:	2300      	movs	r3, #0
 8005146:	667b      	str	r3, [r7, #100]	; 0x64
 8005148:	e016      	b.n	8005178 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x84>
    for (int j = 0; j < 1; j++) {
 800514a:	2300      	movs	r3, #0
 800514c:	663b      	str	r3, [r7, #96]	; 0x60
 800514e:	e00d      	b.n	800516c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x78>
      cc[i*C_stride + j] = 0;
 8005150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005154:	fb03 f202 	mul.w	r2, r3, r2
 8005158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8005166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005168:	3301      	adds	r3, #1
 800516a:	663b      	str	r3, [r7, #96]	; 0x60
 800516c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516e:	2b00      	cmp	r3, #0
 8005170:	ddee      	ble.n	8005150 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x5c>
  for (int i = 0; i < 1; i++) {
 8005172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005174:	3301      	adds	r3, #1
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
 8005178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517a:	2b00      	cmp	r3, #0
 800517c:	dde5      	ble.n	800514a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x56>
    for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005184:	e081      	b.n	800528a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x196>
      gemm_1x1x1_update_TIIKKEPU((&(p0[k_outer])), (&(((int8_t*)fused_constant_1)[((y_outer * 512) + k_outer)])), (&(((int32_t*)dense)[y_outer])), 1, 1, 1);
 8005186:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	18d1      	adds	r1, r2, r3
 800518e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005192:	025a      	lsls	r2, r3, #9
 8005194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005198:	4413      	add	r3, r2
 800519a:	461a      	mov	r2, r3
 800519c:	4b9b      	ldr	r3, [pc, #620]	; (800540c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x318>)
 800519e:	441a      	add	r2, r3
 80051a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80051aa:	4403      	add	r3, r0
 80051ac:	65f9      	str	r1, [r7, #92]	; 0x5c
 80051ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80051b0:	657b      	str	r3, [r7, #84]	; 0x54
 80051b2:	2301      	movs	r3, #1
 80051b4:	653b      	str	r3, [r7, #80]	; 0x50
 80051b6:	2301      	movs	r3, #1
 80051b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ba:	2301      	movs	r3, #1
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
  int32_t retcode = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
 80051c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < 1; i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051de:	e048      	b.n	8005272 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x17e>
    for (int j = 0; j < 1; j++) {
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e03f      	b.n	8005266 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x172>
      int32_t sum = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e01e      	b.n	800522e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x13a>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f4:	fb03 f202 	mul.w	r2, r3, r2
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005200:	4413      	add	r3, r2
 8005202:	f993 3000 	ldrsb.w	r3, [r3]
 8005206:	4619      	mov	r1, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	fb03 f202 	mul.w	r2, r3, r2
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	461a      	mov	r2, r3
 8005216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005218:	4413      	add	r3, r2
 800521a:	f993 3000 	ldrsb.w	r3, [r3]
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	dddd      	ble.n	80051f0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xfc>
      cc[i*C_stride + j] += sum;
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005238:	fb03 f202 	mul.w	r2, r3, r2
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005244:	4413      	add	r3, r2
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524c:	fb03 f202 	mul.w	r2, r3, r2
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005258:	4413      	add	r3, r2
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	440a      	add	r2, r1
 800525e:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	3301      	adds	r3, #1
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	ddbc      	ble.n	80051e6 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xf2>
  for (int i = 0; i < 1; i++) {
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	3301      	adds	r3, #1
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	ddb3      	ble.n	80051e0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xec>
  return 0;
 8005278:	2300      	movs	r3, #0
    retcode = gemm_1x1x1_update_loop_TIIKKEPU(aa, bb, cc, A_stride, B_stride, C_stride);
 800527a:	647b      	str	r3, [r7, #68]	; 0x44
    goto out;
 800527c:	bf00      	nop
  return retcode;
 800527e:	bf00      	nop
    for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8005280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005284:	3301      	adds	r3, #1
 8005286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800528a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005292:	f6ff af78 	blt.w	8005186 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x92>
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8005296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800529a:	3301      	adds	r3, #1
 800529c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a8:	f6ff af43 	blt.w	8005132 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x3e>
    }
  }
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052b2:	e093      	b.n	80053dc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2e8>
    int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant_1)[ax1]) - ((int32_t*)fused_nn_dense_constant_1)[ax1])) << ((int64_t)0)) : ((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant_1)[ax1]) - ((int32_t*)fused_nn_dense_constant_1)[ax1]))) * (int64_t)1881032762) + ((int64_t)1 << ((int64_t)((13 + 31) - 1)))) >> ((int64_t)(13 + 31)))) - 42;
 80052b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052be:	4413      	add	r3, r2
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4951      	ldr	r1, [pc, #324]	; (8005410 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x31c>)
 80052ca:	440b      	add	r3, r1
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	441a      	add	r2, r3
 80052d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	494f      	ldr	r1, [pc, #316]	; (8005414 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x320>)
 80052d8:	440b      	add	r3, r1
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	17da      	asrs	r2, r3, #31
 80052e0:	4698      	mov	r8, r3
 80052e2:	4691      	mov	r9, r2
 80052e4:	4b4c      	ldr	r3, [pc, #304]	; (8005418 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x324>)
 80052e6:	fb03 f209 	mul.w	r2, r3, r9
 80052ea:	2300      	movs	r3, #0
 80052ec:	fb03 f308 	mul.w	r3, r3, r8
 80052f0:	4413      	add	r3, r2
 80052f2:	4a49      	ldr	r2, [pc, #292]	; (8005418 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x324>)
 80052f4:	fba8 4502 	umull	r4, r5, r8, r2
 80052f8:	442b      	add	r3, r5
 80052fa:	461d      	mov	r5, r3
 80052fc:	f505 6b00 	add.w	fp, r5, #2048	; 0x800
 8005300:	46a2      	mov	sl, r4
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	ea4f 322b 	mov.w	r2, fp, asr #12
 800530e:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8005312:	4613      	mov	r3, r2
 8005314:	3b2a      	subs	r3, #42	; 0x2a
 8005316:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t v__1 = (v_) < (127) ? (v_) : (127);
 8005318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	bfa8      	it	ge
 800531e:	237f      	movge	r3, #127	; 0x7f
 8005320:	67bb      	str	r3, [r7, #120]	; 0x78
    float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 42)) * 2.201938e-02f))))) * 2.560000e+02f)) + -1.280000e+02f;
 8005322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005324:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	332a      	adds	r3, #42	; 0x2a
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005338:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800541c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x328>
 800533c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005340:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005420 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x32c>
 8005344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005348:	eeb0 0a67 	vmov.f32	s0, s15
 800534c:	f001 fed2 	bl	80070f4 <expf>
 8005350:	eef0 7a40 	vmov.f32	s15, s0
 8005354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005364:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005424 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x330>
 8005368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536c:	eeb0 0a67 	vmov.f32	s0, s15
 8005370:	f001 fe9c 	bl	80070ac <roundf>
 8005374:	eef0 7a40 	vmov.f32	s15, s0
 8005378:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005428 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x334>
 800537c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005380:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 8005384:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005388:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800542c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x338>
 800538c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005394:	d501      	bpl.n	800539a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2a6>
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	e000      	b.n	800539c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2a8>
 800539a:	4b25      	ldr	r3, [pc, #148]	; (8005430 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x33c>)
 800539c:	673b      	str	r3, [r7, #112]	; 0x70
    T_cast[ax1] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 800539e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80053a2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005434 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x340>
 80053a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	dd08      	ble.n	80053c2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2ce>
 80053b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80053b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80053bc:	793b      	ldrb	r3, [r7, #4]
 80053be:	b259      	sxtb	r1, r3
 80053c0:	e001      	b.n	80053c6 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2d2>
 80053c2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80053c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4413      	add	r3, r2
 80053ce:	460a      	mov	r2, r1
 80053d0:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 80053d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d6:	3301      	adds	r3, #1
 80053d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e4:	f6ff af66 	blt.w	80052b4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x1c0>
  }
  if (TVMBackendFreeWorkspace(1, 0, dense) != 0) {
 80053e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053ec:	2100      	movs	r1, #0
 80053ee:	2001      	movs	r0, #1
 80053f0:	f000 fa66 	bl	80058c0 <TVMBackendFreeWorkspace>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30c>
    return -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	e000      	b.n	8005402 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30e>
  }
  return 0;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3790      	adds	r7, #144	; 0x90
 8005406:	46bd      	mov	sp, r7
 8005408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540c:	0800a110 	.word	0x0800a110
 8005410:	08009910 	.word	0x08009910
 8005414:	08009110 	.word	0x08009110
 8005418:	701e483a 	.word	0x701e483a
 800541c:	3cb461fd 	.word	0x3cb461fd
 8005420:	00000000 	.word	0x00000000
 8005424:	43800000 	.word	0x43800000
 8005428:	43000000 	.word	0x43000000
 800542c:	42fe0000 	.word	0x42fe0000
 8005430:	42fe0000 	.word	0x42fe0000
 8005434:	c3000000 	.word	0xc3000000

08005438 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2(int8_t* p0, int8_t* T_cast) {
 8005438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800543c:	b0a3      	sub	sp, #140	; 0x8c
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	f107 011c 	add.w	r1, r7, #28
 8005448:	6739      	str	r1, [r7, #112]	; 0x70
 800544a:	2101      	movs	r1, #1
 800544c:	66f9      	str	r1, [r7, #108]	; 0x6c
  for (int i = 0; i < 1; i++) {
 800544e:	2100      	movs	r1, #0
 8005450:	66b9      	str	r1, [r7, #104]	; 0x68
 8005452:	e016      	b.n	8005482 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x4a>
    for (int j = 0; j < 1; j++) {
 8005454:	2100      	movs	r1, #0
 8005456:	6679      	str	r1, [r7, #100]	; 0x64
 8005458:	e00d      	b.n	8005476 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x3e>
      cc[i*C_stride + j] = 0;
 800545a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800545c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800545e:	fb01 f000 	mul.w	r0, r1, r0
 8005462:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005464:	4401      	add	r1, r0
 8005466:	0089      	lsls	r1, r1, #2
 8005468:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800546a:	4401      	add	r1, r0
 800546c:	2000      	movs	r0, #0
 800546e:	6008      	str	r0, [r1, #0]
    for (int j = 0; j < 1; j++) {
 8005470:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005472:	3101      	adds	r1, #1
 8005474:	6679      	str	r1, [r7, #100]	; 0x64
 8005476:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005478:	2900      	cmp	r1, #0
 800547a:	ddee      	ble.n	800545a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x22>
  for (int i = 0; i < 1; i++) {
 800547c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800547e:	3101      	adds	r1, #1
 8005480:	66b9      	str	r1, [r7, #104]	; 0x68
 8005482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005484:	2900      	cmp	r1, #0
 8005486:	dde5      	ble.n	8005454 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x1c>
  int32_t dense[1];
  gemm_1x1x1_reset_KETPAKCQ((&(dense[0])), 1);
  for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8005488:	2100      	movs	r1, #0
 800548a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800548e:	e078      	b.n	8005582 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x14a>
    gemm_1x1x1_update_KETPAKCQ((&(p0[k_outer])), (&(((int8_t*)fused_constant_2)[k_outer])), (&(dense[0])), 1, 1, 1);
 8005490:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	4408      	add	r0, r1
 8005498:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800549c:	4e7e      	ldr	r6, [pc, #504]	; (8005698 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x260>)
 800549e:	4431      	add	r1, r6
 80054a0:	6638      	str	r0, [r7, #96]	; 0x60
 80054a2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80054a4:	f107 011c 	add.w	r1, r7, #28
 80054a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80054aa:	2101      	movs	r1, #1
 80054ac:	6579      	str	r1, [r7, #84]	; 0x54
 80054ae:	2101      	movs	r1, #1
 80054b0:	6539      	str	r1, [r7, #80]	; 0x50
 80054b2:	2101      	movs	r1, #1
 80054b4:	64f9      	str	r1, [r7, #76]	; 0x4c
  int32_t retcode = 0;
 80054b6:	2100      	movs	r1, #0
 80054b8:	64b9      	str	r1, [r7, #72]	; 0x48
 80054ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054bc:	6479      	str	r1, [r7, #68]	; 0x44
 80054be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80054c0:	6439      	str	r1, [r7, #64]	; 0x40
 80054c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054c4:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80054ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054cc:	6379      	str	r1, [r7, #52]	; 0x34
 80054ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80054d0:	6339      	str	r1, [r7, #48]	; 0x30
  for (int i = 0; i < 1; i++) {
 80054d2:	2100      	movs	r1, #0
 80054d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054d6:	e048      	b.n	800556a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x132>
    for (int j = 0; j < 1; j++) {
 80054d8:	2100      	movs	r1, #0
 80054da:	62b9      	str	r1, [r7, #40]	; 0x28
 80054dc:	e03f      	b.n	800555e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x126>
      int32_t sum = 0;
 80054de:	2100      	movs	r1, #0
 80054e0:	6279      	str	r1, [r7, #36]	; 0x24
      for (int l = 0; l < 1; l++) {
 80054e2:	2100      	movs	r1, #0
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	e01e      	b.n	8005526 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xee>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 80054e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054ec:	fb01 f000 	mul.w	r0, r1, r0
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	4401      	add	r1, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f8:	4401      	add	r1, r0
 80054fa:	f991 1000 	ldrsb.w	r1, [r1]
 80054fe:	460e      	mov	r6, r1
 8005500:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005504:	fb01 f000 	mul.w	r0, r1, r0
 8005508:	6a39      	ldr	r1, [r7, #32]
 800550a:	4401      	add	r1, r0
 800550c:	4608      	mov	r0, r1
 800550e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005510:	4401      	add	r1, r0
 8005512:	f991 1000 	ldrsb.w	r1, [r1]
 8005516:	fb06 f101 	mul.w	r1, r6, r1
 800551a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800551c:	4401      	add	r1, r0
 800551e:	6279      	str	r1, [r7, #36]	; 0x24
      for (int l = 0; l < 1; l++) {
 8005520:	6a39      	ldr	r1, [r7, #32]
 8005522:	3101      	adds	r1, #1
 8005524:	6239      	str	r1, [r7, #32]
 8005526:	6a39      	ldr	r1, [r7, #32]
 8005528:	2900      	cmp	r1, #0
 800552a:	dddd      	ble.n	80054e8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xb0>
      cc[i*C_stride + j] += sum;
 800552c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800552e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005530:	fb01 f000 	mul.w	r0, r1, r0
 8005534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005536:	4401      	add	r1, r0
 8005538:	0089      	lsls	r1, r1, #2
 800553a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800553c:	4401      	add	r1, r0
 800553e:	680e      	ldr	r6, [r1, #0]
 8005540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005544:	fb01 f000 	mul.w	r0, r1, r0
 8005548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554a:	4401      	add	r1, r0
 800554c:	0089      	lsls	r1, r1, #2
 800554e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005550:	4401      	add	r1, r0
 8005552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005554:	4430      	add	r0, r6
 8005556:	6008      	str	r0, [r1, #0]
    for (int j = 0; j < 1; j++) {
 8005558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555a:	3101      	adds	r1, #1
 800555c:	62b9      	str	r1, [r7, #40]	; 0x28
 800555e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005560:	2900      	cmp	r1, #0
 8005562:	ddbc      	ble.n	80054de <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xa6>
  for (int i = 0; i < 1; i++) {
 8005564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005566:	3101      	adds	r1, #1
 8005568:	62f9      	str	r1, [r7, #44]	; 0x2c
 800556a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556c:	2900      	cmp	r1, #0
 800556e:	ddb3      	ble.n	80054d8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xa0>
  return 0;
 8005570:	2100      	movs	r1, #0
    retcode = gemm_1x1x1_update_loop_KETPAKCQ(aa, bb, cc, A_stride, B_stride, C_stride);
 8005572:	64b9      	str	r1, [r7, #72]	; 0x48
    goto out;
 8005574:	bf00      	nop
  return retcode;
 8005576:	bf00      	nop
  for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8005578:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800557c:	3101      	adds	r1, #1
 800557e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8005582:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005586:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800558a:	db81      	blt.n	8005490 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x58>
  }
  int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((dense[0] + ((int32_t*)fused_nn_dense_subtract_constant_2)[0]) - ((int32_t*)fused_nn_dense_constant_2)[0])) << ((int64_t)0)) : ((int64_t)((dense[0] + ((int32_t*)fused_nn_dense_subtract_constant_2)[0]) - ((int32_t*)fused_nn_dense_constant_2)[0]))) * (int64_t)1081317156) + ((int64_t)1 << ((int64_t)((10 + 31) - 1)))) >> ((int64_t)(10 + 31)))) - 128;
 800558c:	69f8      	ldr	r0, [r7, #28]
 800558e:	4943      	ldr	r1, [pc, #268]	; (800569c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x264>)
 8005590:	6809      	ldr	r1, [r1, #0]
 8005592:	4408      	add	r0, r1
 8005594:	4942      	ldr	r1, [pc, #264]	; (80056a0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x268>)
 8005596:	6809      	ldr	r1, [r1, #0]
 8005598:	1a41      	subs	r1, r0, r1
 800559a:	17c8      	asrs	r0, r1, #31
 800559c:	460c      	mov	r4, r1
 800559e:	4605      	mov	r5, r0
 80055a0:	4940      	ldr	r1, [pc, #256]	; (80056a4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x26c>)
 80055a2:	fb01 f005 	mul.w	r0, r1, r5
 80055a6:	2100      	movs	r1, #0
 80055a8:	fb04 f101 	mul.w	r1, r4, r1
 80055ac:	4401      	add	r1, r0
 80055ae:	483d      	ldr	r0, [pc, #244]	; (80056a4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x26c>)
 80055b0:	fba4 2300 	umull	r2, r3, r4, r0
 80055b4:	4419      	add	r1, r3
 80055b6:	460b      	mov	r3, r1
 80055b8:	f503 7980 	add.w	r9, r3, #256	; 0x100
 80055bc:	4690      	mov	r8, r2
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	ea4f 2269 	mov.w	r2, r9, asr #9
 80055ca:	ea4f 73e9 	mov.w	r3, r9, asr #31
 80055ce:	4613      	mov	r3, r2
 80055d0:	3b80      	subs	r3, #128	; 0x80
 80055d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int32_t v__1 = (v_) < (127) ? (v_) : (127);
 80055d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055da:	2b7f      	cmp	r3, #127	; 0x7f
 80055dc:	bfa8      	it	ge
 80055de:	237f      	movge	r3, #127	; 0x7f
 80055e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 128)) * 6.750199e-03f))))) * 2.560000e+02f)) + -1.280000e+02f;
 80055e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055e4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfb8      	it	lt
 80055ec:	4613      	movlt	r3, r2
 80055ee:	3380      	adds	r3, #128	; 0x80
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80056a8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x270>
 80055fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005600:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80056ac <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x274>
 8005604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005608:	eeb0 0a67 	vmov.f32	s0, s15
 800560c:	f001 fd72 	bl	80070f4 <expf>
 8005610:	eef0 7a40 	vmov.f32	s15, s0
 8005614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005624:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80056b0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x278>
 8005628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562c:	eeb0 0a67 	vmov.f32	s0, s15
 8005630:	f001 fd3c 	bl	80070ac <roundf>
 8005634:	eef0 7a40 	vmov.f32	s15, s0
 8005638:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80056b4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x27c>
 800563c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005640:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 8005644:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005648:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80056b8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x280>
 800564c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005654:	d501      	bpl.n	800565a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x222>
 8005656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005658:	e000      	b.n	800565c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x224>
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x284>)
 800565c:	677b      	str	r3, [r7, #116]	; 0x74
  T_cast[0] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 800565e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005662:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80056c0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x288>
 8005666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	dd08      	ble.n	8005682 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x24a>
 8005670:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005678:	edc7 7a01 	vstr	s15, [r7, #4]
 800567c:	793b      	ldrb	r3, [r7, #4]
 800567e:	b25a      	sxtb	r2, r3
 8005680:	e001      	b.n	8005686 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x24e>
 8005682:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	701a      	strb	r2, [r3, #0]
  return 0;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	378c      	adds	r7, #140	; 0x8c
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005696:	bf00      	nop
 8005698:	0804a130 	.word	0x0804a130
 800569c:	0804a120 	.word	0x0804a120
 80056a0:	0804a110 	.word	0x0804a110
 80056a4:	40739724 	.word	0x40739724
 80056a8:	3bdd30c6 	.word	0x3bdd30c6
 80056ac:	00000000 	.word	0x00000000
 80056b0:	43800000 	.word	0x43800000
 80056b4:	43000000 	.word	0x43000000
 80056b8:	42fe0000 	.word	0x42fe0000
 80056bc:	42fe0000 	.word	0x42fe0000
 80056c0:	c3000000 	.word	0xc3000000

080056c4 <tvmgen_default_fused_reshape>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_reshape(int8_t* p0, int8_t* T_reshape) {
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  for (int32_t ax1_inner = 0; ax1_inner < 5; ++ax1_inner) {
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e00b      	b.n	80056ec <tvmgen_default_fused_reshape+0x28>
    T_reshape[ax1_inner] = p0[ax1_inner];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	441a      	add	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	440b      	add	r3, r1
 80056e0:	f992 2000 	ldrsb.w	r2, [r2]
 80056e4:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1_inner = 0; ax1_inner < 5; ++ax1_inner) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	ddf0      	ble.n	80056d4 <tvmgen_default_fused_reshape+0x10>
  }
  return 0;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <tvmgen_default___tvm_main__>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default___tvm_main__(int8_t* serving_default_input_1_0_buffer_var, int8_t* StatefulPartitionedCall_0_buffer_var) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  void* sid_1 = TVMBackendAllocWorkspace(1, 0, (uint64_t)5, 0, 8);
 800570a:	2308      	movs	r3, #8
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	2300      	movs	r3, #0
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	f04f 0205 	mov.w	r2, #5
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	2100      	movs	r1, #0
 800571c:	2001      	movs	r0, #1
 800571e:	f000 f87b 	bl	8005818 <TVMBackendAllocWorkspace>
 8005722:	6178      	str	r0, [r7, #20]
  if (sid_1 == NULL) {
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <tvmgen_default___tvm_main__+0x30>
    return -1;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e06f      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  void* sid_2 = TVMBackendAllocWorkspace(1, 0, (uint64_t)512, 0, 8);
 8005730:	2308      	movs	r3, #8
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	2300      	movs	r3, #0
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	2100      	movs	r1, #0
 8005742:	2001      	movs	r0, #1
 8005744:	f000 f868 	bl	8005818 <TVMBackendAllocWorkspace>
 8005748:	6138      	str	r0, [r7, #16]
  if (sid_2 == NULL) {
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <tvmgen_default___tvm_main__+0x56>
    return -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295
 8005754:	e05c      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  void* sid_3 = TVMBackendAllocWorkspace(1, 0, (uint64_t)512, 0, 8);
 8005756:	2308      	movs	r3, #8
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	2100      	movs	r1, #0
 8005768:	2001      	movs	r0, #1
 800576a:	f000 f855 	bl	8005818 <TVMBackendAllocWorkspace>
 800576e:	60f8      	str	r0, [r7, #12]
  if (sid_3 == NULL) {
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <tvmgen_default___tvm_main__+0x7c>
    return -1;
 8005776:	f04f 33ff 	mov.w	r3, #4294967295
 800577a:	e049      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  if (tvmgen_default_fused_reshape(serving_default_input_1_0_buffer_var, sid_1) != 0 ) return -1;
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff ffa0 	bl	80056c4 <tvmgen_default_fused_reshape>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <tvmgen_default___tvm_main__+0x90>
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	e03f      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_(sid_1, sid_2) != 0 ) return -1;
 8005790:	6939      	ldr	r1, [r7, #16]
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f7ff fb0a 	bl	8004dac <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <tvmgen_default___tvm_main__+0xa4>
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	e035      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1(sid_2, sid_3) != 0 ) return -1;
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	6938      	ldr	r0, [r7, #16]
 80057a8:	f7ff fca4 	bl	80050f4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <tvmgen_default___tvm_main__+0xb8>
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295
 80057b6:	e02b      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2(sid_3, StatefulPartitionedCall_0_buffer_var) != 0 ) return -1;
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fe3c 	bl	8005438 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <tvmgen_default___tvm_main__+0xcc>
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	e021      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  if (TVMBackendFreeWorkspace(1, 0, sid_3) != 0) {
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	2100      	movs	r1, #0
 80057d0:	2001      	movs	r0, #1
 80057d2:	f000 f875 	bl	80058c0 <TVMBackendFreeWorkspace>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <tvmgen_default___tvm_main__+0xe2>
    return -1;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	e016      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  if (TVMBackendFreeWorkspace(1, 0, sid_2) != 0) {
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	2100      	movs	r1, #0
 80057e6:	2001      	movs	r0, #1
 80057e8:	f000 f86a 	bl	80058c0 <TVMBackendFreeWorkspace>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <tvmgen_default___tvm_main__+0xf8>
    return -1;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	e00b      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  if (TVMBackendFreeWorkspace(1, 0, sid_1) != 0) {
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	2100      	movs	r1, #0
 80057fc:	2001      	movs	r0, #1
 80057fe:	f000 f85f 	bl	80058c0 <TVMBackendFreeWorkspace>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <tvmgen_default___tvm_main__+0x10e>
    return -1;
 8005808:	f04f 33ff 	mov.w	r3, #4294967295
 800580c:	e000      	b.n	8005810 <tvmgen_default___tvm_main__+0x110>
  }
  return 0;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <TVMBackendAllocWorkspace>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

void* TVMBackendAllocWorkspace(int device_type, int device_id, uint64_t nbytes, int dtype_code_hint,
                               int dtype_bits_hint) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b092      	sub	sp, #72	; 0x48
 800581c:	af0a      	add	r7, sp, #40	; 0x28
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	e9c7 2300 	strd	r2, r3, [r7]
  tvm_crt_error_t err = kTvmErrorNoError;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
  void* ptr = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
  DLDevice dev = {device_type, device_id};
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	743b      	strb	r3, [r7, #16]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	617b      	str	r3, [r7, #20]
  assert(nbytes > 0);
 8005838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583c:	4313      	orrs	r3, r2
 800583e:	d105      	bne.n	800584c <TVMBackendAllocWorkspace+0x34>
 8005840:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <TVMBackendAllocWorkspace+0x8c>)
 8005842:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <TVMBackendAllocWorkspace+0x90>)
 8005844:	2128      	movs	r1, #40	; 0x28
 8005846:	4819      	ldr	r0, [pc, #100]	; (80058ac <TVMBackendAllocWorkspace+0x94>)
 8005848:	f000 fb8c 	bl	8005f64 <__assert_func>
  err = TVMPlatformMemoryAllocate(nbytes, dev, &ptr);
 800584c:	6838      	ldr	r0, [r7, #0]
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	f107 0210 	add.w	r2, r7, #16
 8005856:	ca06      	ldmia	r2, {r1, r2}
 8005858:	f7fb f90e 	bl	8000a78 <TVMPlatformMemoryAllocate>
 800585c:	61f8      	str	r0, [r7, #28]
  CHECK_EQ(err, kTvmErrorNoError,
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d019      	beq.n	8005898 <TVMBackendAllocWorkspace+0x80>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	9308      	str	r3, [sp, #32]
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	9306      	str	r3, [sp, #24]
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <TVMBackendAllocWorkspace+0x98>)
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <TVMBackendAllocWorkspace+0x9c>)
 8005886:	4a0c      	ldr	r2, [pc, #48]	; (80058b8 <TVMBackendAllocWorkspace+0xa0>)
 8005888:	212a      	movs	r1, #42	; 0x2a
 800588a:	480c      	ldr	r0, [pc, #48]	; (80058bc <TVMBackendAllocWorkspace+0xa4>)
 800588c:	f7fa fe92 	bl	80005b4 <TVMLogf>
 8005890:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005894:	f7fb f8e9 	bl	8000a6a <TVMPlatformAbort>
           "TVMBackendAllocWorkspace(%d, %d, %" PRIu64 ", %d, %d) -> %" PRId32, device_type,
           device_id, nbytes, dtype_code_hint, dtype_bits_hint, err);
  return ptr;
 8005898:	69bb      	ldr	r3, [r7, #24]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	080073a4 	.word	0x080073a4
 80058a8:	0804a330 	.word	0x0804a330
 80058ac:	080073b0 	.word	0x080073b0
 80058b0:	08007484 	.word	0x08007484
 80058b4:	080073ec 	.word	0x080073ec
 80058b8:	080073f0 	.word	0x080073f0
 80058bc:	080073f4 	.word	0x080073f4

080058c0 <TVMBackendFreeWorkspace>:

int TVMBackendFreeWorkspace(int device_type, int device_id, void* ptr) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  tvm_crt_error_t err = kTvmErrorNoError;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
  DLDevice dev = {device_type, device_id};
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	753b      	strb	r3, [r7, #20]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	61bb      	str	r3, [r7, #24]
  err = TVMPlatformMemoryFree(ptr, dev);
 80058da:	f107 0314 	add.w	r3, r7, #20
 80058de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb f8e2 	bl	8000aac <TVMPlatformMemoryFree>
 80058e8:	61f8      	str	r0, [r7, #28]
  return err;
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <PageCreate>:
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/platform.h>

// construct a new page
Page PageCreate(uint8_t* memory_pool, size_t page_size_bytes, tvm_index_t ptable_begin,
                tvm_index_t num_pages) {
 80058f4:	b4b0      	push	{r4, r5, r7}
 80058f6:	b08b      	sub	sp, #44	; 0x2c
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  Page page;
  page.ptable_begin = ptable_begin;
 8005900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005904:	e9c7 2304 	strd	r2, r3, [r7, #16]
  page.num_pages = num_pages;
 8005908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800590c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  page.data = memory_pool + ptable_begin * page_size_bytes;
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	4413      	add	r3, r2
 800591c:	623b      	str	r3, [r7, #32]
  return page;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	461d      	mov	r5, r3
 8005922:	f107 0410 	add.w	r4, r7, #16
 8005926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800592a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800592e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	372c      	adds	r7, #44	; 0x2c
 8005936:	46bd      	mov	sp, r7
 8005938:	bcb0      	pop	{r4, r5, r7}
 800593a:	4770      	bx	lr

0800593c <PageTable_Resize>:

void PageTable_Resize(struct PageTable* ptable, size_t new_size, Page* page) {
 800593c:	b5b0      	push	{r4, r5, r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af04      	add	r7, sp, #16
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  CHECK_LE(ptable->num_pages, new_size, "size value (%zu) is smaller than expected (%zu).",
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d210      	bcs.n	8005974 <PageTable_Resize+0x38>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	9302      	str	r3, [sp, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <PageTable_Resize+0x80>)
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <PageTable_Resize+0x84>)
 8005962:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <PageTable_Resize+0x88>)
 8005964:	2133      	movs	r1, #51	; 0x33
 8005966:	4818      	ldr	r0, [pc, #96]	; (80059c8 <PageTable_Resize+0x8c>)
 8005968:	f7fa fe24 	bl	80005b4 <TVMLogf>
 800596c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005970:	f7fb f87b 	bl	8000a6a <TVMPlatformAbort>
           new_size, ptable->num_pages);
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e013      	b.n	80059a4 <PageTable_Resize+0x68>
    ptable->page[idx] = *page;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6899      	ldr	r1, [r3, #8]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	18ca      	adds	r2, r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4614      	mov	r4, r2
 8005990:	461d      	mov	r5, r3
 8005992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800599a:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3301      	adds	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d3e7      	bcc.n	800597c <PageTable_Resize+0x40>
  }
  ptable->num_pages = new_size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	611a      	str	r2, [r3, #16]
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08007538 	.word	0x08007538
 80059c0:	08007498 	.word	0x08007498
 80059c4:	0800749c 	.word	0x0800749c
 80059c8:	080074b0 	.word	0x080074b0

080059cc <TLB_Set>:

void TLB_Set(TLB* tlb, uint8_t* data, Page* page) {
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  PageEntry* entry = tlb->find(tlb, data);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	4798      	blx	r3
 80059e2:	6178      	str	r0, [r7, #20]
  if (entry == 0) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d11d      	bne.n	8005a26 <TLB_Set+0x5a>
    tlb->entries[tlb->num_pages].addr = data;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	4413      	add	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	601a      	str	r2, [r3, #0]
    tlb->entries[tlb->num_pages].page = *page;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	015b      	lsls	r3, r3, #5
 8005a04:	4413      	add	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	f103 0408 	add.w	r4, r3, #8
 8005a0c:	4615      	mov	r5, r2
 8005a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a16:	e884 0003 	stmia.w	r4, {r0, r1}
    tlb->num_pages++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	609a      	str	r2, [r3, #8]
  } else {
    entry->addr = data;
    entry->page = *page;
  }
}
 8005a24:	e00d      	b.n	8005a42 <TLB_Set+0x76>
    entry->addr = data;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	601a      	str	r2, [r3, #0]
    entry->page = *page;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	f103 0408 	add.w	r4, r3, #8
 8005a34:	4615      	mov	r5, r2
 8005a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a3e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8005a42:	bf00      	nop
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}

08005a4a <TLB_Find>:

PageEntry* TLB_Find(TLB* tlb, uint8_t* data) {
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  PageEntry* entry = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	e012      	b.n	8005a84 <TLB_Find+0x3a>
    if (tlb->entries[idx].addr == data) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	4413      	add	r3, r2
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d106      	bne.n	8005a7e <TLB_Find+0x34>
      entry = tlb->entries + idx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015b      	lsls	r3, r3, #5
 8005a78:	4413      	add	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
      break;
 8005a7c:	e007      	b.n	8005a8e <TLB_Find+0x44>
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3e7      	bcc.n	8005a5e <TLB_Find+0x14>
    }
  }
  return entry;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <MultiMap_LowerBound>:

IndexedEntry* MultiMap_LowerBound(struct MultiMap* map, uint32_t npage) {
 8005a9c:	b4b0      	push	{r4, r5, r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  IndexedEntry* entry = 0;
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	60f9      	str	r1, [r7, #12]
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8005aaa:	2100      	movs	r1, #0
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	e017      	b.n	8005ae0 <MultiMap_LowerBound+0x44>
    if (map->entries[idx].index >= npage) {
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	6808      	ldr	r0, [r1, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	0149      	lsls	r1, r1, #5
 8005ab8:	4401      	add	r1, r0
 8005aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005abe:	683c      	ldr	r4, [r7, #0]
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	4290      	cmp	r0, r2
 8005ac8:	4199      	sbcs	r1, r3
 8005aca:	db06      	blt.n	8005ada <MultiMap_LowerBound+0x3e>
      entry = map->entries + idx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015b      	lsls	r3, r3, #5
 8005ad4:	4413      	add	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
      break;
 8005ad8:	e007      	b.n	8005aea <MultiMap_LowerBound+0x4e>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	3101      	adds	r1, #1
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	6889      	ldr	r1, [r1, #8]
 8005ae4:	68b8      	ldr	r0, [r7, #8]
 8005ae6:	4288      	cmp	r0, r1
 8005ae8:	d3e2      	bcc.n	8005ab0 <MultiMap_LowerBound+0x14>
    }
  }
  return entry;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bcb0      	pop	{r4, r5, r7}
 8005af4:	4770      	bx	lr

08005af6 <MultiMap_End>:

IndexedEntry* MultiMap_End(struct MultiMap* map) {
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  IndexedEntry* entry = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
  return entry;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <MultiMap_Erase>:

void MultiMap_Erase(struct MultiMap* map, IndexedEntry* entry) {
 8005b10:	b4b0      	push	{r4, r5, r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e031      	b.n	8005b84 <MultiMap_Erase+0x74>
    if ((map->entries + idx) == entry) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	015b      	lsls	r3, r3, #5
 8005b28:	4413      	add	r3, r2
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d126      	bne.n	8005b7e <MultiMap_Erase+0x6e>
      // NOTE: do not use memcpy due to overlap.
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	e017      	b.n	8005b68 <MultiMap_Erase+0x58>
        map->entries[src_idx - 1] = map->entries[src_idx];
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015b      	lsls	r3, r3, #5
 8005b40:	18d0      	adds	r0, r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8005b4c:	440b      	add	r3, r1
 8005b4e:	015b      	lsls	r3, r3, #5
 8005b50:	4413      	add	r3, r2
 8005b52:	461c      	mov	r4, r3
 8005b54:	4605      	mov	r5, r0
 8005b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3e2      	bcc.n	8005b38 <MultiMap_Erase+0x28>
      }
      map->num_entries--;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
      break;
 8005b7c:	e008      	b.n	8005b90 <MultiMap_Erase+0x80>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3c8      	bcc.n	8005b20 <MultiMap_Erase+0x10>
    }
  }
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bcb0      	pop	{r4, r5, r7}
 8005b98:	4770      	bx	lr
	...

08005b9c <MultiMap_Insert>:

void MultiMap_Insert(struct MultiMap* map, uint32_t npage, Page* p) {
 8005b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ba0:	b088      	sub	sp, #32
 8005ba2:	af02      	add	r7, sp, #8
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  CHECK_LE(map->num_entries + 1, map->max_entries, "invalid number of free pages.");
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d90b      	bls.n	8005bd0 <MultiMap_Insert+0x34>
 8005bb8:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <MultiMap_Insert+0x9c>)
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <MultiMap_Insert+0xa0>)
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <MultiMap_Insert+0xa4>)
 8005bc0:	2170      	movs	r1, #112	; 0x70
 8005bc2:	4820      	ldr	r0, [pc, #128]	; (8005c44 <MultiMap_Insert+0xa8>)
 8005bc4:	f7fa fcf6 	bl	80005b4 <TVMLogf>
 8005bc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005bcc:	f7fa ff4d 	bl	8000a6a <TVMPlatformAbort>
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e01e      	b.n	8005c16 <MultiMap_Insert+0x7a>
    map->entries[map->num_entries].index = npage;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	015b      	lsls	r3, r3, #5
 8005be2:	4413      	add	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	2100      	movs	r1, #0
 8005be8:	4690      	mov	r8, r2
 8005bea:	4689      	mov	r9, r1
 8005bec:	e9c3 8900 	strd	r8, r9, [r3]
    map->entries[map->num_entries].page = *p;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	015b      	lsls	r3, r3, #5
 8005bfa:	4413      	add	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	f103 0408 	add.w	r4, r3, #8
 8005c02:	4615      	mov	r5, r2
 8005c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c0c:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3301      	adds	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d3d9      	bcc.n	8005bd8 <MultiMap_Insert+0x3c>
  }
  map->num_entries++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c38:	080075d0 	.word	0x080075d0
 8005c3c:	08007498 	.word	0x08007498
 8005c40:	08007544 	.word	0x08007544
 8005c44:	0800755c 	.word	0x0800755c

08005c48 <PageMemoryManager_Allocate>:
 * \brief Allocate memory from manager
 * \param size The size of memory
 * \return The virtual address
 */
tvm_crt_error_t PageMemoryManager_Allocate(MemoryManagerInterface* interface, size_t num_bytes,
                                           DLDevice dev, void** out_ptr) {
 8005c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c4c:	b09e      	sub	sp, #120	; 0x78
 8005c4e:	af04      	add	r7, sp, #16
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	4639      	mov	r1, r7
 8005c56:	e881 000c 	stmia.w	r1, {r2, r3}
  MemoryManager* mgr = (MemoryManager*)interface;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	667b      	str	r3, [r7, #100]	; 0x64

  *out_ptr = 0;
 8005c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
  PageTable* ptable = &(mgr->ptable);
 8005c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c68:	330c      	adds	r3, #12
 8005c6a:	663b      	str	r3, [r7, #96]	; 0x60
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
 8005c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4413      	add	r3, r2
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4698      	mov	r8, r3
 8005c82:	4691      	mov	r9, r2
 8005c84:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58

  MultiMap* free_map = &(mgr->free_map);
 8005c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8a:	3338      	adds	r3, #56	; 0x38
 8005c8c:	657b      	str	r3, [r7, #84]	; 0x54
  IndexedEntry* it = free_map->lower_bound(free_map, npage);
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c94:	4611      	mov	r1, r2
 8005c96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005c98:	4798      	blx	r3
 8005c9a:	6538      	str	r0, [r7, #80]	; 0x50
  tvm_index_t start = 0;
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  if (it != free_map->end(free_map)) {
 8005ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005cae:	4798      	blx	r3
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d01c      	beq.n	8005cf2 <PageMemoryManager_Allocate+0xaa>
    Page p = it->page;
 8005cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005cbe:	f103 0508 	add.w	r5, r3, #8
 8005cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005cca:	e884 0003 	stmia.w	r4, {r0, r1}
    free_map->erase(free_map, it);
 8005cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005cd6:	4798      	blx	r3
    *out_ptr = p.data;
 8005cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cde:	601a      	str	r2, [r3, #0]
    start = p.ptable_begin;
 8005ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ce4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    npage = p.num_pages;
 8005ce8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8005cf0:	e03a      	b.n	8005d68 <PageMemoryManager_Allocate+0x120>
  } else {
    start = ptable->num_pages;
 8005cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	4615      	mov	r5, r2
 8005cfc:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    if ((unsigned)(start + npage) > ptable->max_pages) {
 8005d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d04:	441a      	add	r2, r3
 8005d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d902      	bls.n	8005d14 <PageMemoryManager_Allocate+0xcc>
#if TVM_CRT_DEBUG > 1
      TVMLogf("insufficient memory, start=%" PRId32 ", npage=%" PRId32 ", total=%" PRId32 " / %zu",
              (int32_t)start, (int32_t)npage, (int32_t)(start + npage), mgr->pmap.max_pages);
#endif
      return kTvmErrorPlatformNoMemory;
 8005d0e:	f240 5303 	movw	r3, #1283	; 0x503
 8005d12:	e02f      	b.n	8005d74 <PageMemoryManager_Allocate+0x12c>
    }
    /* insert page entry */
    Page p = PageCreate(ptable->memory_pool, ptable->page_size_bytes, start, npage);
 8005d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d16:	6819      	ldr	r1, [r3, #0]
 8005d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1a:	685c      	ldr	r4, [r3, #4]
 8005d1c:	f107 0010 	add.w	r0, r7, #16
 8005d20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d2c:	e9cd 2300 	strd	r2, r3, [sp]
 8005d30:	4622      	mov	r2, r4
 8005d32:	f7ff fddf 	bl	80058f4 <PageCreate>
    ptable->resize(ptable, start + npage, &p);
 8005d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d3e:	4411      	add	r1, r2
 8005d40:	f107 0210 	add.w	r2, r7, #16
 8005d44:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005d46:	4798      	blx	r3
    *out_ptr = p.data;
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d4e:	601a      	str	r2, [r3, #0]
    TLB* pmap = &(mgr->pmap);
 8005d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
    pmap->set(pmap, *out_ptr, &p);
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d5e:	6811      	ldr	r1, [r2, #0]
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005d66:	4798      	blx	r3
  }
  mgr->interface.vleak_size++;
 8005d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d70:	609a      	str	r2, [r3, #8]
#if TVM_CRT_DEBUG > 1
  TVMLogf("allocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d\n", data, start,
          ptable->max_pages, npage, mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3768      	adds	r7, #104	; 0x68
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08005d80 <PageMemoryManager_Free>:
 * \param interface Pointer to this structure.
 * \param ptr A pointer returned from TVMPlatformMemoryAllocate which should be free'd.
 * \param dev Execution device passed to TVMPlatformMemoryAllocate. Fixed to {kDLCPU, 0}.
 * \return kTvmErrorNoError if successful; a descriptive error code otherwise.
 */
tvm_crt_error_t PageMemoryManager_Free(MemoryManagerInterface* interface, void* ptr, DLDevice dev) {
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b08d      	sub	sp, #52	; 0x34
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	e881 000c 	stmia.w	r1, {r2, r3}
  MemoryManager* mgr = (MemoryManager*)interface;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24

  TLB* pmap = &(mgr->pmap);
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	3324      	adds	r3, #36	; 0x24
 8005d98:	623b      	str	r3, [r7, #32]
  CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10c      	bne.n	8005dbc <PageMemoryManager_Free+0x3c>
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <PageMemoryManager_Free+0x9c>)
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	4b1e      	ldr	r3, [pc, #120]	; (8005e20 <PageMemoryManager_Free+0xa0>)
 8005da8:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <PageMemoryManager_Free+0xa4>)
 8005daa:	f240 1109 	movw	r1, #265	; 0x109
 8005dae:	481e      	ldr	r0, [pc, #120]	; (8005e28 <PageMemoryManager_Free+0xa8>)
 8005db0:	f7fa fc00 	bl	80005b4 <TVMLogf>
 8005db4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005db8:	f7fa fe57 	bl	8000a6a <TVMPlatformAbort>
  PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	6a38      	ldr	r0, [r7, #32]
 8005dc4:	4798      	blx	r3
 8005dc6:	61f8      	str	r0, [r7, #28]
  CHECK_NE(entry, 0, "no valid page entry found.");
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <PageMemoryManager_Free+0x68>
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <PageMemoryManager_Free+0x9c>)
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <PageMemoryManager_Free+0xa0>)
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <PageMemoryManager_Free+0xac>)
 8005dd6:	f240 110b 	movw	r1, #267	; 0x10b
 8005dda:	4815      	ldr	r0, [pc, #84]	; (8005e30 <PageMemoryManager_Free+0xb0>)
 8005ddc:	f7fa fbea 	bl	80005b4 <TVMLogf>
 8005de0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005de4:	f7fa fe41 	bl	8000a6a <TVMPlatformAbort>
  Page* p = &(entry->page);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3308      	adds	r3, #8
 8005dec:	61bb      	str	r3, [r7, #24]
  MultiMap* free_map = &(mgr->free_map);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3338      	adds	r3, #56	; 0x38
 8005df2:	617b      	str	r3, [r7, #20]
  free_map->insert(free_map, p->num_pages, p);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	699c      	ldr	r4, [r3, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	47a0      	blx	r4
  mgr->interface.vleak_size--;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	609a      	str	r2, [r3, #8]
#if TVM_CRT_DEBUG > 1
  TVMLogf("release: addr=%p, start=%" PRId64 "/%zu, npage=%zu, vleak=%d", ptr,
          entry->page.ptable_begin, mgr->ptable.max_pages, entry->page.num_pages,
          mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	372c      	adds	r7, #44	; 0x2c
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}
 8005e1c:	08007678 	.word	0x08007678
 8005e20:	080075e4 	.word	0x080075e4
 8005e24:	080075e8 	.word	0x080075e8
 8005e28:	080075f8 	.word	0x080075f8
 8005e2c:	0800767c 	.word	0x0800767c
 8005e30:	08007684 	.word	0x08007684

08005e34 <PageMemoryManagerCreate>:

tvm_crt_error_t PageMemoryManagerCreate(MemoryManagerInterface** interface, uint8_t* memory_pool,
                                        size_t memory_pool_size_bytes,
                                        size_t page_size_bytes_log2) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  memset(memory_pool, 0, memory_pool_size_bytes);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	2100      	movs	r1, #0
 8005e46:	68b8      	ldr	r0, [r7, #8]
 8005e48:	f000 f96b 	bl	8006122 <memset>

  // Allocate enough space for MAX_PAGES.
  size_t page_size_bytes = 1 << page_size_bytes_log2;
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
  size_t metadata_bytes_per_page = sizeof(Page) + sizeof(PageEntry) + sizeof(IndexedEntry);
 8005e56:	2358      	movs	r3, #88	; 0x58
 8005e58:	623b      	str	r3, [r7, #32]
  size_t bytes_needed_per_page = page_size_bytes + metadata_bytes_per_page;
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	4413      	add	r3, r2
 8005e60:	61fb      	str	r3, [r7, #28]
  size_t num_pages = (memory_pool_size_bytes - sizeof(MemoryManager)) / bytes_needed_per_page;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1a3 0254 	sub.w	r2, r3, #84	; 0x54
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	61bb      	str	r3, [r7, #24]

  uint8_t* metadata_cursor = memory_pool + (num_pages << page_size_bytes_log2);
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
  MemoryManager* manager = (MemoryManager*)metadata_cursor;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	613b      	str	r3, [r7, #16]
  *interface = &manager->interface;
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]
  /* handle MemoryManager member functions */
  manager->interface.Allocate = PageMemoryManager_Allocate;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	; (8005f40 <PageMemoryManagerCreate+0x10c>)
 8005e8c:	601a      	str	r2, [r3, #0]
  //  manager->Realloc = MemoryManager_Reallocate;
  manager->interface.Free = PageMemoryManager_Free;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4a2c      	ldr	r2, [pc, #176]	; (8005f44 <PageMemoryManagerCreate+0x110>)
 8005e92:	605a      	str	r2, [r3, #4]

  metadata_cursor += sizeof(MemoryManager);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	3354      	adds	r3, #84	; 0x54
 8005e98:	617b      	str	r3, [r7, #20]

  manager->interface.Allocate = PageMemoryManager_Allocate;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <PageMemoryManagerCreate+0x10c>)
 8005e9e:	601a      	str	r2, [r3, #0]
  manager->interface.Free = PageMemoryManager_Free;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <PageMemoryManagerCreate+0x110>)
 8005ea4:	605a      	str	r2, [r3, #4]
  manager->ptable.memory_pool = memory_pool;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	60da      	str	r2, [r3, #12]

  /* handle PageTable member functions */
  manager->ptable.page = (Page*)metadata_cursor;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	615a      	str	r2, [r3, #20]
  metadata_cursor += sizeof(Page) * num_pages;
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  manager->ptable.page_size_bytes = (1 << page_size_bytes_log2);
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	611a      	str	r2, [r3, #16]
  manager->ptable.max_pages = num_pages;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	619a      	str	r2, [r3, #24]
  manager->ptable.resize = PageTable_Resize;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <PageMemoryManagerCreate+0x114>)
 8005edc:	621a      	str	r2, [r3, #32]

  /* handle TLB member functions */
  manager->pmap.entries = (PageEntry*)metadata_cursor;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24
  metadata_cursor += sizeof(PageEntry) * num_pages;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015b      	lsls	r3, r3, #5
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  manager->pmap.max_pages = num_pages;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28
  manager->pmap.num_pages = 0;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c

  manager->pmap.set = TLB_Set;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <PageMemoryManagerCreate+0x118>)
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
  manager->pmap.find = TLB_Find;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <PageMemoryManagerCreate+0x11c>)
 8005f04:	635a      	str	r2, [r3, #52]	; 0x34
  /* handle free_map member functions */
  manager->free_map.entries = (IndexedEntry*)metadata_cursor;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
  metadata_cursor += sizeof(IndexedEntry) * num_pages;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4413      	add	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]
  manager->free_map.max_entries = num_pages;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  manager->free_map.lower_bound = MultiMap_LowerBound;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <PageMemoryManagerCreate+0x120>)
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  manager->free_map.end = MultiMap_End;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <PageMemoryManagerCreate+0x124>)
 8005f26:	649a      	str	r2, [r3, #72]	; 0x48
  manager->free_map.erase = MultiMap_Erase;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <PageMemoryManagerCreate+0x128>)
 8005f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  manager->free_map.insert = MultiMap_Insert;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <PageMemoryManagerCreate+0x12c>)
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50

  return kTvmErrorNoError;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	08005c49 	.word	0x08005c49
 8005f44:	08005d81 	.word	0x08005d81
 8005f48:	0800593d 	.word	0x0800593d
 8005f4c:	080059cd 	.word	0x080059cd
 8005f50:	08005a4b 	.word	0x08005a4b
 8005f54:	08005a9d 	.word	0x08005a9d
 8005f58:	08005af7 	.word	0x08005af7
 8005f5c:	08005b11 	.word	0x08005b11
 8005f60:	08005b9d 	.word	0x08005b9d

08005f64 <__assert_func>:
 8005f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f66:	4614      	mov	r4, r2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <__assert_func+0x2c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4605      	mov	r5, r0
 8005f70:	68d8      	ldr	r0, [r3, #12]
 8005f72:	b14c      	cbz	r4, 8005f88 <__assert_func+0x24>
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <__assert_func+0x30>)
 8005f76:	9100      	str	r1, [sp, #0]
 8005f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f7c:	4906      	ldr	r1, [pc, #24]	; (8005f98 <__assert_func+0x34>)
 8005f7e:	462b      	mov	r3, r5
 8005f80:	f000 f828 	bl	8005fd4 <fiprintf>
 8005f84:	f000 fc82 	bl	800688c <abort>
 8005f88:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <__assert_func+0x38>)
 8005f8a:	461c      	mov	r4, r3
 8005f8c:	e7f3      	b.n	8005f76 <__assert_func+0x12>
 8005f8e:	bf00      	nop
 8005f90:	20000014 	.word	0x20000014
 8005f94:	0804a349 	.word	0x0804a349
 8005f98:	0804a356 	.word	0x0804a356
 8005f9c:	0804a384 	.word	0x0804a384

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	; (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000014 	.word	0x20000014

08005fac <exit>:
 8005fac:	b508      	push	{r3, lr}
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <exit+0x20>)
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	b113      	cbz	r3, 8005fba <exit+0xe>
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f3af 8000 	nop.w
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <exit+0x24>)
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fc0:	b103      	cbz	r3, 8005fc4 <exit+0x18>
 8005fc2:	4798      	blx	r3
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7fb f809 	bl	8000fdc <_exit>
 8005fca:	bf00      	nop
 8005fcc:	00000000 	.word	0x00000000
 8005fd0:	0804a388 	.word	0x0804a388

08005fd4 <fiprintf>:
 8005fd4:	b40e      	push	{r1, r2, r3}
 8005fd6:	b503      	push	{r0, r1, lr}
 8005fd8:	4601      	mov	r1, r0
 8005fda:	ab03      	add	r3, sp, #12
 8005fdc:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <fiprintf+0x20>)
 8005fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	f000 f8cd 	bl	8006184 <_vfiprintf_r>
 8005fea:	b002      	add	sp, #8
 8005fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff0:	b003      	add	sp, #12
 8005ff2:	4770      	bx	lr
 8005ff4:	20000014 	.word	0x20000014

08005ff8 <_fwrite_r>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	9c08      	ldr	r4, [sp, #32]
 8005ffe:	468a      	mov	sl, r1
 8006000:	4690      	mov	r8, r2
 8006002:	fb02 f903 	mul.w	r9, r2, r3
 8006006:	4605      	mov	r5, r0
 8006008:	b118      	cbz	r0, 8006012 <_fwrite_r+0x1a>
 800600a:	6983      	ldr	r3, [r0, #24]
 800600c:	b90b      	cbnz	r3, 8006012 <_fwrite_r+0x1a>
 800600e:	f000 fd5f 	bl	8006ad0 <__sinit>
 8006012:	4b26      	ldr	r3, [pc, #152]	; (80060ac <_fwrite_r+0xb4>)
 8006014:	429c      	cmp	r4, r3
 8006016:	d123      	bne.n	8006060 <_fwrite_r+0x68>
 8006018:	686c      	ldr	r4, [r5, #4]
 800601a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601c:	07de      	lsls	r6, r3, #31
 800601e:	d405      	bmi.n	800602c <_fwrite_r+0x34>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	0598      	lsls	r0, r3, #22
 8006024:	d402      	bmi.n	800602c <_fwrite_r+0x34>
 8006026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006028:	f000 f879 	bl	800611e <__retarget_lock_acquire_recursive>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	0719      	lsls	r1, r3, #28
 8006030:	d520      	bpl.n	8006074 <_fwrite_r+0x7c>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	b1f3      	cbz	r3, 8006074 <_fwrite_r+0x7c>
 8006036:	2600      	movs	r6, #0
 8006038:	454e      	cmp	r6, r9
 800603a:	d029      	beq.n	8006090 <_fwrite_r+0x98>
 800603c:	68a7      	ldr	r7, [r4, #8]
 800603e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8006042:	3f01      	subs	r7, #1
 8006044:	2f00      	cmp	r7, #0
 8006046:	60a7      	str	r7, [r4, #8]
 8006048:	da04      	bge.n	8006054 <_fwrite_r+0x5c>
 800604a:	69a3      	ldr	r3, [r4, #24]
 800604c:	429f      	cmp	r7, r3
 800604e:	db19      	blt.n	8006084 <_fwrite_r+0x8c>
 8006050:	290a      	cmp	r1, #10
 8006052:	d017      	beq.n	8006084 <_fwrite_r+0x8c>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	6022      	str	r2, [r4, #0]
 800605a:	7019      	strb	r1, [r3, #0]
 800605c:	3601      	adds	r6, #1
 800605e:	e7eb      	b.n	8006038 <_fwrite_r+0x40>
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <_fwrite_r+0xb8>)
 8006062:	429c      	cmp	r4, r3
 8006064:	d101      	bne.n	800606a <_fwrite_r+0x72>
 8006066:	68ac      	ldr	r4, [r5, #8]
 8006068:	e7d7      	b.n	800601a <_fwrite_r+0x22>
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <_fwrite_r+0xbc>)
 800606c:	429c      	cmp	r4, r3
 800606e:	bf08      	it	eq
 8006070:	68ec      	ldreq	r4, [r5, #12]
 8006072:	e7d2      	b.n	800601a <_fwrite_r+0x22>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fb9a 	bl	80067b0 <__swsetup_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d0da      	beq.n	8006036 <_fwrite_r+0x3e>
 8006080:	2600      	movs	r6, #0
 8006082:	e005      	b.n	8006090 <_fwrite_r+0x98>
 8006084:	4622      	mov	r2, r4
 8006086:	4628      	mov	r0, r5
 8006088:	f000 fb40 	bl	800670c <__swbuf_r>
 800608c:	3001      	adds	r0, #1
 800608e:	d1e5      	bne.n	800605c <_fwrite_r+0x64>
 8006090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006092:	07da      	lsls	r2, r3, #31
 8006094:	d405      	bmi.n	80060a2 <_fwrite_r+0xaa>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	059b      	lsls	r3, r3, #22
 800609a:	d402      	bmi.n	80060a2 <_fwrite_r+0xaa>
 800609c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609e:	f000 f83f 	bl	8006120 <__retarget_lock_release_recursive>
 80060a2:	fbb6 f0f8 	udiv	r0, r6, r8
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	bf00      	nop
 80060ac:	0804a3e0 	.word	0x0804a3e0
 80060b0:	0804a400 	.word	0x0804a400
 80060b4:	0804a3c0 	.word	0x0804a3c0

080060b8 <fwrite>:
 80060b8:	b507      	push	{r0, r1, r2, lr}
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	460a      	mov	r2, r1
 80060c0:	4601      	mov	r1, r0
 80060c2:	4803      	ldr	r0, [pc, #12]	; (80060d0 <fwrite+0x18>)
 80060c4:	6800      	ldr	r0, [r0, #0]
 80060c6:	f7ff ff97 	bl	8005ff8 <_fwrite_r>
 80060ca:	b003      	add	sp, #12
 80060cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80060d0:	20000014 	.word	0x20000014

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f001 f938 	bl	800735c <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	0804a440 	.word	0x0804a440
 8006110:	0804a440 	.word	0x0804a440
 8006114:	0804a440 	.word	0x0804a440
 8006118:	0804a444 	.word	0x0804a444

0800611c <__retarget_lock_init_recursive>:
 800611c:	4770      	bx	lr

0800611e <__retarget_lock_acquire_recursive>:
 800611e:	4770      	bx	lr

08006120 <__retarget_lock_release_recursive>:
 8006120:	4770      	bx	lr

08006122 <memset>:
 8006122:	4402      	add	r2, r0
 8006124:	4603      	mov	r3, r0
 8006126:	4293      	cmp	r3, r2
 8006128:	d100      	bne.n	800612c <memset+0xa>
 800612a:	4770      	bx	lr
 800612c:	f803 1b01 	strb.w	r1, [r3], #1
 8006130:	e7f9      	b.n	8006126 <memset+0x4>

08006132 <__sfputc_r>:
 8006132:	6893      	ldr	r3, [r2, #8]
 8006134:	3b01      	subs	r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	b410      	push	{r4}
 800613a:	6093      	str	r3, [r2, #8]
 800613c:	da08      	bge.n	8006150 <__sfputc_r+0x1e>
 800613e:	6994      	ldr	r4, [r2, #24]
 8006140:	42a3      	cmp	r3, r4
 8006142:	db01      	blt.n	8006148 <__sfputc_r+0x16>
 8006144:	290a      	cmp	r1, #10
 8006146:	d103      	bne.n	8006150 <__sfputc_r+0x1e>
 8006148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800614c:	f000 bade 	b.w	800670c <__swbuf_r>
 8006150:	6813      	ldr	r3, [r2, #0]
 8006152:	1c58      	adds	r0, r3, #1
 8006154:	6010      	str	r0, [r2, #0]
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	4608      	mov	r0, r1
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615e:	4770      	bx	lr

08006160 <__sfputs_r>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	4614      	mov	r4, r2
 8006168:	18d5      	adds	r5, r2, r3
 800616a:	42ac      	cmp	r4, r5
 800616c:	d101      	bne.n	8006172 <__sfputs_r+0x12>
 800616e:	2000      	movs	r0, #0
 8006170:	e007      	b.n	8006182 <__sfputs_r+0x22>
 8006172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006176:	463a      	mov	r2, r7
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ffda 	bl	8006132 <__sfputc_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d1f3      	bne.n	800616a <__sfputs_r+0xa>
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006184 <_vfiprintf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	460d      	mov	r5, r1
 800618a:	b09d      	sub	sp, #116	; 0x74
 800618c:	4614      	mov	r4, r2
 800618e:	4698      	mov	r8, r3
 8006190:	4606      	mov	r6, r0
 8006192:	b118      	cbz	r0, 800619c <_vfiprintf_r+0x18>
 8006194:	6983      	ldr	r3, [r0, #24]
 8006196:	b90b      	cbnz	r3, 800619c <_vfiprintf_r+0x18>
 8006198:	f000 fc9a 	bl	8006ad0 <__sinit>
 800619c:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <_vfiprintf_r+0x240>)
 800619e:	429d      	cmp	r5, r3
 80061a0:	d11b      	bne.n	80061da <_vfiprintf_r+0x56>
 80061a2:	6875      	ldr	r5, [r6, #4]
 80061a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a6:	07d9      	lsls	r1, r3, #31
 80061a8:	d405      	bmi.n	80061b6 <_vfiprintf_r+0x32>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	059a      	lsls	r2, r3, #22
 80061ae:	d402      	bmi.n	80061b6 <_vfiprintf_r+0x32>
 80061b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061b2:	f7ff ffb4 	bl	800611e <__retarget_lock_acquire_recursive>
 80061b6:	89ab      	ldrh	r3, [r5, #12]
 80061b8:	071b      	lsls	r3, r3, #28
 80061ba:	d501      	bpl.n	80061c0 <_vfiprintf_r+0x3c>
 80061bc:	692b      	ldr	r3, [r5, #16]
 80061be:	b9eb      	cbnz	r3, 80061fc <_vfiprintf_r+0x78>
 80061c0:	4629      	mov	r1, r5
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 faf4 	bl	80067b0 <__swsetup_r>
 80061c8:	b1c0      	cbz	r0, 80061fc <_vfiprintf_r+0x78>
 80061ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061cc:	07dc      	lsls	r4, r3, #31
 80061ce:	d50e      	bpl.n	80061ee <_vfiprintf_r+0x6a>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b01d      	add	sp, #116	; 0x74
 80061d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	4b7b      	ldr	r3, [pc, #492]	; (80063c8 <_vfiprintf_r+0x244>)
 80061dc:	429d      	cmp	r5, r3
 80061de:	d101      	bne.n	80061e4 <_vfiprintf_r+0x60>
 80061e0:	68b5      	ldr	r5, [r6, #8]
 80061e2:	e7df      	b.n	80061a4 <_vfiprintf_r+0x20>
 80061e4:	4b79      	ldr	r3, [pc, #484]	; (80063cc <_vfiprintf_r+0x248>)
 80061e6:	429d      	cmp	r5, r3
 80061e8:	bf08      	it	eq
 80061ea:	68f5      	ldreq	r5, [r6, #12]
 80061ec:	e7da      	b.n	80061a4 <_vfiprintf_r+0x20>
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	0598      	lsls	r0, r3, #22
 80061f2:	d4ed      	bmi.n	80061d0 <_vfiprintf_r+0x4c>
 80061f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061f6:	f7ff ff93 	bl	8006120 <__retarget_lock_release_recursive>
 80061fa:	e7e9      	b.n	80061d0 <_vfiprintf_r+0x4c>
 80061fc:	2300      	movs	r3, #0
 80061fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006200:	2320      	movs	r3, #32
 8006202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006206:	f8cd 800c 	str.w	r8, [sp, #12]
 800620a:	2330      	movs	r3, #48	; 0x30
 800620c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063d0 <_vfiprintf_r+0x24c>
 8006210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006214:	f04f 0901 	mov.w	r9, #1
 8006218:	4623      	mov	r3, r4
 800621a:	469a      	mov	sl, r3
 800621c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006220:	b10a      	cbz	r2, 8006226 <_vfiprintf_r+0xa2>
 8006222:	2a25      	cmp	r2, #37	; 0x25
 8006224:	d1f9      	bne.n	800621a <_vfiprintf_r+0x96>
 8006226:	ebba 0b04 	subs.w	fp, sl, r4
 800622a:	d00b      	beq.n	8006244 <_vfiprintf_r+0xc0>
 800622c:	465b      	mov	r3, fp
 800622e:	4622      	mov	r2, r4
 8006230:	4629      	mov	r1, r5
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff ff94 	bl	8006160 <__sfputs_r>
 8006238:	3001      	adds	r0, #1
 800623a:	f000 80aa 	beq.w	8006392 <_vfiprintf_r+0x20e>
 800623e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006240:	445a      	add	r2, fp
 8006242:	9209      	str	r2, [sp, #36]	; 0x24
 8006244:	f89a 3000 	ldrb.w	r3, [sl]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80a2 	beq.w	8006392 <_vfiprintf_r+0x20e>
 800624e:	2300      	movs	r3, #0
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006258:	f10a 0a01 	add.w	sl, sl, #1
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	9307      	str	r3, [sp, #28]
 8006260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006264:	931a      	str	r3, [sp, #104]	; 0x68
 8006266:	4654      	mov	r4, sl
 8006268:	2205      	movs	r2, #5
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	4858      	ldr	r0, [pc, #352]	; (80063d0 <_vfiprintf_r+0x24c>)
 8006270:	f7f9 ffce 	bl	8000210 <memchr>
 8006274:	9a04      	ldr	r2, [sp, #16]
 8006276:	b9d8      	cbnz	r0, 80062b0 <_vfiprintf_r+0x12c>
 8006278:	06d1      	lsls	r1, r2, #27
 800627a:	bf44      	itt	mi
 800627c:	2320      	movmi	r3, #32
 800627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006282:	0713      	lsls	r3, r2, #28
 8006284:	bf44      	itt	mi
 8006286:	232b      	movmi	r3, #43	; 0x2b
 8006288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800628c:	f89a 3000 	ldrb.w	r3, [sl]
 8006290:	2b2a      	cmp	r3, #42	; 0x2a
 8006292:	d015      	beq.n	80062c0 <_vfiprintf_r+0x13c>
 8006294:	9a07      	ldr	r2, [sp, #28]
 8006296:	4654      	mov	r4, sl
 8006298:	2000      	movs	r0, #0
 800629a:	f04f 0c0a 	mov.w	ip, #10
 800629e:	4621      	mov	r1, r4
 80062a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a4:	3b30      	subs	r3, #48	; 0x30
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d94e      	bls.n	8006348 <_vfiprintf_r+0x1c4>
 80062aa:	b1b0      	cbz	r0, 80062da <_vfiprintf_r+0x156>
 80062ac:	9207      	str	r2, [sp, #28]
 80062ae:	e014      	b.n	80062da <_vfiprintf_r+0x156>
 80062b0:	eba0 0308 	sub.w	r3, r0, r8
 80062b4:	fa09 f303 	lsl.w	r3, r9, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	9304      	str	r3, [sp, #16]
 80062bc:	46a2      	mov	sl, r4
 80062be:	e7d2      	b.n	8006266 <_vfiprintf_r+0xe2>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	1d19      	adds	r1, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	9103      	str	r1, [sp, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfbb      	ittet	lt
 80062cc:	425b      	neglt	r3, r3
 80062ce:	f042 0202 	orrlt.w	r2, r2, #2
 80062d2:	9307      	strge	r3, [sp, #28]
 80062d4:	9307      	strlt	r3, [sp, #28]
 80062d6:	bfb8      	it	lt
 80062d8:	9204      	strlt	r2, [sp, #16]
 80062da:	7823      	ldrb	r3, [r4, #0]
 80062dc:	2b2e      	cmp	r3, #46	; 0x2e
 80062de:	d10c      	bne.n	80062fa <_vfiprintf_r+0x176>
 80062e0:	7863      	ldrb	r3, [r4, #1]
 80062e2:	2b2a      	cmp	r3, #42	; 0x2a
 80062e4:	d135      	bne.n	8006352 <_vfiprintf_r+0x1ce>
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	1d1a      	adds	r2, r3, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	9203      	str	r2, [sp, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfb8      	it	lt
 80062f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80062f6:	3402      	adds	r4, #2
 80062f8:	9305      	str	r3, [sp, #20]
 80062fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063e0 <_vfiprintf_r+0x25c>
 80062fe:	7821      	ldrb	r1, [r4, #0]
 8006300:	2203      	movs	r2, #3
 8006302:	4650      	mov	r0, sl
 8006304:	f7f9 ff84 	bl	8000210 <memchr>
 8006308:	b140      	cbz	r0, 800631c <_vfiprintf_r+0x198>
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	eba0 000a 	sub.w	r0, r0, sl
 8006310:	fa03 f000 	lsl.w	r0, r3, r0
 8006314:	9b04      	ldr	r3, [sp, #16]
 8006316:	4303      	orrs	r3, r0
 8006318:	3401      	adds	r4, #1
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	482c      	ldr	r0, [pc, #176]	; (80063d4 <_vfiprintf_r+0x250>)
 8006322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006326:	2206      	movs	r2, #6
 8006328:	f7f9 ff72 	bl	8000210 <memchr>
 800632c:	2800      	cmp	r0, #0
 800632e:	d03f      	beq.n	80063b0 <_vfiprintf_r+0x22c>
 8006330:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <_vfiprintf_r+0x254>)
 8006332:	bb1b      	cbnz	r3, 800637c <_vfiprintf_r+0x1f8>
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	3307      	adds	r3, #7
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	3308      	adds	r3, #8
 800633e:	9303      	str	r3, [sp, #12]
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	443b      	add	r3, r7
 8006344:	9309      	str	r3, [sp, #36]	; 0x24
 8006346:	e767      	b.n	8006218 <_vfiprintf_r+0x94>
 8006348:	fb0c 3202 	mla	r2, ip, r2, r3
 800634c:	460c      	mov	r4, r1
 800634e:	2001      	movs	r0, #1
 8006350:	e7a5      	b.n	800629e <_vfiprintf_r+0x11a>
 8006352:	2300      	movs	r3, #0
 8006354:	3401      	adds	r4, #1
 8006356:	9305      	str	r3, [sp, #20]
 8006358:	4619      	mov	r1, r3
 800635a:	f04f 0c0a 	mov.w	ip, #10
 800635e:	4620      	mov	r0, r4
 8006360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006364:	3a30      	subs	r2, #48	; 0x30
 8006366:	2a09      	cmp	r2, #9
 8006368:	d903      	bls.n	8006372 <_vfiprintf_r+0x1ee>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c5      	beq.n	80062fa <_vfiprintf_r+0x176>
 800636e:	9105      	str	r1, [sp, #20]
 8006370:	e7c3      	b.n	80062fa <_vfiprintf_r+0x176>
 8006372:	fb0c 2101 	mla	r1, ip, r1, r2
 8006376:	4604      	mov	r4, r0
 8006378:	2301      	movs	r3, #1
 800637a:	e7f0      	b.n	800635e <_vfiprintf_r+0x1da>
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	462a      	mov	r2, r5
 8006382:	4b16      	ldr	r3, [pc, #88]	; (80063dc <_vfiprintf_r+0x258>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4630      	mov	r0, r6
 8006388:	f3af 8000 	nop.w
 800638c:	4607      	mov	r7, r0
 800638e:	1c78      	adds	r0, r7, #1
 8006390:	d1d6      	bne.n	8006340 <_vfiprintf_r+0x1bc>
 8006392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006394:	07d9      	lsls	r1, r3, #31
 8006396:	d405      	bmi.n	80063a4 <_vfiprintf_r+0x220>
 8006398:	89ab      	ldrh	r3, [r5, #12]
 800639a:	059a      	lsls	r2, r3, #22
 800639c:	d402      	bmi.n	80063a4 <_vfiprintf_r+0x220>
 800639e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063a0:	f7ff febe 	bl	8006120 <__retarget_lock_release_recursive>
 80063a4:	89ab      	ldrh	r3, [r5, #12]
 80063a6:	065b      	lsls	r3, r3, #25
 80063a8:	f53f af12 	bmi.w	80061d0 <_vfiprintf_r+0x4c>
 80063ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ae:	e711      	b.n	80061d4 <_vfiprintf_r+0x50>
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	462a      	mov	r2, r5
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <_vfiprintf_r+0x258>)
 80063b8:	a904      	add	r1, sp, #16
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f880 	bl	80064c0 <_printf_i>
 80063c0:	e7e4      	b.n	800638c <_vfiprintf_r+0x208>
 80063c2:	bf00      	nop
 80063c4:	0804a3e0 	.word	0x0804a3e0
 80063c8:	0804a400 	.word	0x0804a400
 80063cc:	0804a3c0 	.word	0x0804a3c0
 80063d0:	0804a38c 	.word	0x0804a38c
 80063d4:	0804a396 	.word	0x0804a396
 80063d8:	00000000 	.word	0x00000000
 80063dc:	08006161 	.word	0x08006161
 80063e0:	0804a392 	.word	0x0804a392

080063e4 <_printf_common>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	4616      	mov	r6, r2
 80063ea:	4699      	mov	r9, r3
 80063ec:	688a      	ldr	r2, [r1, #8]
 80063ee:	690b      	ldr	r3, [r1, #16]
 80063f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bfb8      	it	lt
 80063f8:	4613      	movlt	r3, r2
 80063fa:	6033      	str	r3, [r6, #0]
 80063fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006400:	4607      	mov	r7, r0
 8006402:	460c      	mov	r4, r1
 8006404:	b10a      	cbz	r2, 800640a <_printf_common+0x26>
 8006406:	3301      	adds	r3, #1
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	0699      	lsls	r1, r3, #26
 800640e:	bf42      	ittt	mi
 8006410:	6833      	ldrmi	r3, [r6, #0]
 8006412:	3302      	addmi	r3, #2
 8006414:	6033      	strmi	r3, [r6, #0]
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	f015 0506 	ands.w	r5, r5, #6
 800641c:	d106      	bne.n	800642c <_printf_common+0x48>
 800641e:	f104 0a19 	add.w	sl, r4, #25
 8006422:	68e3      	ldr	r3, [r4, #12]
 8006424:	6832      	ldr	r2, [r6, #0]
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	42ab      	cmp	r3, r5
 800642a:	dc26      	bgt.n	800647a <_printf_common+0x96>
 800642c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006430:	1e13      	subs	r3, r2, #0
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	bf18      	it	ne
 8006436:	2301      	movne	r3, #1
 8006438:	0692      	lsls	r2, r2, #26
 800643a:	d42b      	bmi.n	8006494 <_printf_common+0xb0>
 800643c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006440:	4649      	mov	r1, r9
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d01e      	beq.n	8006488 <_printf_common+0xa4>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	68e5      	ldr	r5, [r4, #12]
 800644e:	6832      	ldr	r2, [r6, #0]
 8006450:	f003 0306 	and.w	r3, r3, #6
 8006454:	2b04      	cmp	r3, #4
 8006456:	bf08      	it	eq
 8006458:	1aad      	subeq	r5, r5, r2
 800645a:	68a3      	ldr	r3, [r4, #8]
 800645c:	6922      	ldr	r2, [r4, #16]
 800645e:	bf0c      	ite	eq
 8006460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006464:	2500      	movne	r5, #0
 8006466:	4293      	cmp	r3, r2
 8006468:	bfc4      	itt	gt
 800646a:	1a9b      	subgt	r3, r3, r2
 800646c:	18ed      	addgt	r5, r5, r3
 800646e:	2600      	movs	r6, #0
 8006470:	341a      	adds	r4, #26
 8006472:	42b5      	cmp	r5, r6
 8006474:	d11a      	bne.n	80064ac <_printf_common+0xc8>
 8006476:	2000      	movs	r0, #0
 8006478:	e008      	b.n	800648c <_printf_common+0xa8>
 800647a:	2301      	movs	r3, #1
 800647c:	4652      	mov	r2, sl
 800647e:	4649      	mov	r1, r9
 8006480:	4638      	mov	r0, r7
 8006482:	47c0      	blx	r8
 8006484:	3001      	adds	r0, #1
 8006486:	d103      	bne.n	8006490 <_printf_common+0xac>
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006490:	3501      	adds	r5, #1
 8006492:	e7c6      	b.n	8006422 <_printf_common+0x3e>
 8006494:	18e1      	adds	r1, r4, r3
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	2030      	movs	r0, #48	; 0x30
 800649a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649e:	4422      	add	r2, r4
 80064a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a8:	3302      	adds	r3, #2
 80064aa:	e7c7      	b.n	800643c <_printf_common+0x58>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4622      	mov	r2, r4
 80064b0:	4649      	mov	r1, r9
 80064b2:	4638      	mov	r0, r7
 80064b4:	47c0      	blx	r8
 80064b6:	3001      	adds	r0, #1
 80064b8:	d0e6      	beq.n	8006488 <_printf_common+0xa4>
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7d9      	b.n	8006472 <_printf_common+0x8e>
	...

080064c0 <_printf_i>:
 80064c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	7e0f      	ldrb	r7, [r1, #24]
 80064c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064c8:	2f78      	cmp	r7, #120	; 0x78
 80064ca:	4691      	mov	r9, r2
 80064cc:	4680      	mov	r8, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	469a      	mov	sl, r3
 80064d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064d6:	d807      	bhi.n	80064e8 <_printf_i+0x28>
 80064d8:	2f62      	cmp	r7, #98	; 0x62
 80064da:	d80a      	bhi.n	80064f2 <_printf_i+0x32>
 80064dc:	2f00      	cmp	r7, #0
 80064de:	f000 80d8 	beq.w	8006692 <_printf_i+0x1d2>
 80064e2:	2f58      	cmp	r7, #88	; 0x58
 80064e4:	f000 80a3 	beq.w	800662e <_printf_i+0x16e>
 80064e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f0:	e03a      	b.n	8006568 <_printf_i+0xa8>
 80064f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064f6:	2b15      	cmp	r3, #21
 80064f8:	d8f6      	bhi.n	80064e8 <_printf_i+0x28>
 80064fa:	a101      	add	r1, pc, #4	; (adr r1, 8006500 <_printf_i+0x40>)
 80064fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006500:	08006559 	.word	0x08006559
 8006504:	0800656d 	.word	0x0800656d
 8006508:	080064e9 	.word	0x080064e9
 800650c:	080064e9 	.word	0x080064e9
 8006510:	080064e9 	.word	0x080064e9
 8006514:	080064e9 	.word	0x080064e9
 8006518:	0800656d 	.word	0x0800656d
 800651c:	080064e9 	.word	0x080064e9
 8006520:	080064e9 	.word	0x080064e9
 8006524:	080064e9 	.word	0x080064e9
 8006528:	080064e9 	.word	0x080064e9
 800652c:	08006679 	.word	0x08006679
 8006530:	0800659d 	.word	0x0800659d
 8006534:	0800665b 	.word	0x0800665b
 8006538:	080064e9 	.word	0x080064e9
 800653c:	080064e9 	.word	0x080064e9
 8006540:	0800669b 	.word	0x0800669b
 8006544:	080064e9 	.word	0x080064e9
 8006548:	0800659d 	.word	0x0800659d
 800654c:	080064e9 	.word	0x080064e9
 8006550:	080064e9 	.word	0x080064e9
 8006554:	08006663 	.word	0x08006663
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006568:	2301      	movs	r3, #1
 800656a:	e0a3      	b.n	80066b4 <_printf_i+0x1f4>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	6829      	ldr	r1, [r5, #0]
 8006570:	0606      	lsls	r6, r0, #24
 8006572:	f101 0304 	add.w	r3, r1, #4
 8006576:	d50a      	bpl.n	800658e <_printf_i+0xce>
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	2e00      	cmp	r6, #0
 800657e:	da03      	bge.n	8006588 <_printf_i+0xc8>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	4276      	negs	r6, r6
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006588:	485e      	ldr	r0, [pc, #376]	; (8006704 <_printf_i+0x244>)
 800658a:	230a      	movs	r3, #10
 800658c:	e019      	b.n	80065c2 <_printf_i+0x102>
 800658e:	680e      	ldr	r6, [r1, #0]
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006596:	bf18      	it	ne
 8006598:	b236      	sxthne	r6, r6
 800659a:	e7ef      	b.n	800657c <_printf_i+0xbc>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	6029      	str	r1, [r5, #0]
 80065a4:	0601      	lsls	r1, r0, #24
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0xec>
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0xf2>
 80065ac:	0646      	lsls	r6, r0, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0xe8>
 80065b0:	881e      	ldrh	r6, [r3, #0]
 80065b2:	4854      	ldr	r0, [pc, #336]	; (8006704 <_printf_i+0x244>)
 80065b4:	2f6f      	cmp	r7, #111	; 0x6f
 80065b6:	bf0c      	ite	eq
 80065b8:	2308      	moveq	r3, #8
 80065ba:	230a      	movne	r3, #10
 80065bc:	2100      	movs	r1, #0
 80065be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c2:	6865      	ldr	r5, [r4, #4]
 80065c4:	60a5      	str	r5, [r4, #8]
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	bfa2      	ittt	ge
 80065ca:	6821      	ldrge	r1, [r4, #0]
 80065cc:	f021 0104 	bicge.w	r1, r1, #4
 80065d0:	6021      	strge	r1, [r4, #0]
 80065d2:	b90e      	cbnz	r6, 80065d8 <_printf_i+0x118>
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	d04d      	beq.n	8006674 <_printf_i+0x1b4>
 80065d8:	4615      	mov	r5, r2
 80065da:	fbb6 f1f3 	udiv	r1, r6, r3
 80065de:	fb03 6711 	mls	r7, r3, r1, r6
 80065e2:	5dc7      	ldrb	r7, [r0, r7]
 80065e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e8:	4637      	mov	r7, r6
 80065ea:	42bb      	cmp	r3, r7
 80065ec:	460e      	mov	r6, r1
 80065ee:	d9f4      	bls.n	80065da <_printf_i+0x11a>
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10b      	bne.n	800660c <_printf_i+0x14c>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07de      	lsls	r6, r3, #31
 80065f8:	d508      	bpl.n	800660c <_printf_i+0x14c>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	6861      	ldr	r1, [r4, #4]
 80065fe:	4299      	cmp	r1, r3
 8006600:	bfde      	ittt	le
 8006602:	2330      	movle	r3, #48	; 0x30
 8006604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006608:	f105 35ff 	addle.w	r5, r5, #4294967295
 800660c:	1b52      	subs	r2, r2, r5
 800660e:	6122      	str	r2, [r4, #16]
 8006610:	f8cd a000 	str.w	sl, [sp]
 8006614:	464b      	mov	r3, r9
 8006616:	aa03      	add	r2, sp, #12
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fee2 	bl	80063e4 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	d14c      	bne.n	80066be <_printf_i+0x1fe>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	b004      	add	sp, #16
 800662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662e:	4835      	ldr	r0, [pc, #212]	; (8006704 <_printf_i+0x244>)
 8006630:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006634:	6829      	ldr	r1, [r5, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	f851 6b04 	ldr.w	r6, [r1], #4
 800663c:	6029      	str	r1, [r5, #0]
 800663e:	061d      	lsls	r5, r3, #24
 8006640:	d514      	bpl.n	800666c <_printf_i+0x1ac>
 8006642:	07df      	lsls	r7, r3, #31
 8006644:	bf44      	itt	mi
 8006646:	f043 0320 	orrmi.w	r3, r3, #32
 800664a:	6023      	strmi	r3, [r4, #0]
 800664c:	b91e      	cbnz	r6, 8006656 <_printf_i+0x196>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	f023 0320 	bic.w	r3, r3, #32
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	2310      	movs	r3, #16
 8006658:	e7b0      	b.n	80065bc <_printf_i+0xfc>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f043 0320 	orr.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2378      	movs	r3, #120	; 0x78
 8006664:	4828      	ldr	r0, [pc, #160]	; (8006708 <_printf_i+0x248>)
 8006666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666a:	e7e3      	b.n	8006634 <_printf_i+0x174>
 800666c:	0659      	lsls	r1, r3, #25
 800666e:	bf48      	it	mi
 8006670:	b2b6      	uxthmi	r6, r6
 8006672:	e7e6      	b.n	8006642 <_printf_i+0x182>
 8006674:	4615      	mov	r5, r2
 8006676:	e7bb      	b.n	80065f0 <_printf_i+0x130>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	6826      	ldr	r6, [r4, #0]
 800667c:	6961      	ldr	r1, [r4, #20]
 800667e:	1d18      	adds	r0, r3, #4
 8006680:	6028      	str	r0, [r5, #0]
 8006682:	0635      	lsls	r5, r6, #24
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	d501      	bpl.n	800668c <_printf_i+0x1cc>
 8006688:	6019      	str	r1, [r3, #0]
 800668a:	e002      	b.n	8006692 <_printf_i+0x1d2>
 800668c:	0670      	lsls	r0, r6, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0x1c8>
 8006690:	8019      	strh	r1, [r3, #0]
 8006692:	2300      	movs	r3, #0
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	4615      	mov	r5, r2
 8006698:	e7ba      	b.n	8006610 <_printf_i+0x150>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	1d1a      	adds	r2, r3, #4
 800669e:	602a      	str	r2, [r5, #0]
 80066a0:	681d      	ldr	r5, [r3, #0]
 80066a2:	6862      	ldr	r2, [r4, #4]
 80066a4:	2100      	movs	r1, #0
 80066a6:	4628      	mov	r0, r5
 80066a8:	f7f9 fdb2 	bl	8000210 <memchr>
 80066ac:	b108      	cbz	r0, 80066b2 <_printf_i+0x1f2>
 80066ae:	1b40      	subs	r0, r0, r5
 80066b0:	6060      	str	r0, [r4, #4]
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	2300      	movs	r3, #0
 80066b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066bc:	e7a8      	b.n	8006610 <_printf_i+0x150>
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	462a      	mov	r2, r5
 80066c2:	4649      	mov	r1, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	47d0      	blx	sl
 80066c8:	3001      	adds	r0, #1
 80066ca:	d0ab      	beq.n	8006624 <_printf_i+0x164>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	079b      	lsls	r3, r3, #30
 80066d0:	d413      	bmi.n	80066fa <_printf_i+0x23a>
 80066d2:	68e0      	ldr	r0, [r4, #12]
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	4298      	cmp	r0, r3
 80066d8:	bfb8      	it	lt
 80066da:	4618      	movlt	r0, r3
 80066dc:	e7a4      	b.n	8006628 <_printf_i+0x168>
 80066de:	2301      	movs	r3, #1
 80066e0:	4632      	mov	r2, r6
 80066e2:	4649      	mov	r1, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	47d0      	blx	sl
 80066e8:	3001      	adds	r0, #1
 80066ea:	d09b      	beq.n	8006624 <_printf_i+0x164>
 80066ec:	3501      	adds	r5, #1
 80066ee:	68e3      	ldr	r3, [r4, #12]
 80066f0:	9903      	ldr	r1, [sp, #12]
 80066f2:	1a5b      	subs	r3, r3, r1
 80066f4:	42ab      	cmp	r3, r5
 80066f6:	dcf2      	bgt.n	80066de <_printf_i+0x21e>
 80066f8:	e7eb      	b.n	80066d2 <_printf_i+0x212>
 80066fa:	2500      	movs	r5, #0
 80066fc:	f104 0619 	add.w	r6, r4, #25
 8006700:	e7f5      	b.n	80066ee <_printf_i+0x22e>
 8006702:	bf00      	nop
 8006704:	0804a39d 	.word	0x0804a39d
 8006708:	0804a3ae 	.word	0x0804a3ae

0800670c <__swbuf_r>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	4614      	mov	r4, r2
 8006712:	4605      	mov	r5, r0
 8006714:	b118      	cbz	r0, 800671e <__swbuf_r+0x12>
 8006716:	6983      	ldr	r3, [r0, #24]
 8006718:	b90b      	cbnz	r3, 800671e <__swbuf_r+0x12>
 800671a:	f000 f9d9 	bl	8006ad0 <__sinit>
 800671e:	4b21      	ldr	r3, [pc, #132]	; (80067a4 <__swbuf_r+0x98>)
 8006720:	429c      	cmp	r4, r3
 8006722:	d12b      	bne.n	800677c <__swbuf_r+0x70>
 8006724:	686c      	ldr	r4, [r5, #4]
 8006726:	69a3      	ldr	r3, [r4, #24]
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	071a      	lsls	r2, r3, #28
 800672e:	d52f      	bpl.n	8006790 <__swbuf_r+0x84>
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	b36b      	cbz	r3, 8006790 <__swbuf_r+0x84>
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	1ac0      	subs	r0, r0, r3
 800673a:	6963      	ldr	r3, [r4, #20]
 800673c:	b2f6      	uxtb	r6, r6
 800673e:	4283      	cmp	r3, r0
 8006740:	4637      	mov	r7, r6
 8006742:	dc04      	bgt.n	800674e <__swbuf_r+0x42>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f92e 	bl	80069a8 <_fflush_r>
 800674c:	bb30      	cbnz	r0, 800679c <__swbuf_r+0x90>
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	60a3      	str	r3, [r4, #8]
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	701e      	strb	r6, [r3, #0]
 800675c:	6963      	ldr	r3, [r4, #20]
 800675e:	3001      	adds	r0, #1
 8006760:	4283      	cmp	r3, r0
 8006762:	d004      	beq.n	800676e <__swbuf_r+0x62>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	07db      	lsls	r3, r3, #31
 8006768:	d506      	bpl.n	8006778 <__swbuf_r+0x6c>
 800676a:	2e0a      	cmp	r6, #10
 800676c:	d104      	bne.n	8006778 <__swbuf_r+0x6c>
 800676e:	4621      	mov	r1, r4
 8006770:	4628      	mov	r0, r5
 8006772:	f000 f919 	bl	80069a8 <_fflush_r>
 8006776:	b988      	cbnz	r0, 800679c <__swbuf_r+0x90>
 8006778:	4638      	mov	r0, r7
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <__swbuf_r+0x9c>)
 800677e:	429c      	cmp	r4, r3
 8006780:	d101      	bne.n	8006786 <__swbuf_r+0x7a>
 8006782:	68ac      	ldr	r4, [r5, #8]
 8006784:	e7cf      	b.n	8006726 <__swbuf_r+0x1a>
 8006786:	4b09      	ldr	r3, [pc, #36]	; (80067ac <__swbuf_r+0xa0>)
 8006788:	429c      	cmp	r4, r3
 800678a:	bf08      	it	eq
 800678c:	68ec      	ldreq	r4, [r5, #12]
 800678e:	e7ca      	b.n	8006726 <__swbuf_r+0x1a>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f80c 	bl	80067b0 <__swsetup_r>
 8006798:	2800      	cmp	r0, #0
 800679a:	d0cb      	beq.n	8006734 <__swbuf_r+0x28>
 800679c:	f04f 37ff 	mov.w	r7, #4294967295
 80067a0:	e7ea      	b.n	8006778 <__swbuf_r+0x6c>
 80067a2:	bf00      	nop
 80067a4:	0804a3e0 	.word	0x0804a3e0
 80067a8:	0804a400 	.word	0x0804a400
 80067ac:	0804a3c0 	.word	0x0804a3c0

080067b0 <__swsetup_r>:
 80067b0:	4b32      	ldr	r3, [pc, #200]	; (800687c <__swsetup_r+0xcc>)
 80067b2:	b570      	push	{r4, r5, r6, lr}
 80067b4:	681d      	ldr	r5, [r3, #0]
 80067b6:	4606      	mov	r6, r0
 80067b8:	460c      	mov	r4, r1
 80067ba:	b125      	cbz	r5, 80067c6 <__swsetup_r+0x16>
 80067bc:	69ab      	ldr	r3, [r5, #24]
 80067be:	b913      	cbnz	r3, 80067c6 <__swsetup_r+0x16>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f985 	bl	8006ad0 <__sinit>
 80067c6:	4b2e      	ldr	r3, [pc, #184]	; (8006880 <__swsetup_r+0xd0>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d10f      	bne.n	80067ec <__swsetup_r+0x3c>
 80067cc:	686c      	ldr	r4, [r5, #4]
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d4:	0719      	lsls	r1, r3, #28
 80067d6:	d42c      	bmi.n	8006832 <__swsetup_r+0x82>
 80067d8:	06dd      	lsls	r5, r3, #27
 80067da:	d411      	bmi.n	8006800 <__swsetup_r+0x50>
 80067dc:	2309      	movs	r3, #9
 80067de:	6033      	str	r3, [r6, #0]
 80067e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ea:	e03e      	b.n	800686a <__swsetup_r+0xba>
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <__swsetup_r+0xd4>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d101      	bne.n	80067f6 <__swsetup_r+0x46>
 80067f2:	68ac      	ldr	r4, [r5, #8]
 80067f4:	e7eb      	b.n	80067ce <__swsetup_r+0x1e>
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <__swsetup_r+0xd8>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	bf08      	it	eq
 80067fc:	68ec      	ldreq	r4, [r5, #12]
 80067fe:	e7e6      	b.n	80067ce <__swsetup_r+0x1e>
 8006800:	0758      	lsls	r0, r3, #29
 8006802:	d512      	bpl.n	800682a <__swsetup_r+0x7a>
 8006804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006806:	b141      	cbz	r1, 800681a <__swsetup_r+0x6a>
 8006808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800680c:	4299      	cmp	r1, r3
 800680e:	d002      	beq.n	8006816 <__swsetup_r+0x66>
 8006810:	4630      	mov	r0, r6
 8006812:	f000 fa5f 	bl	8006cd4 <_free_r>
 8006816:	2300      	movs	r3, #0
 8006818:	6363      	str	r3, [r4, #52]	; 0x34
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	2300      	movs	r3, #0
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f043 0308 	orr.w	r3, r3, #8
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	b94b      	cbnz	r3, 800684a <__swsetup_r+0x9a>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006840:	d003      	beq.n	800684a <__swsetup_r+0x9a>
 8006842:	4621      	mov	r1, r4
 8006844:	4630      	mov	r0, r6
 8006846:	f000 fa05 	bl	8006c54 <__smakebuf_r>
 800684a:	89a0      	ldrh	r0, [r4, #12]
 800684c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006850:	f010 0301 	ands.w	r3, r0, #1
 8006854:	d00a      	beq.n	800686c <__swsetup_r+0xbc>
 8006856:	2300      	movs	r3, #0
 8006858:	60a3      	str	r3, [r4, #8]
 800685a:	6963      	ldr	r3, [r4, #20]
 800685c:	425b      	negs	r3, r3
 800685e:	61a3      	str	r3, [r4, #24]
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	b943      	cbnz	r3, 8006876 <__swsetup_r+0xc6>
 8006864:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006868:	d1ba      	bne.n	80067e0 <__swsetup_r+0x30>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	0781      	lsls	r1, r0, #30
 800686e:	bf58      	it	pl
 8006870:	6963      	ldrpl	r3, [r4, #20]
 8006872:	60a3      	str	r3, [r4, #8]
 8006874:	e7f4      	b.n	8006860 <__swsetup_r+0xb0>
 8006876:	2000      	movs	r0, #0
 8006878:	e7f7      	b.n	800686a <__swsetup_r+0xba>
 800687a:	bf00      	nop
 800687c:	20000014 	.word	0x20000014
 8006880:	0804a3e0 	.word	0x0804a3e0
 8006884:	0804a400 	.word	0x0804a400
 8006888:	0804a3c0 	.word	0x0804a3c0

0800688c <abort>:
 800688c:	b508      	push	{r3, lr}
 800688e:	2006      	movs	r0, #6
 8006890:	f000 fb38 	bl	8006f04 <raise>
 8006894:	2001      	movs	r0, #1
 8006896:	f7fa fba1 	bl	8000fdc <_exit>
	...

0800689c <__sflush_r>:
 800689c:	898a      	ldrh	r2, [r1, #12]
 800689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	4605      	mov	r5, r0
 80068a4:	0710      	lsls	r0, r2, #28
 80068a6:	460c      	mov	r4, r1
 80068a8:	d458      	bmi.n	800695c <__sflush_r+0xc0>
 80068aa:	684b      	ldr	r3, [r1, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dc05      	bgt.n	80068bc <__sflush_r+0x20>
 80068b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dc02      	bgt.n	80068bc <__sflush_r+0x20>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d0f9      	beq.n	80068b6 <__sflush_r+0x1a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068c8:	682f      	ldr	r7, [r5, #0]
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	d032      	beq.n	8006934 <__sflush_r+0x98>
 80068ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	075a      	lsls	r2, r3, #29
 80068d4:	d505      	bpl.n	80068e2 <__sflush_r+0x46>
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068dc:	b10b      	cbz	r3, 80068e2 <__sflush_r+0x46>
 80068de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068e0:	1ac0      	subs	r0, r0, r3
 80068e2:	2300      	movs	r3, #0
 80068e4:	4602      	mov	r2, r0
 80068e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b0      	blx	r6
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	d106      	bne.n	8006902 <__sflush_r+0x66>
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	291d      	cmp	r1, #29
 80068f8:	d82c      	bhi.n	8006954 <__sflush_r+0xb8>
 80068fa:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <__sflush_r+0x108>)
 80068fc:	40ca      	lsrs	r2, r1
 80068fe:	07d6      	lsls	r6, r2, #31
 8006900:	d528      	bpl.n	8006954 <__sflush_r+0xb8>
 8006902:	2200      	movs	r2, #0
 8006904:	6062      	str	r2, [r4, #4]
 8006906:	04d9      	lsls	r1, r3, #19
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	d504      	bpl.n	8006918 <__sflush_r+0x7c>
 800690e:	1c42      	adds	r2, r0, #1
 8006910:	d101      	bne.n	8006916 <__sflush_r+0x7a>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b903      	cbnz	r3, 8006918 <__sflush_r+0x7c>
 8006916:	6560      	str	r0, [r4, #84]	; 0x54
 8006918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800691a:	602f      	str	r7, [r5, #0]
 800691c:	2900      	cmp	r1, #0
 800691e:	d0ca      	beq.n	80068b6 <__sflush_r+0x1a>
 8006920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <__sflush_r+0x92>
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f9d3 	bl	8006cd4 <_free_r>
 800692e:	2000      	movs	r0, #0
 8006930:	6360      	str	r0, [r4, #52]	; 0x34
 8006932:	e7c1      	b.n	80068b8 <__sflush_r+0x1c>
 8006934:	6a21      	ldr	r1, [r4, #32]
 8006936:	2301      	movs	r3, #1
 8006938:	4628      	mov	r0, r5
 800693a:	47b0      	blx	r6
 800693c:	1c41      	adds	r1, r0, #1
 800693e:	d1c7      	bne.n	80068d0 <__sflush_r+0x34>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0c4      	beq.n	80068d0 <__sflush_r+0x34>
 8006946:	2b1d      	cmp	r3, #29
 8006948:	d001      	beq.n	800694e <__sflush_r+0xb2>
 800694a:	2b16      	cmp	r3, #22
 800694c:	d101      	bne.n	8006952 <__sflush_r+0xb6>
 800694e:	602f      	str	r7, [r5, #0]
 8006950:	e7b1      	b.n	80068b6 <__sflush_r+0x1a>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	e7ad      	b.n	80068b8 <__sflush_r+0x1c>
 800695c:	690f      	ldr	r7, [r1, #16]
 800695e:	2f00      	cmp	r7, #0
 8006960:	d0a9      	beq.n	80068b6 <__sflush_r+0x1a>
 8006962:	0793      	lsls	r3, r2, #30
 8006964:	680e      	ldr	r6, [r1, #0]
 8006966:	bf08      	it	eq
 8006968:	694b      	ldreq	r3, [r1, #20]
 800696a:	600f      	str	r7, [r1, #0]
 800696c:	bf18      	it	ne
 800696e:	2300      	movne	r3, #0
 8006970:	eba6 0807 	sub.w	r8, r6, r7
 8006974:	608b      	str	r3, [r1, #8]
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	dd9c      	ble.n	80068b6 <__sflush_r+0x1a>
 800697c:	6a21      	ldr	r1, [r4, #32]
 800697e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006980:	4643      	mov	r3, r8
 8006982:	463a      	mov	r2, r7
 8006984:	4628      	mov	r0, r5
 8006986:	47b0      	blx	r6
 8006988:	2800      	cmp	r0, #0
 800698a:	dc06      	bgt.n	800699a <__sflush_r+0xfe>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	e78e      	b.n	80068b8 <__sflush_r+0x1c>
 800699a:	4407      	add	r7, r0
 800699c:	eba8 0800 	sub.w	r8, r8, r0
 80069a0:	e7e9      	b.n	8006976 <__sflush_r+0xda>
 80069a2:	bf00      	nop
 80069a4:	20400001 	.word	0x20400001

080069a8 <_fflush_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	690b      	ldr	r3, [r1, #16]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b913      	cbnz	r3, 80069b8 <_fflush_r+0x10>
 80069b2:	2500      	movs	r5, #0
 80069b4:	4628      	mov	r0, r5
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	b118      	cbz	r0, 80069c2 <_fflush_r+0x1a>
 80069ba:	6983      	ldr	r3, [r0, #24]
 80069bc:	b90b      	cbnz	r3, 80069c2 <_fflush_r+0x1a>
 80069be:	f000 f887 	bl	8006ad0 <__sinit>
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <_fflush_r+0x6c>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	d11b      	bne.n	8006a00 <_fflush_r+0x58>
 80069c8:	686c      	ldr	r4, [r5, #4]
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0ef      	beq.n	80069b2 <_fflush_r+0xa>
 80069d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069d4:	07d0      	lsls	r0, r2, #31
 80069d6:	d404      	bmi.n	80069e2 <_fflush_r+0x3a>
 80069d8:	0599      	lsls	r1, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_fflush_r+0x3a>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f7ff fb9e 	bl	800611e <__retarget_lock_acquire_recursive>
 80069e2:	4628      	mov	r0, r5
 80069e4:	4621      	mov	r1, r4
 80069e6:	f7ff ff59 	bl	800689c <__sflush_r>
 80069ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ec:	07da      	lsls	r2, r3, #31
 80069ee:	4605      	mov	r5, r0
 80069f0:	d4e0      	bmi.n	80069b4 <_fflush_r+0xc>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	059b      	lsls	r3, r3, #22
 80069f6:	d4dd      	bmi.n	80069b4 <_fflush_r+0xc>
 80069f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fa:	f7ff fb91 	bl	8006120 <__retarget_lock_release_recursive>
 80069fe:	e7d9      	b.n	80069b4 <_fflush_r+0xc>
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <_fflush_r+0x70>)
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d101      	bne.n	8006a0a <_fflush_r+0x62>
 8006a06:	68ac      	ldr	r4, [r5, #8]
 8006a08:	e7df      	b.n	80069ca <_fflush_r+0x22>
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <_fflush_r+0x74>)
 8006a0c:	429c      	cmp	r4, r3
 8006a0e:	bf08      	it	eq
 8006a10:	68ec      	ldreq	r4, [r5, #12]
 8006a12:	e7da      	b.n	80069ca <_fflush_r+0x22>
 8006a14:	0804a3e0 	.word	0x0804a3e0
 8006a18:	0804a400 	.word	0x0804a400
 8006a1c:	0804a3c0 	.word	0x0804a3c0

08006a20 <std>:
 8006a20:	2300      	movs	r3, #0
 8006a22:	b510      	push	{r4, lr}
 8006a24:	4604      	mov	r4, r0
 8006a26:	e9c0 3300 	strd	r3, r3, [r0]
 8006a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a2e:	6083      	str	r3, [r0, #8]
 8006a30:	8181      	strh	r1, [r0, #12]
 8006a32:	6643      	str	r3, [r0, #100]	; 0x64
 8006a34:	81c2      	strh	r2, [r0, #14]
 8006a36:	6183      	str	r3, [r0, #24]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	2208      	movs	r2, #8
 8006a3c:	305c      	adds	r0, #92	; 0x5c
 8006a3e:	f7ff fb70 	bl	8006122 <memset>
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x38>)
 8006a44:	6263      	str	r3, [r4, #36]	; 0x24
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <std+0x3c>)
 8006a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <std+0x40>)
 8006a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <std+0x44>)
 8006a50:	6224      	str	r4, [r4, #32]
 8006a52:	6323      	str	r3, [r4, #48]	; 0x30
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	bf00      	nop
 8006a58:	08006f3d 	.word	0x08006f3d
 8006a5c:	08006f5f 	.word	0x08006f5f
 8006a60:	08006f97 	.word	0x08006f97
 8006a64:	08006fbb 	.word	0x08006fbb

08006a68 <_cleanup_r>:
 8006a68:	4901      	ldr	r1, [pc, #4]	; (8006a70 <_cleanup_r+0x8>)
 8006a6a:	f000 b8af 	b.w	8006bcc <_fwalk_reent>
 8006a6e:	bf00      	nop
 8006a70:	080069a9 	.word	0x080069a9

08006a74 <__sfmoreglue>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	2268      	movs	r2, #104	; 0x68
 8006a78:	1e4d      	subs	r5, r1, #1
 8006a7a:	4355      	muls	r5, r2
 8006a7c:	460e      	mov	r6, r1
 8006a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a82:	f000 f993 	bl	8006dac <_malloc_r>
 8006a86:	4604      	mov	r4, r0
 8006a88:	b140      	cbz	r0, 8006a9c <__sfmoreglue+0x28>
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8006a90:	300c      	adds	r0, #12
 8006a92:	60a0      	str	r0, [r4, #8]
 8006a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a98:	f7ff fb43 	bl	8006122 <memset>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}

08006aa0 <__sfp_lock_acquire>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__sfp_lock_acquire+0x8>)
 8006aa2:	f7ff bb3c 	b.w	800611e <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200028c5 	.word	0x200028c5

08006aac <__sfp_lock_release>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__sfp_lock_release+0x8>)
 8006aae:	f7ff bb37 	b.w	8006120 <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200028c5 	.word	0x200028c5

08006ab8 <__sinit_lock_acquire>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	; (8006ac0 <__sinit_lock_acquire+0x8>)
 8006aba:	f7ff bb30 	b.w	800611e <__retarget_lock_acquire_recursive>
 8006abe:	bf00      	nop
 8006ac0:	200028c6 	.word	0x200028c6

08006ac4 <__sinit_lock_release>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sinit_lock_release+0x8>)
 8006ac6:	f7ff bb2b 	b.w	8006120 <__retarget_lock_release_recursive>
 8006aca:	bf00      	nop
 8006acc:	200028c6 	.word	0x200028c6

08006ad0 <__sinit>:
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	f7ff fff0 	bl	8006ab8 <__sinit_lock_acquire>
 8006ad8:	69a3      	ldr	r3, [r4, #24]
 8006ada:	b11b      	cbz	r3, 8006ae4 <__sinit+0x14>
 8006adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae0:	f7ff bff0 	b.w	8006ac4 <__sinit_lock_release>
 8006ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8006aea:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <__sinit+0x68>)
 8006aec:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <__sinit+0x6c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	bf04      	itt	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	61a3      	streq	r3, [r4, #24]
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f820 	bl	8006b40 <__sfp>
 8006b00:	6060      	str	r0, [r4, #4]
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f81c 	bl	8006b40 <__sfp>
 8006b08:	60a0      	str	r0, [r4, #8]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f818 	bl	8006b40 <__sfp>
 8006b10:	2200      	movs	r2, #0
 8006b12:	60e0      	str	r0, [r4, #12]
 8006b14:	2104      	movs	r1, #4
 8006b16:	6860      	ldr	r0, [r4, #4]
 8006b18:	f7ff ff82 	bl	8006a20 <std>
 8006b1c:	68a0      	ldr	r0, [r4, #8]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2109      	movs	r1, #9
 8006b22:	f7ff ff7d 	bl	8006a20 <std>
 8006b26:	68e0      	ldr	r0, [r4, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	2112      	movs	r1, #18
 8006b2c:	f7ff ff78 	bl	8006a20 <std>
 8006b30:	2301      	movs	r3, #1
 8006b32:	61a3      	str	r3, [r4, #24]
 8006b34:	e7d2      	b.n	8006adc <__sinit+0xc>
 8006b36:	bf00      	nop
 8006b38:	0804a388 	.word	0x0804a388
 8006b3c:	08006a69 	.word	0x08006a69

08006b40 <__sfp>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	4607      	mov	r7, r0
 8006b44:	f7ff ffac 	bl	8006aa0 <__sfp_lock_acquire>
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <__sfp+0x84>)
 8006b4a:	681e      	ldr	r6, [r3, #0]
 8006b4c:	69b3      	ldr	r3, [r6, #24]
 8006b4e:	b913      	cbnz	r3, 8006b56 <__sfp+0x16>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffbd 	bl	8006ad0 <__sinit>
 8006b56:	3648      	adds	r6, #72	; 0x48
 8006b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	d503      	bpl.n	8006b68 <__sfp+0x28>
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	b30b      	cbz	r3, 8006ba8 <__sfp+0x68>
 8006b64:	6836      	ldr	r6, [r6, #0]
 8006b66:	e7f7      	b.n	8006b58 <__sfp+0x18>
 8006b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b6c:	b9d5      	cbnz	r5, 8006ba4 <__sfp+0x64>
 8006b6e:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <__sfp+0x88>)
 8006b70:	60e3      	str	r3, [r4, #12]
 8006b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b76:	6665      	str	r5, [r4, #100]	; 0x64
 8006b78:	f7ff fad0 	bl	800611c <__retarget_lock_init_recursive>
 8006b7c:	f7ff ff96 	bl	8006aac <__sfp_lock_release>
 8006b80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b88:	6025      	str	r5, [r4, #0]
 8006b8a:	61a5      	str	r5, [r4, #24]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b94:	f7ff fac5 	bl	8006122 <memset>
 8006b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba4:	3468      	adds	r4, #104	; 0x68
 8006ba6:	e7d9      	b.n	8006b5c <__sfp+0x1c>
 8006ba8:	2104      	movs	r1, #4
 8006baa:	4638      	mov	r0, r7
 8006bac:	f7ff ff62 	bl	8006a74 <__sfmoreglue>
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	6030      	str	r0, [r6, #0]
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d1d5      	bne.n	8006b64 <__sfp+0x24>
 8006bb8:	f7ff ff78 	bl	8006aac <__sfp_lock_release>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	e7ee      	b.n	8006ba0 <__sfp+0x60>
 8006bc2:	bf00      	nop
 8006bc4:	0804a388 	.word	0x0804a388
 8006bc8:	ffff0001 	.word	0xffff0001

08006bcc <_fwalk_reent>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	4688      	mov	r8, r1
 8006bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bd8:	2700      	movs	r7, #0
 8006bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bde:	f1b9 0901 	subs.w	r9, r9, #1
 8006be2:	d505      	bpl.n	8006bf0 <_fwalk_reent+0x24>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	d1f7      	bne.n	8006bda <_fwalk_reent+0xe>
 8006bea:	4638      	mov	r0, r7
 8006bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d907      	bls.n	8006c06 <_fwalk_reent+0x3a>
 8006bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	d003      	beq.n	8006c06 <_fwalk_reent+0x3a>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	47c0      	blx	r8
 8006c04:	4307      	orrs	r7, r0
 8006c06:	3568      	adds	r5, #104	; 0x68
 8006c08:	e7e9      	b.n	8006bde <_fwalk_reent+0x12>

08006c0a <__swhatbuf_r>:
 8006c0a:	b570      	push	{r4, r5, r6, lr}
 8006c0c:	460e      	mov	r6, r1
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	2900      	cmp	r1, #0
 8006c14:	b096      	sub	sp, #88	; 0x58
 8006c16:	4614      	mov	r4, r2
 8006c18:	461d      	mov	r5, r3
 8006c1a:	da08      	bge.n	8006c2e <__swhatbuf_r+0x24>
 8006c1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	602a      	str	r2, [r5, #0]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	d410      	bmi.n	8006c4a <__swhatbuf_r+0x40>
 8006c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2c:	e00e      	b.n	8006c4c <__swhatbuf_r+0x42>
 8006c2e:	466a      	mov	r2, sp
 8006c30:	f000 f9ea 	bl	8007008 <_fstat_r>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	dbf1      	blt.n	8006c1c <__swhatbuf_r+0x12>
 8006c38:	9a01      	ldr	r2, [sp, #4]
 8006c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c42:	425a      	negs	r2, r3
 8006c44:	415a      	adcs	r2, r3
 8006c46:	602a      	str	r2, [r5, #0]
 8006c48:	e7ee      	b.n	8006c28 <__swhatbuf_r+0x1e>
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	b016      	add	sp, #88	; 0x58
 8006c52:	bd70      	pop	{r4, r5, r6, pc}

08006c54 <__smakebuf_r>:
 8006c54:	898b      	ldrh	r3, [r1, #12]
 8006c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c58:	079d      	lsls	r5, r3, #30
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	d507      	bpl.n	8006c70 <__smakebuf_r+0x1c>
 8006c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	6163      	str	r3, [r4, #20]
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	ab01      	add	r3, sp, #4
 8006c72:	466a      	mov	r2, sp
 8006c74:	f7ff ffc9 	bl	8006c0a <__swhatbuf_r>
 8006c78:	9900      	ldr	r1, [sp, #0]
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f000 f895 	bl	8006dac <_malloc_r>
 8006c82:	b948      	cbnz	r0, 8006c98 <__smakebuf_r+0x44>
 8006c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c88:	059a      	lsls	r2, r3, #22
 8006c8a:	d4ef      	bmi.n	8006c6c <__smakebuf_r+0x18>
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	e7e3      	b.n	8006c60 <__smakebuf_r+0xc>
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <__smakebuf_r+0x7c>)
 8006c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	6020      	str	r0, [r4, #0]
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	6163      	str	r3, [r4, #20]
 8006caa:	9b01      	ldr	r3, [sp, #4]
 8006cac:	6120      	str	r0, [r4, #16]
 8006cae:	b15b      	cbz	r3, 8006cc8 <__smakebuf_r+0x74>
 8006cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f9b9 	bl	800702c <_isatty_r>
 8006cba:	b128      	cbz	r0, 8006cc8 <__smakebuf_r+0x74>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	89a0      	ldrh	r0, [r4, #12]
 8006cca:	4305      	orrs	r5, r0
 8006ccc:	81a5      	strh	r5, [r4, #12]
 8006cce:	e7cd      	b.n	8006c6c <__smakebuf_r+0x18>
 8006cd0:	08006a69 	.word	0x08006a69

08006cd4 <_free_r>:
 8006cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d044      	beq.n	8006d64 <_free_r+0x90>
 8006cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cde:	9001      	str	r0, [sp, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ce6:	bfb8      	it	lt
 8006ce8:	18e4      	addlt	r4, r4, r3
 8006cea:	f000 f9c1 	bl	8007070 <__malloc_lock>
 8006cee:	4a1e      	ldr	r2, [pc, #120]	; (8006d68 <_free_r+0x94>)
 8006cf0:	9801      	ldr	r0, [sp, #4]
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	b933      	cbnz	r3, 8006d04 <_free_r+0x30>
 8006cf6:	6063      	str	r3, [r4, #4]
 8006cf8:	6014      	str	r4, [r2, #0]
 8006cfa:	b003      	add	sp, #12
 8006cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d00:	f000 b9bc 	b.w	800707c <__malloc_unlock>
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	d908      	bls.n	8006d1a <_free_r+0x46>
 8006d08:	6825      	ldr	r5, [r4, #0]
 8006d0a:	1961      	adds	r1, r4, r5
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	bf01      	itttt	eq
 8006d10:	6819      	ldreq	r1, [r3, #0]
 8006d12:	685b      	ldreq	r3, [r3, #4]
 8006d14:	1949      	addeq	r1, r1, r5
 8006d16:	6021      	streq	r1, [r4, #0]
 8006d18:	e7ed      	b.n	8006cf6 <_free_r+0x22>
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	b10b      	cbz	r3, 8006d24 <_free_r+0x50>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d9fa      	bls.n	8006d1a <_free_r+0x46>
 8006d24:	6811      	ldr	r1, [r2, #0]
 8006d26:	1855      	adds	r5, r2, r1
 8006d28:	42a5      	cmp	r5, r4
 8006d2a:	d10b      	bne.n	8006d44 <_free_r+0x70>
 8006d2c:	6824      	ldr	r4, [r4, #0]
 8006d2e:	4421      	add	r1, r4
 8006d30:	1854      	adds	r4, r2, r1
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	d1e0      	bne.n	8006cfa <_free_r+0x26>
 8006d38:	681c      	ldr	r4, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	6053      	str	r3, [r2, #4]
 8006d3e:	4421      	add	r1, r4
 8006d40:	6011      	str	r1, [r2, #0]
 8006d42:	e7da      	b.n	8006cfa <_free_r+0x26>
 8006d44:	d902      	bls.n	8006d4c <_free_r+0x78>
 8006d46:	230c      	movs	r3, #12
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	e7d6      	b.n	8006cfa <_free_r+0x26>
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf04      	itt	eq
 8006d54:	6819      	ldreq	r1, [r3, #0]
 8006d56:	685b      	ldreq	r3, [r3, #4]
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	bf04      	itt	eq
 8006d5c:	1949      	addeq	r1, r1, r5
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	6054      	str	r4, [r2, #4]
 8006d62:	e7ca      	b.n	8006cfa <_free_r+0x26>
 8006d64:	b003      	add	sp, #12
 8006d66:	bd30      	pop	{r4, r5, pc}
 8006d68:	200028c8 	.word	0x200028c8

08006d6c <sbrk_aligned>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4e0e      	ldr	r6, [pc, #56]	; (8006da8 <sbrk_aligned+0x3c>)
 8006d70:	460c      	mov	r4, r1
 8006d72:	6831      	ldr	r1, [r6, #0]
 8006d74:	4605      	mov	r5, r0
 8006d76:	b911      	cbnz	r1, 8006d7e <sbrk_aligned+0x12>
 8006d78:	f000 f88c 	bl	8006e94 <_sbrk_r>
 8006d7c:	6030      	str	r0, [r6, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 f887 	bl	8006e94 <_sbrk_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d00a      	beq.n	8006da0 <sbrk_aligned+0x34>
 8006d8a:	1cc4      	adds	r4, r0, #3
 8006d8c:	f024 0403 	bic.w	r4, r4, #3
 8006d90:	42a0      	cmp	r0, r4
 8006d92:	d007      	beq.n	8006da4 <sbrk_aligned+0x38>
 8006d94:	1a21      	subs	r1, r4, r0
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 f87c 	bl	8006e94 <_sbrk_r>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d101      	bne.n	8006da4 <sbrk_aligned+0x38>
 8006da0:	f04f 34ff 	mov.w	r4, #4294967295
 8006da4:	4620      	mov	r0, r4
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	200028cc 	.word	0x200028cc

08006dac <_malloc_r>:
 8006dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db0:	1ccd      	adds	r5, r1, #3
 8006db2:	f025 0503 	bic.w	r5, r5, #3
 8006db6:	3508      	adds	r5, #8
 8006db8:	2d0c      	cmp	r5, #12
 8006dba:	bf38      	it	cc
 8006dbc:	250c      	movcc	r5, #12
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	db01      	blt.n	8006dc8 <_malloc_r+0x1c>
 8006dc4:	42a9      	cmp	r1, r5
 8006dc6:	d905      	bls.n	8006dd4 <_malloc_r+0x28>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	2600      	movs	r6, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	4e2e      	ldr	r6, [pc, #184]	; (8006e90 <_malloc_r+0xe4>)
 8006dd6:	f000 f94b 	bl	8007070 <__malloc_lock>
 8006dda:	6833      	ldr	r3, [r6, #0]
 8006ddc:	461c      	mov	r4, r3
 8006dde:	bb34      	cbnz	r4, 8006e2e <_malloc_r+0x82>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4638      	mov	r0, r7
 8006de4:	f7ff ffc2 	bl	8006d6c <sbrk_aligned>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	4604      	mov	r4, r0
 8006dec:	d14d      	bne.n	8006e8a <_malloc_r+0xde>
 8006dee:	6834      	ldr	r4, [r6, #0]
 8006df0:	4626      	mov	r6, r4
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d140      	bne.n	8006e78 <_malloc_r+0xcc>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	eb04 0803 	add.w	r8, r4, r3
 8006e00:	f000 f848 	bl	8006e94 <_sbrk_r>
 8006e04:	4580      	cmp	r8, r0
 8006e06:	d13a      	bne.n	8006e7e <_malloc_r+0xd2>
 8006e08:	6821      	ldr	r1, [r4, #0]
 8006e0a:	3503      	adds	r5, #3
 8006e0c:	1a6d      	subs	r5, r5, r1
 8006e0e:	f025 0503 	bic.w	r5, r5, #3
 8006e12:	3508      	adds	r5, #8
 8006e14:	2d0c      	cmp	r5, #12
 8006e16:	bf38      	it	cc
 8006e18:	250c      	movcc	r5, #12
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f7ff ffa5 	bl	8006d6c <sbrk_aligned>
 8006e22:	3001      	adds	r0, #1
 8006e24:	d02b      	beq.n	8006e7e <_malloc_r+0xd2>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	442b      	add	r3, r5
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	e00e      	b.n	8006e4c <_malloc_r+0xa0>
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	1b52      	subs	r2, r2, r5
 8006e32:	d41e      	bmi.n	8006e72 <_malloc_r+0xc6>
 8006e34:	2a0b      	cmp	r2, #11
 8006e36:	d916      	bls.n	8006e66 <_malloc_r+0xba>
 8006e38:	1961      	adds	r1, r4, r5
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	6025      	str	r5, [r4, #0]
 8006e3e:	bf18      	it	ne
 8006e40:	6059      	strne	r1, [r3, #4]
 8006e42:	6863      	ldr	r3, [r4, #4]
 8006e44:	bf08      	it	eq
 8006e46:	6031      	streq	r1, [r6, #0]
 8006e48:	5162      	str	r2, [r4, r5]
 8006e4a:	604b      	str	r3, [r1, #4]
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f104 060b 	add.w	r6, r4, #11
 8006e52:	f000 f913 	bl	800707c <__malloc_unlock>
 8006e56:	f026 0607 	bic.w	r6, r6, #7
 8006e5a:	1d23      	adds	r3, r4, #4
 8006e5c:	1af2      	subs	r2, r6, r3
 8006e5e:	d0b6      	beq.n	8006dce <_malloc_r+0x22>
 8006e60:	1b9b      	subs	r3, r3, r6
 8006e62:	50a3      	str	r3, [r4, r2]
 8006e64:	e7b3      	b.n	8006dce <_malloc_r+0x22>
 8006e66:	6862      	ldr	r2, [r4, #4]
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	bf0c      	ite	eq
 8006e6c:	6032      	streq	r2, [r6, #0]
 8006e6e:	605a      	strne	r2, [r3, #4]
 8006e70:	e7ec      	b.n	8006e4c <_malloc_r+0xa0>
 8006e72:	4623      	mov	r3, r4
 8006e74:	6864      	ldr	r4, [r4, #4]
 8006e76:	e7b2      	b.n	8006dde <_malloc_r+0x32>
 8006e78:	4634      	mov	r4, r6
 8006e7a:	6876      	ldr	r6, [r6, #4]
 8006e7c:	e7b9      	b.n	8006df2 <_malloc_r+0x46>
 8006e7e:	230c      	movs	r3, #12
 8006e80:	603b      	str	r3, [r7, #0]
 8006e82:	4638      	mov	r0, r7
 8006e84:	f000 f8fa 	bl	800707c <__malloc_unlock>
 8006e88:	e7a1      	b.n	8006dce <_malloc_r+0x22>
 8006e8a:	6025      	str	r5, [r4, #0]
 8006e8c:	e7de      	b.n	8006e4c <_malloc_r+0xa0>
 8006e8e:	bf00      	nop
 8006e90:	200028c8 	.word	0x200028c8

08006e94 <_sbrk_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	; (8006eb0 <_sbrk_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fa f914 	bl	80010cc <_sbrk>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_sbrk_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_sbrk_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	200028d0 	.word	0x200028d0

08006eb4 <_raise_r>:
 8006eb4:	291f      	cmp	r1, #31
 8006eb6:	b538      	push	{r3, r4, r5, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	d904      	bls.n	8006ec8 <_raise_r+0x14>
 8006ebe:	2316      	movs	r3, #22
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eca:	b112      	cbz	r2, 8006ed2 <_raise_r+0x1e>
 8006ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <_raise_r+0x32>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f830 	bl	8006f38 <_getpid_r>
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4601      	mov	r1, r0
 8006edc:	4620      	mov	r0, r4
 8006ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee2:	f000 b817 	b.w	8006f14 <_kill_r>
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d00a      	beq.n	8006f00 <_raise_r+0x4c>
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	d103      	bne.n	8006ef6 <_raise_r+0x42>
 8006eee:	2316      	movs	r3, #22
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7e7      	b.n	8006ec6 <_raise_r+0x12>
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006efc:	4628      	mov	r0, r5
 8006efe:	4798      	blx	r3
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7e0      	b.n	8006ec6 <_raise_r+0x12>

08006f04 <raise>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <raise+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f7ff bfd3 	b.w	8006eb4 <_raise_r>
 8006f0e:	bf00      	nop
 8006f10:	20000014 	.word	0x20000014

08006f14 <_kill_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	; (8006f34 <_kill_r+0x20>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fa f84b 	bl	8000fbc <_kill>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_kill_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_kill_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	200028d0 	.word	0x200028d0

08006f38 <_getpid_r>:
 8006f38:	f7fa b838 	b.w	8000fac <_getpid>

08006f3c <__sread>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	460c      	mov	r4, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	f000 f8a0 	bl	8007088 <_read_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	bfab      	itete	ge
 8006f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f50:	181b      	addge	r3, r3, r0
 8006f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f56:	bfac      	ite	ge
 8006f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f5a:	81a3      	strhlt	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__swrite>:
 8006f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	461f      	mov	r7, r3
 8006f64:	898b      	ldrh	r3, [r1, #12]
 8006f66:	05db      	lsls	r3, r3, #23
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	d505      	bpl.n	8006f7c <__swrite+0x1e>
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	2302      	movs	r3, #2
 8006f76:	2200      	movs	r2, #0
 8006f78:	f000 f868 	bl	800704c <_lseek_r>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	4632      	mov	r2, r6
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	f000 b817 	b.w	8006fc4 <_write_r>

08006f96 <__sseek>:
 8006f96:	b510      	push	{r4, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 f855 	bl	800704c <_lseek_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	bf15      	itete	ne
 8006fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fb2:	81a3      	strheq	r3, [r4, #12]
 8006fb4:	bf18      	it	ne
 8006fb6:	81a3      	strhne	r3, [r4, #12]
 8006fb8:	bd10      	pop	{r4, pc}

08006fba <__sclose>:
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 b813 	b.w	8006fe8 <_close_r>
	...

08006fc4 <_write_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	; (8006fe4 <_write_r+0x20>)
 8006fc8:	4604      	mov	r4, r0
 8006fca:	4608      	mov	r0, r1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fa f829 	bl	800102a <_write>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_write_r+0x1e>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_write_r+0x1e>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	200028d0 	.word	0x200028d0

08006fe8 <_close_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d06      	ldr	r5, [pc, #24]	; (8007004 <_close_r+0x1c>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fa f835 	bl	8001062 <_close>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_close_r+0x1a>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_close_r+0x1a>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200028d0 	.word	0x200028d0

08007008 <_fstat_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	; (8007028 <_fstat_r+0x20>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f7fa f830 	bl	800107a <_fstat>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d102      	bne.n	8007024 <_fstat_r+0x1c>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	b103      	cbz	r3, 8007024 <_fstat_r+0x1c>
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	bd38      	pop	{r3, r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	200028d0 	.word	0x200028d0

0800702c <_isatty_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d06      	ldr	r5, [pc, #24]	; (8007048 <_isatty_r+0x1c>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fa f82f 	bl	800109a <_isatty>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_isatty_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_isatty_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	200028d0 	.word	0x200028d0

0800704c <_lseek_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d07      	ldr	r5, [pc, #28]	; (800706c <_lseek_r+0x20>)
 8007050:	4604      	mov	r4, r0
 8007052:	4608      	mov	r0, r1
 8007054:	4611      	mov	r1, r2
 8007056:	2200      	movs	r2, #0
 8007058:	602a      	str	r2, [r5, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f7fa f828 	bl	80010b0 <_lseek>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_lseek_r+0x1e>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_lseek_r+0x1e>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	200028d0 	.word	0x200028d0

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_lock+0x8>)
 8007072:	f7ff b854 	b.w	800611e <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	200028c4 	.word	0x200028c4

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_unlock+0x8>)
 800707e:	f7ff b84f 	b.w	8006120 <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	200028c4 	.word	0x200028c4

08007088 <_read_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	; (80070a8 <_read_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7f9 ffaa 	bl	8000ff0 <_read>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_read_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_read_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	200028d0 	.word	0x200028d0

080070ac <roundf>:
 80070ac:	ee10 0a10 	vmov	r0, s0
 80070b0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80070b4:	3a7f      	subs	r2, #127	; 0x7f
 80070b6:	2a16      	cmp	r2, #22
 80070b8:	dc15      	bgt.n	80070e6 <roundf+0x3a>
 80070ba:	2a00      	cmp	r2, #0
 80070bc:	da08      	bge.n	80070d0 <roundf+0x24>
 80070be:	3201      	adds	r2, #1
 80070c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80070c4:	d101      	bne.n	80070ca <roundf+0x1e>
 80070c6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80070ca:	ee00 3a10 	vmov	s0, r3
 80070ce:	4770      	bx	lr
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <roundf+0x44>)
 80070d2:	4111      	asrs	r1, r2
 80070d4:	4208      	tst	r0, r1
 80070d6:	d0fa      	beq.n	80070ce <roundf+0x22>
 80070d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070dc:	4113      	asrs	r3, r2
 80070de:	4403      	add	r3, r0
 80070e0:	ea23 0301 	bic.w	r3, r3, r1
 80070e4:	e7f1      	b.n	80070ca <roundf+0x1e>
 80070e6:	2a80      	cmp	r2, #128	; 0x80
 80070e8:	d1f1      	bne.n	80070ce <roundf+0x22>
 80070ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070ee:	4770      	bx	lr
 80070f0:	007fffff 	.word	0x007fffff

080070f4 <expf>:
 80070f4:	b508      	push	{r3, lr}
 80070f6:	ed2d 8b02 	vpush	{d8}
 80070fa:	eef0 8a40 	vmov.f32	s17, s0
 80070fe:	f000 f82f 	bl	8007160 <__ieee754_expf>
 8007102:	eeb0 8a40 	vmov.f32	s16, s0
 8007106:	eeb0 0a68 	vmov.f32	s0, s17
 800710a:	f000 f919 	bl	8007340 <finitef>
 800710e:	b160      	cbz	r0, 800712a <expf+0x36>
 8007110:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007150 <expf+0x5c>
 8007114:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	dd0a      	ble.n	8007134 <expf+0x40>
 800711e:	f7fe ff3f 	bl	8005fa0 <__errno>
 8007122:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007154 <expf+0x60>
 8007126:	2322      	movs	r3, #34	; 0x22
 8007128:	6003      	str	r3, [r0, #0]
 800712a:	eeb0 0a48 	vmov.f32	s0, s16
 800712e:	ecbd 8b02 	vpop	{d8}
 8007132:	bd08      	pop	{r3, pc}
 8007134:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007158 <expf+0x64>
 8007138:	eef4 8ae7 	vcmpe.f32	s17, s15
 800713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007140:	d5f3      	bpl.n	800712a <expf+0x36>
 8007142:	f7fe ff2d 	bl	8005fa0 <__errno>
 8007146:	2322      	movs	r3, #34	; 0x22
 8007148:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800715c <expf+0x68>
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	e7ec      	b.n	800712a <expf+0x36>
 8007150:	42b17180 	.word	0x42b17180
 8007154:	7f800000 	.word	0x7f800000
 8007158:	c2cff1b5 	.word	0xc2cff1b5
 800715c:	00000000 	.word	0x00000000

08007160 <__ieee754_expf>:
 8007160:	ee10 2a10 	vmov	r2, s0
 8007164:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007168:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800716c:	d902      	bls.n	8007174 <__ieee754_expf+0x14>
 800716e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007172:	4770      	bx	lr
 8007174:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007178:	d106      	bne.n	8007188 <__ieee754_expf+0x28>
 800717a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80072b4 <__ieee754_expf+0x154>
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf18      	it	ne
 8007182:	eeb0 0a67 	vmovne.f32	s0, s15
 8007186:	4770      	bx	lr
 8007188:	484b      	ldr	r0, [pc, #300]	; (80072b8 <__ieee754_expf+0x158>)
 800718a:	4282      	cmp	r2, r0
 800718c:	dd02      	ble.n	8007194 <__ieee754_expf+0x34>
 800718e:	2000      	movs	r0, #0
 8007190:	f000 b8d0 	b.w	8007334 <__math_oflowf>
 8007194:	2a00      	cmp	r2, #0
 8007196:	da05      	bge.n	80071a4 <__ieee754_expf+0x44>
 8007198:	4a48      	ldr	r2, [pc, #288]	; (80072bc <__ieee754_expf+0x15c>)
 800719a:	4291      	cmp	r1, r2
 800719c:	d902      	bls.n	80071a4 <__ieee754_expf+0x44>
 800719e:	2000      	movs	r0, #0
 80071a0:	f000 b8c2 	b.w	8007328 <__math_uflowf>
 80071a4:	4a46      	ldr	r2, [pc, #280]	; (80072c0 <__ieee754_expf+0x160>)
 80071a6:	4291      	cmp	r1, r2
 80071a8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80071ac:	d952      	bls.n	8007254 <__ieee754_expf+0xf4>
 80071ae:	4a45      	ldr	r2, [pc, #276]	; (80072c4 <__ieee754_expf+0x164>)
 80071b0:	4291      	cmp	r1, r2
 80071b2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80071b6:	d834      	bhi.n	8007222 <__ieee754_expf+0xc2>
 80071b8:	4943      	ldr	r1, [pc, #268]	; (80072c8 <__ieee754_expf+0x168>)
 80071ba:	4411      	add	r1, r2
 80071bc:	ed91 7a00 	vldr	s14, [r1]
 80071c0:	4942      	ldr	r1, [pc, #264]	; (80072cc <__ieee754_expf+0x16c>)
 80071c2:	440a      	add	r2, r1
 80071c4:	edd2 7a00 	vldr	s15, [r2]
 80071c8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80071cc:	f1c3 0201 	rsb	r2, r3, #1
 80071d0:	1ad2      	subs	r2, r2, r3
 80071d2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80071d6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80071da:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80072d0 <__ieee754_expf+0x170>
 80071de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072d4 <__ieee754_expf+0x174>
 80071e2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80071e6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80072d8 <__ieee754_expf+0x178>
 80071ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 80071ee:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80072dc <__ieee754_expf+0x17c>
 80071f2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80071f6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80072e0 <__ieee754_expf+0x180>
 80071fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 80071fe:	eef0 6a40 	vmov.f32	s13, s0
 8007202:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007206:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800720a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800720e:	bb92      	cbnz	r2, 8007276 <__ieee754_expf+0x116>
 8007210:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007214:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007218:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800721c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007220:	4770      	bx	lr
 8007222:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <__ieee754_expf+0x184>)
 8007224:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80072e8 <__ieee754_expf+0x188>
 8007228:	eddf 6a30 	vldr	s13, [pc, #192]	; 80072ec <__ieee754_expf+0x18c>
 800722c:	4413      	add	r3, r2
 800722e:	edd3 7a00 	vldr	s15, [r3]
 8007232:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007236:	eeb0 7a40 	vmov.f32	s14, s0
 800723a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723e:	ee17 2a90 	vmov	r2, s15
 8007242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007246:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800724a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80072f0 <__ieee754_expf+0x190>
 800724e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007252:	e7be      	b.n	80071d2 <__ieee754_expf+0x72>
 8007254:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007258:	d20b      	bcs.n	8007272 <__ieee754_expf+0x112>
 800725a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072f4 <__ieee754_expf+0x194>
 800725e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007262:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	dd02      	ble.n	8007272 <__ieee754_expf+0x112>
 800726c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007270:	4770      	bx	lr
 8007272:	2200      	movs	r2, #0
 8007274:	e7af      	b.n	80071d6 <__ieee754_expf+0x76>
 8007276:	ee76 6a66 	vsub.f32	s13, s12, s13
 800727a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800727e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007282:	bfb8      	it	lt
 8007284:	3264      	addlt	r2, #100	; 0x64
 8007286:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800728a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800728e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8007292:	ee17 3a90 	vmov	r3, s15
 8007296:	bfab      	itete	ge
 8007298:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800729c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80072a0:	ee00 3a10 	vmovge	s0, r3
 80072a4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80072f8 <__ieee754_expf+0x198>
 80072a8:	bfbc      	itt	lt
 80072aa:	ee00 3a10 	vmovlt	s0, r3
 80072ae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80072b2:	4770      	bx	lr
 80072b4:	00000000 	.word	0x00000000
 80072b8:	42b17217 	.word	0x42b17217
 80072bc:	42cff1b5 	.word	0x42cff1b5
 80072c0:	3eb17218 	.word	0x3eb17218
 80072c4:	3f851591 	.word	0x3f851591
 80072c8:	0804a428 	.word	0x0804a428
 80072cc:	0804a430 	.word	0x0804a430
 80072d0:	3331bb4c 	.word	0x3331bb4c
 80072d4:	b5ddea0e 	.word	0xb5ddea0e
 80072d8:	388ab355 	.word	0x388ab355
 80072dc:	bb360b61 	.word	0xbb360b61
 80072e0:	3e2aaaab 	.word	0x3e2aaaab
 80072e4:	0804a420 	.word	0x0804a420
 80072e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80072ec:	3f317180 	.word	0x3f317180
 80072f0:	3717f7d1 	.word	0x3717f7d1
 80072f4:	7149f2ca 	.word	0x7149f2ca
 80072f8:	0d800000 	.word	0x0d800000

080072fc <with_errnof>:
 80072fc:	b513      	push	{r0, r1, r4, lr}
 80072fe:	4604      	mov	r4, r0
 8007300:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007304:	f7fe fe4c 	bl	8005fa0 <__errno>
 8007308:	ed9d 0a01 	vldr	s0, [sp, #4]
 800730c:	6004      	str	r4, [r0, #0]
 800730e:	b002      	add	sp, #8
 8007310:	bd10      	pop	{r4, pc}

08007312 <xflowf>:
 8007312:	b130      	cbz	r0, 8007322 <xflowf+0x10>
 8007314:	eef1 7a40 	vneg.f32	s15, s0
 8007318:	ee27 0a80 	vmul.f32	s0, s15, s0
 800731c:	2022      	movs	r0, #34	; 0x22
 800731e:	f7ff bfed 	b.w	80072fc <with_errnof>
 8007322:	eef0 7a40 	vmov.f32	s15, s0
 8007326:	e7f7      	b.n	8007318 <xflowf+0x6>

08007328 <__math_uflowf>:
 8007328:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007330 <__math_uflowf+0x8>
 800732c:	f7ff bff1 	b.w	8007312 <xflowf>
 8007330:	10000000 	.word	0x10000000

08007334 <__math_oflowf>:
 8007334:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800733c <__math_oflowf+0x8>
 8007338:	f7ff bfeb 	b.w	8007312 <xflowf>
 800733c:	70000000 	.word	0x70000000

08007340 <finitef>:
 8007340:	b082      	sub	sp, #8
 8007342:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007346:	9801      	ldr	r0, [sp, #4]
 8007348:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800734c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007350:	bfac      	ite	ge
 8007352:	2000      	movge	r0, #0
 8007354:	2001      	movlt	r0, #1
 8007356:	b002      	add	sp, #8
 8007358:	4770      	bx	lr
	...

0800735c <_init>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr

08007368 <_fini>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr
