
microtvm_letscope_like.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000638c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000430b8  08006560  08006560  00016560  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049618  08049618  000601b8  2**0
                  CONTENTS
  4 .ARM          00000008  08049618  08049618  00059618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08049620  08049620  000601b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08049620  08049620  00059620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049624  08049624  00059624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08049628  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  080496a0  00060078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  08049740  00060118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000026b8  200001b8  080497e0  000601b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002870  080497e0  00062870  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000601b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015377  00000000  00000000  000601e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d1d  00000000  00000000  0007555f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec8  00000000  00000000  00078280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d90  00000000  00000000  00079148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002856f  00000000  00000000  00079ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012577  00000000  00000000  000a2447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f424b  00000000  00000000  000b49be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a8c09  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000478c  00000000  00000000  001a8c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006544 	.word	0x08006544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	08006544 	.word	0x08006544

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <TVMLogf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TVMLogf(const char* msg, ...) {
 80005b4:	b40f      	push	{r0, r1, r2, r3}
 80005b6:	b480      	push	{r7}
 80005b8:	b0a3      	sub	sp, #140	; 0x8c
 80005ba:	af00      	add	r7, sp, #0
  char buffer[128];
  int size;
  va_list args;
  va_start(args, msg);
 80005bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005c0:	607b      	str	r3, [r7, #4]
  va_end(args);
}
 80005c2:	bf00      	nop
 80005c4:	378c      	adds	r7, #140	; 0x8c
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fd20 	bl	800101a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f823 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f935 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 80005e2:	f000 f887 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f8d3 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ea:	f000 f901 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  TVMPlatformInitialize();
 80005ee:	f000 fa0d 	bl	8000a0c <TVMPlatformInitialize>
  int8_t output[1];

  struct tvmgen_default_inputs inputs = {
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x50>)
 80005f4:	607b      	str	r3, [r7, #4]
  .serving_default_input_1_0 = (void*)&dummy_input,
  };
  struct tvmgen_default_outputs outputs = {
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer_val = HAL_GetTick();
 80005fc:	f000 fd5e 	bl	80010bc <HAL_GetTick>
 8000600:	60f8      	str	r0, [r7, #12]
	  tvmgen_default_run(&inputs, &outputs);
 8000602:	463a      	mov	r2, r7
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fcb1 	bl	8003f70 <tvmgen_default_run>
	  timer_val = HAL_GetTick() - timer_val;
 800060e:	f000 fd55 	bl	80010bc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	60fb      	str	r3, [r7, #12]
	  timer_val = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
	  timer_val = HAL_GetTick();
 800061e:	e7ed      	b.n	80005fc <main+0x2c>
 8000620:	20000000 	.word	0x20000000

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fe69 	bl	800530a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f001 fc82 	bl	8001f50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <SystemClock_Config+0xc8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemClock_Config+0xcc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000698:	2348      	movs	r3, #72	; 0x48
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fc61 	bl	8001f70 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f96c 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 feef 	bl	80024b8 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e0:	f000 f956 	bl	8000990 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ETH_Init+0x84>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	; (800077c <MX_ETH_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ETH_Init+0x8c>)
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ETH_Init+0x8c>)
 800070c:	22e1      	movs	r2, #225	; 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_ETH_Init+0x84>)
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <MX_ETH_Init+0x8c>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_ETH_Init+0x84>)
 800072a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ETH_Init+0x84>)
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_ETH_Init+0x90>)
 8000734:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_ETH_Init+0x84>)
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_ETH_Init+0x94>)
 800073a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_ETH_Init+0x84>)
 800073e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000742:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x84>)
 8000746:	f000 fdcf 	bl	80012e8 <HAL_ETH_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 f91e 	bl	8000990 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000754:	2238      	movs	r2, #56	; 0x38
 8000756:	2100      	movs	r1, #0
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_ETH_Init+0x98>)
 800075a:	f004 fdd6 	bl	800530a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_ETH_Init+0x98>)
 8000760:	2221      	movs	r2, #33	; 0x21
 8000762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_ETH_Init+0x98>)
 8000766:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800076a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_ETH_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000020c 	.word	0x2000020c
 800077c:	40028000 	.word	0x40028000
 8000780:	2000084c 	.word	0x2000084c
 8000784:	20000118 	.word	0x20000118
 8000788:	20000078 	.word	0x20000078
 800078c:	200001d4 	.word	0x200001d4

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_USART3_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART3_UART_Init+0x58>)
 80007d4:	f002 fc86 	bl	80030e4 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f8d7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002bc 	.word	0x200002bc
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2206      	movs	r2, #6
 8000800:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fa43 	bl	8001cbe <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8a7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000344 	.word	0x20000344

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a46      	ldr	r2, [pc, #280]	; (8000980 <MX_GPIO_Init+0x134>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a40      	ldr	r2, [pc, #256]	; (8000980 <MX_GPIO_Init+0x134>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a3a      	ldr	r2, [pc, #232]	; (8000980 <MX_GPIO_Init+0x134>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a34      	ldr	r2, [pc, #208]	; (8000980 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f8:	4822      	ldr	r0, [pc, #136]	; (8000984 <MX_GPIO_Init+0x138>)
 80008fa:	f001 f9c7 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x13c>)
 8000904:	f001 f9c2 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481b      	ldr	r0, [pc, #108]	; (800098c <MX_GPIO_Init+0x140>)
 8000920:	f001 f808 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	; 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_GPIO_Init+0x138>)
 800093e:	f000 fff9 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0x13c>)
 800095a:	f000 ffeb 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0x13c>)
 8000972:	f000 ffdf 	bl	8001934 <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	; 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400
 8000988:	40021800 	.word	0x40021800
 800098c:	40020800 	.word	0x40020800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>

0800099a <TVMPlatformAbort>:

uint8_t memory[TVM_WORKSPACE_SIZE_BYTES];
MemoryManagerInterface* memory_manager;

// Called when an internal error occurs and execution cannot continue.
void TVMPlatformAbort(tvm_crt_error_t error_code) { exit(1); }
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	2001      	movs	r0, #1
 80009a4:	f004 fbf6 	bl	8005194 <exit>

080009a8 <TVMPlatformMemoryAllocate>:
                                va_list args) {
  return vsprintf(out_buf, fmt, args);
}

// Allocate memory for use by TVM.
tvm_crt_error_t TVMPlatformMemoryAllocate(size_t num_bytes, DLDevice dev, void** out_ptr) {
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	1d38      	adds	r0, r7, #4
 80009b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80009b6:	603b      	str	r3, [r7, #0]
  return memory_manager->Allocate(memory_manager, num_bytes, dev, out_ptr);
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <TVMPlatformMemoryAllocate+0x30>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681c      	ldr	r4, [r3, #0]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <TVMPlatformMemoryAllocate+0x30>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	cb0c      	ldmia	r3, {r2, r3}
 80009ca:	68f9      	ldr	r1, [r7, #12]
 80009cc:	47a0      	blx	r4
 80009ce:	4603      	mov	r3, r0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	20002854 	.word	0x20002854

080009dc <TVMPlatformMemoryFree>:

// Free memory used by TVM.
tvm_crt_error_t TVMPlatformMemoryFree(void* ptr, DLDevice dev) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	e883 0006 	stmia.w	r3, {r1, r2}
  return memory_manager->Free(memory_manager, ptr, dev);
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <TVMPlatformMemoryFree+0x2c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685c      	ldr	r4, [r3, #4]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <TVMPlatformMemoryFree+0x2c>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	cb0c      	ldmia	r3, {r2, r3}
 80009f8:	68f9      	ldr	r1, [r7, #12]
 80009fa:	47a0      	blx	r4
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20002854 	.word	0x20002854

08000a0c <TVMPlatformInitialize>:
tvm_crt_error_t TVMPlatformGenerateRandom(uint8_t* buffer, size_t num_bytes) {
  return kTvmErrorNoError;
}

// Initialize TVM inference.
tvm_crt_error_t TVMPlatformInitialize() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  int status =
      PageMemoryManagerCreate(&memory_manager, memory, sizeof(memory), 8 /* page_size_log2 */);
 8000a12:	2308      	movs	r3, #8
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	490b      	ldr	r1, [pc, #44]	; (8000a48 <TVMPlatformInitialize+0x3c>)
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <TVMPlatformInitialize+0x40>)
 8000a1c:	f004 fafe 	bl	800501c <PageMemoryManagerCreate>
 8000a20:	6078      	str	r0, [r7, #4]
  if (status != 0) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00a      	beq.n	8000a3e <TVMPlatformInitialize+0x32>
    fprintf(stderr, "error initiailizing memory manager\n");
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <TVMPlatformInitialize+0x44>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	2223      	movs	r2, #35	; 0x23
 8000a30:	2101      	movs	r1, #1
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <TVMPlatformInitialize+0x48>)
 8000a34:	f004 fc34 	bl	80052a0 <fwrite>
    return kTvmErrorPlatformMemoryManagerInitialized;
 8000a38:	f240 5301 	movw	r3, #1281	; 0x501
 8000a3c:	e000      	b.n	8000a40 <TVMPlatformInitialize+0x34>
  }
  return kTvmErrorNoError;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000854 	.word	0x20000854
 8000a4c:	20002854 	.word	0x20002854
 8000a50:	20000014 	.word	0x20000014
 8000a54:	08006560 	.word	0x08006560

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <HAL_ETH_MspInit+0x158>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	f040 8096 	bne.w	8000bf0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a46      	ldr	r2, [pc, #280]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a40      	ldr	r2, [pc, #256]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b6c:	2332      	movs	r3, #50	; 0x32
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <HAL_ETH_MspInit+0x160>)
 8000b88:	f000 fed4 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b8c:	2386      	movs	r3, #134	; 0x86
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4817      	ldr	r0, [pc, #92]	; (8000c04 <HAL_ETH_MspInit+0x164>)
 8000ba8:	f000 fec4 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <HAL_ETH_MspInit+0x168>)
 8000bca:	f000 feb3 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <HAL_ETH_MspInit+0x16c>)
 8000bec:	f000 fea2 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40028000 	.word	0x40028000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0aa      	sub	sp, #168	; 0xa8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2284      	movs	r2, #132	; 0x84
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 fb6a 	bl	800530a <memset>
  if(huart->Instance==USART3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_UART_MspInit+0xb4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d13c      	bne.n	8000cba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fe58 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c5a:	f7ff fe99 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_UART_MspInit+0xbc>)
 8000cb6:	f000 fe3d 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	37a8      	adds	r7, #168	; 0xa8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0ac      	sub	sp, #176	; 0xb0
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	2284      	movs	r2, #132	; 0x84
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb0a 	bl	800530a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfe:	d159      	bne.n	8000db4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fdf7 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d1c:	f7ff fe38 	bl	8000990 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d38:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d52:	230a      	movs	r3, #10
 8000d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <HAL_PCD_MspInit+0xf0>)
 8000d60:	f000 fde8 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <HAL_PCD_MspInit+0xf0>)
 8000d80:	f000 fdd8 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da6:	6453      	str	r3, [r2, #68]	; 0x44
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_PCD_MspInit+0xec>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	37b0      	adds	r7, #176	; 0xb0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f940 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return 1;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_kill>:

int _kill(int pid, int sig)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e32:	f004 f9a9 	bl	8005188 <__errno>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2216      	movs	r2, #22
 8000e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_exit>:

void _exit (int status)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffe7 	bl	8000e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e5a:	e7fe      	b.n	8000e5a <_exit+0x12>

08000e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
  }
  return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f004 f90e 	bl	8005188 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20050000 	.word	0x20050000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20002858 	.word	0x20002858
 8000fa0:	20002870 	.word	0x20002870

08000fa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd7 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f004 f961 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fae9 	bl	80005d0 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800100c:	08049628 	.word	0x08049628
  ldr r2, =_sbss
 8001010:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001014:	20002870 	.word	0x20002870

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>

0800101a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f92e 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f805 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102a:	f7ff fd15 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f93b 	bl	80012ce <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f911 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000008 	.word	0x20000008
 800108c:	20000010 	.word	0x20000010
 8001090:	2000000c 	.word	0x2000000c

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000010 	.word	0x20000010
 80010b8:	2000285c 	.word	0x2000285c

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000285c 	.word	0x2000285c

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000010 	.word	0x20000010

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	05fa0000 	.word	0x05fa0000

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06a      	b.n	80013d0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2223      	movs	r2, #35	; 0x23
 8001308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fbc7 	bl	8000aa0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_ETH_Init+0xf0>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <HAL_ETH_Init+0xf0>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_ETH_Init+0xf0>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_ETH_Init+0xf4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001330:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001334:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001346:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff feac 	bl	80010bc <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001366:	e011      	b.n	800138c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001368:	f7ff fea8 	bl	80010bc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001376:	d909      	bls.n	800138c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	22e0      	movs	r2, #224	; 0xe0
 8001384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e021      	b.n	80013d0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e4      	bne.n	8001368 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f958 	bl	8001654 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f9ff 	bl	80017a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fa55 	bl	800185a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	461a      	mov	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f9bd 	bl	8001738 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2210      	movs	r2, #16
 80013ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800

080013e0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4b51      	ldr	r3, [pc, #324]	; (800153c <ETH_SetMACConfig+0x15c>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7c1b      	ldrb	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <ETH_SetMACConfig+0x28>
 8001402:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001406:	e000      	b.n	800140a <ETH_SetMACConfig+0x2a>
 8001408:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7c5b      	ldrb	r3, [r3, #17]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <ETH_SetMACConfig+0x38>
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	e000      	b.n	800141a <ETH_SetMACConfig+0x3a>
 8001418:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800141a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001420:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7fdb      	ldrb	r3, [r3, #31]
 8001426:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001428:	431a      	orrs	r2, r3
                        macconf->Speed |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800142e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	7f92      	ldrb	r2, [r2, #30]
 8001434:	2a00      	cmp	r2, #0
 8001436:	d102      	bne.n	800143e <ETH_SetMACConfig+0x5e>
 8001438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143c:	e000      	b.n	8001440 <ETH_SetMACConfig+0x60>
 800143e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001440:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7f1b      	ldrb	r3, [r3, #28]
 8001446:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001448:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800144e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001456:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800145e:	2a00      	cmp	r2, #0
 8001460:	d102      	bne.n	8001468 <ETH_SetMACConfig+0x88>
 8001462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001466:	e000      	b.n	800146a <ETH_SetMACConfig+0x8a>
 8001468:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800146a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	7bdb      	ldrb	r3, [r3, #15]
 8001470:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001472:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001478:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001480:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001482:	4313      	orrs	r3, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fe1a 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d101      	bne.n	80014ce <ETH_SetMACConfig+0xee>
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	e000      	b.n	80014d0 <ETH_SetMACConfig+0xf0>
 80014ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014de:	2a01      	cmp	r2, #1
 80014e0:	d101      	bne.n	80014e6 <ETH_SetMACConfig+0x106>
 80014e2:	2208      	movs	r2, #8
 80014e4:	e000      	b.n	80014e8 <ETH_SetMACConfig+0x108>
 80014e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014f0:	2a01      	cmp	r2, #1
 80014f2:	d101      	bne.n	80014f8 <ETH_SetMACConfig+0x118>
 80014f4:	2204      	movs	r2, #4
 80014f6:	e000      	b.n	80014fa <ETH_SetMACConfig+0x11a>
 80014f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001502:	2a01      	cmp	r2, #1
 8001504:	d101      	bne.n	800150a <ETH_SetMACConfig+0x12a>
 8001506:	2202      	movs	r2, #2
 8001508:	e000      	b.n	800150c <ETH_SetMACConfig+0x12c>
 800150a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800150c:	4313      	orrs	r3, r2
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fdd5 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	ff20810f 	.word	0xff20810f

08001540 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <ETH_SetDMAConfig+0x110>)
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	7b1b      	ldrb	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <ETH_SetDMAConfig+0x2c>
 8001566:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800156a:	e000      	b.n	800156e <ETH_SetDMAConfig+0x2e>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7b5b      	ldrb	r3, [r3, #13]
 8001572:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001574:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	7f52      	ldrb	r2, [r2, #29]
 800157a:	2a00      	cmp	r2, #0
 800157c:	d102      	bne.n	8001584 <ETH_SetDMAConfig+0x44>
 800157e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001582:	e000      	b.n	8001586 <ETH_SetDMAConfig+0x46>
 8001584:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001586:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	7b9b      	ldrb	r3, [r3, #14]
 800158c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800158e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001594:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7f1b      	ldrb	r3, [r3, #28]
 800159a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800159c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7f9b      	ldrb	r3, [r3, #30]
 80015a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b4:	4313      	orrs	r3, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fd7c 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001600:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001608:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800160a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001612:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001618:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001626:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fd4d 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	f8de3f23 	.word	0xf8de3f23

08001654 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0a6      	sub	sp, #152	; 0x98
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001672:	2301      	movs	r3, #1
 8001674:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001690:	2300      	movs	r3, #0
 8001692:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800169a:	2300      	movs	r3, #0
 800169c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fe86 	bl	80013e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016dc:	2301      	movs	r3, #1
 80016de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001700:	2301      	movs	r3, #1
 8001702:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001708:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800170a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff08 	bl	8001540 <ETH_SetDMAConfig>
}
 8001730:	bf00      	nop
 8001732:	3798      	adds	r7, #152	; 0x98
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3305      	adds	r3, #5
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	3204      	adds	r2, #4
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <ETH_MACAddressConfig+0x68>)
 800175a:	4413      	add	r3, r2
 800175c:	461a      	mov	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3303      	adds	r3, #3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	061a      	lsls	r2, r3, #24
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3302      	adds	r3, #2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3301      	adds	r3, #1
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4313      	orrs	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <ETH_MACAddressConfig+0x6c>)
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40028040 	.word	0x40028040
 80017a4:	40028044 	.word	0x40028044

080017a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e03e      	b.n	8001834 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68d9      	ldr	r1, [r3, #12]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	3206      	adds	r2, #6
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d80c      	bhi.n	8001818 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68d9      	ldr	r1, [r3, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	e004      	b.n	8001822 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d9bd      	bls.n	80017b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e046      	b.n	80018f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6919      	ldr	r1, [r3, #16]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	3212      	adds	r2, #18
 80018c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d80c      	bhi.n	80018e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e004      	b.n	80018f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d9b5      	bls.n	8001868 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e175      	b.n	8001c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8164 	bne.w	8001c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x56>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80be 	beq.w	8001c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ad6:	4a61      	ldr	r2, [pc, #388]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d037      	beq.n	8001b72 <HAL_GPIO_Init+0x23e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d031      	beq.n	8001b6e <HAL_GPIO_Init+0x23a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02b      	beq.n	8001b6a <HAL_GPIO_Init+0x236>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_GPIO_Init+0x338>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x232>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x33c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a53      	ldr	r2, [pc, #332]	; (8001c74 <HAL_GPIO_Init+0x340>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_GPIO_Init+0x344>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_GPIO_Init+0x348>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <HAL_GPIO_Init+0x34c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <HAL_GPIO_Init+0x350>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	e012      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b4e:	230a      	movs	r3, #10
 8001b50:	e010      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b52:	2308      	movs	r3, #8
 8001b54:	e00e      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae86 	bls.w	8001954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40022400 	.word	0x40022400
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc0:	b08f      	sub	sp, #60	; 0x3c
 8001cc2:	af0a      	add	r7, sp, #40	; 0x28
 8001cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e116      	b.n	8001efe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fff0 	bl	8000cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 fe92 	bl	8003a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	687e      	ldr	r6, [r7, #4]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d32:	1d33      	adds	r3, r6, #4
 8001d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f001 fe26 	bl	8003988 <USB_CoreInit>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0d7      	b.n	8001efe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 fe80 	bl	8003a5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e04a      	b.n	8001df6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	333d      	adds	r3, #61	; 0x3d
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	333c      	adds	r3, #60	; 0x3c
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	b298      	uxth	r0, r3
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	3344      	adds	r3, #68	; 0x44
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3340      	adds	r3, #64	; 0x40
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3348      	adds	r3, #72	; 0x48
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	334c      	adds	r3, #76	; 0x4c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3354      	adds	r3, #84	; 0x54
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3af      	bcc.n	8001d60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e044      	b.n	8001e90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3b5      	bcc.n	8001e06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	687e      	ldr	r6, [r7, #4]
 8001ea2:	466d      	mov	r5, sp
 8001ea4:	f106 0410 	add.w	r4, r6, #16
 8001ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb8:	1d33      	adds	r3, r6, #4
 8001eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ebc:	6838      	ldr	r0, [r7, #0]
 8001ebe:	f001 fe19 	bl	8003af4 <USB_DevInit>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e014      	b.n	8001efe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f80b 	bl	8001f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 ffd7 	bl	8003eaa <USB_DevDisconnect>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	10000003 	.word	0x10000003

08001f50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e291      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b96      	ldr	r3, [pc, #600]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa0:	4b93      	ldr	r3, [pc, #588]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62>
 8001fac:	4b90      	ldr	r3, [pc, #576]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b8d      	ldr	r3, [pc, #564]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x130>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e26b      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x7a>
 8001fdc:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a83      	ldr	r2, [pc, #524]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x9c>
 8001ff2:	4b7f      	ldr	r3, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7e      	ldr	r2, [pc, #504]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xc0>
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd8>
 8002030:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f834 	bl	80010bc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f830 	bl	80010bc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e21f      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f820 	bl	80010bc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f81c 	bl	80010bc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e20b      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x110>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d069      	beq.n	8002182 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x190>
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x17a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1df      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	493d      	ldr	r1, [pc, #244]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e040      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d023      	beq.n	8002150 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe ffd2 	bl	80010bc <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7fe ffce 	bl	80010bc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1bd      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4929      	ldr	r1, [pc, #164]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
 800214e:	e018      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe ffae 	bl	80010bc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe ffaa 	bl	80010bc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e199      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d038      	beq.n	8002200 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d019      	beq.n	80021ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7fe ff8b 	bl	80010bc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021aa:	f7fe ff87 	bl	80010bc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e176      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x23a>
 80021c8:	e01a      	b.n	8002200 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe ff71 	bl	80010bc <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe ff6d 	bl	80010bc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d903      	bls.n	80021f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e15c      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
 80021f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	4b91      	ldr	r3, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a4 	beq.w	8002356 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b8b      	ldr	r3, [pc, #556]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a87      	ldr	r2, [pc, #540]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b85      	ldr	r3, [pc, #532]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002236:	4b82      	ldr	r3, [pc, #520]	; (8002440 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7fe ff35 	bl	80010bc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7fe ff31 	bl	80010bc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e120      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	4b75      	ldr	r3, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x31a>
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	e02d      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x33c>
 8002292:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a66      	ldr	r2, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x35e>
 80022b4:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a60      	ldr	r2, [pc, #384]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	4b5e      	ldr	r3, [pc, #376]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a5d      	ldr	r2, [pc, #372]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
 80022ce:	4b5b      	ldr	r3, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a5a      	ldr	r2, [pc, #360]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe fee5 	bl	80010bc <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fee1 	bl	80010bc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0ce      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x386>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fecf 	bl	80010bc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fecb 	bl	80010bc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a3b      	ldr	r2, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a4 	beq.w	80024a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d06b      	beq.n	8002444 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d149      	bne.n	8002408 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800237a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fe9c 	bl	80010bc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fe98 	bl	80010bc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e087      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	3b01      	subs	r3, #1
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4313      	orrs	r3, r2
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe6c 	bl	80010bc <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fe68 	bl	80010bc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e057      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x478>
 8002406:	e04f      	b.n	80024a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 800240e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe52 	bl	80010bc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fe4e 	bl	80010bc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e03d      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_OscConfig+0x4cc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x4ac>
 800243a:	e035      	b.n	80024a8 <HAL_RCC_OscConfig+0x538>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x544>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d028      	beq.n	80024a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d121      	bne.n	80024a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d11a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800247a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800247c:	4293      	cmp	r3, r2
 800247e:	d111      	bne.n	80024a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d0      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d910      	bls.n	8002500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	4965      	ldr	r1, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d040      	beq.n	80025dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e073      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06b      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4936      	ldr	r1, [pc, #216]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ac:	f7fe fd86 	bl	80010bc <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe fd82 	bl	80010bc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e053      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d210      	bcs.n	800260c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 020f 	bic.w	r2, r3, #15
 80025f2:	4922      	ldr	r1, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1cc>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1d0>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1d4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fce2 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	080068d8 	.word	0x080068d8
 8002688:	20000008 	.word	0x20000008
 800268c:	2000000c 	.word	0x2000000c

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b094      	sub	sp, #80	; 0x50
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80e1 	bhi.w	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0db      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	e0db      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_GetSysClockFreq+0x208>)
 80026cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ce:	e0d8      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
 80026fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002734:	4659      	mov	r1, fp
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4651      	mov	r1, sl
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4651      	mov	r1, sl
 8002744:	ebb2 0801 	subs.w	r8, r2, r1
 8002748:	4659      	mov	r1, fp
 800274a:	eb63 0901 	sbc.w	r9, r3, r1
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002762:	4690      	mov	r8, r2
 8002764:	4699      	mov	r9, r3
 8002766:	4623      	mov	r3, r4
 8002768:	eb18 0303 	adds.w	r3, r8, r3
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	462b      	mov	r3, r5
 8002770:	eb49 0303 	adc.w	r3, r9, r3
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002782:	4629      	mov	r1, r5
 8002784:	024b      	lsls	r3, r1, #9
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278c:	4621      	mov	r1, r4
 800278e:	024a      	lsls	r2, r1, #9
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800279c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a0:	f7fd fd86 	bl	80002b0 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	e058      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	4611      	mov	r1, r2
 80027ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4641      	mov	r1, r8
 80027e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002800:	ebb2 040a 	subs.w	r4, r2, sl
 8002804:	eb63 050b 	sbc.w	r5, r3, fp
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	00eb      	lsls	r3, r5, #3
 8002812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002816:	00e2      	lsls	r2, r4, #3
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4643      	mov	r3, r8
 800281e:	18e3      	adds	r3, r4, r3
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	464b      	mov	r3, r9
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002836:	4629      	mov	r1, r5
 8002838:	028b      	lsls	r3, r1, #10
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002840:	4621      	mov	r1, r4
 8002842:	028a      	lsls	r2, r1, #10
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	61fa      	str	r2, [r7, #28]
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	f7fd fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002884:	4618      	mov	r0, r3
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	080068e8 	.word	0x080068e8

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	080068e8 	.word	0x080068e8

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d012      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800292c:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	4964      	ldr	r1, [pc, #400]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d017      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	4959      	ldr	r1, [pc, #356]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297c:	d101      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800299a:	4b4e      	ldr	r3, [pc, #312]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	494a      	ldr	r1, [pc, #296]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 808b 	beq.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fb56 	bl	80010bc <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fb52 	bl	80010bc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e357      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d035      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d02e      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d114      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fb1a 	bl	80010bc <HAL_GetTick>
 8002a88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fb16 	bl	80010bc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e319      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ee      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aba:	d111      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002aca:	400b      	ands	r3, r1
 8002acc:	4901      	ldr	r1, [pc, #4]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	0ffffcff 	.word	0x0ffffcff
 8002ae0:	4baa      	ldr	r3, [pc, #680]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4aa9      	ldr	r2, [pc, #676]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aea:	6093      	str	r3, [r2, #8]
 8002aec:	4ba7      	ldr	r3, [pc, #668]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	49a4      	ldr	r1, [pc, #656]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b0a:	4ba0      	ldr	r3, [pc, #640]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b10:	4a9e      	ldr	r2, [pc, #632]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b1a:	4b9c      	ldr	r3, [pc, #624]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	4999      	ldr	r1, [pc, #612]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b38:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b46:	4991      	ldr	r1, [pc, #580]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b68:	4988      	ldr	r1, [pc, #544]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b7c:	4b83      	ldr	r3, [pc, #524]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	4980      	ldr	r1, [pc, #512]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4977      	ldr	r1, [pc, #476]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc0:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	496f      	ldr	r1, [pc, #444]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be2:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f023 020c 	bic.w	r2, r3, #12
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	4966      	ldr	r1, [pc, #408]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	495e      	ldr	r1, [pc, #376]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c26:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	4955      	ldr	r1, [pc, #340]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4944      	ldr	r1, [pc, #272]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	493c      	ldr	r1, [pc, #240]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	4933      	ldr	r1, [pc, #204]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cde:	492b      	ldr	r1, [pc, #172]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d00:	4922      	ldr	r1, [pc, #136]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d40:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d64:	4909      	ldr	r1, [pc, #36]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d006      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80d9 	beq.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a01      	ldr	r2, [pc, #4]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d8a:	e001      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7fe f993 	bl	80010bc <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d9a:	f7fe f98f 	bl	80010bc <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e194      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d021      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dcc:	4b64      	ldr	r3, [pc, #400]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de0:	0e1b      	lsrs	r3, r3, #24
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	019a      	lsls	r2, r3, #6
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	071b      	lsls	r3, r3, #28
 8002e00:	4957      	ldr	r1, [pc, #348]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02e      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e32:	d129      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e48:	0f1b      	lsrs	r3, r3, #28
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	019a      	lsls	r2, r3, #6
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	071b      	lsls	r3, r3, #28
 8002e68:	493d      	ldr	r1, [pc, #244]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e76:	f023 021f 	bic.w	r2, r3, #31
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01d      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9a:	0e1b      	lsrs	r3, r3, #24
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea8:	0f1b      	lsrs	r3, r3, #28
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	019a      	lsls	r2, r3, #6
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	071b      	lsls	r3, r3, #28
 8002ec8:	4925      	ldr	r1, [pc, #148]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d011      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	019a      	lsls	r2, r3, #6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	071b      	lsls	r3, r3, #28
 8002ef8:	4919      	ldr	r1, [pc, #100]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fe f8d6 	bl	80010bc <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f14:	f7fe f8d2 	bl	80010bc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0d7      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 80cd 	bne.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe f8b9 	bl	80010bc <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f4e:	f7fe f8b5 	bl	80010bc <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d903      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0ba      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f70:	d0ed      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02e      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d12a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	0f1b      	lsrs	r3, r3, #28
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4944      	ldr	r1, [pc, #272]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	493d      	ldr	r1, [pc, #244]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d022      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003004:	d11d      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	0f1b      	lsrs	r3, r3, #28
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4929      	ldr	r1, [pc, #164]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d028      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	4917      	ldr	r1, [pc, #92]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4911      	ldr	r1, [pc, #68]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe f806 	bl	80010bc <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030b4:	f7fe f802 	bl	80010bc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e007      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d2:	d1ef      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e040      	b.n	8003178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fd82 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f82c 	bl	8003180 <UART_SetConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa84 	bl	8003648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb0b 	bl	800378c <UART_CheckIdleState>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4ba6      	ldr	r3, [pc, #664]	; (8003444 <UART_SetConfig+0x2c4>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a94      	ldr	r2, [pc, #592]	; (8003448 <UART_SetConfig+0x2c8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <UART_SetConfig+0xbe>
 80031fc:	4b93      	ldr	r3, [pc, #588]	; (800344c <UART_SetConfig+0x2cc>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b03      	cmp	r3, #3
 8003208:	d816      	bhi.n	8003238 <UART_SetConfig+0xb8>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <UART_SetConfig+0x90>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003221 	.word	0x08003221
 8003214:	0800322d 	.word	0x0800322d
 8003218:	08003227 	.word	0x08003227
 800321c:	08003233 	.word	0x08003233
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e150      	b.n	80034c8 <UART_SetConfig+0x348>
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e14d      	b.n	80034c8 <UART_SetConfig+0x348>
 800322c:	2304      	movs	r3, #4
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e14a      	b.n	80034c8 <UART_SetConfig+0x348>
 8003232:	2308      	movs	r3, #8
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e147      	b.n	80034c8 <UART_SetConfig+0x348>
 8003238:	2310      	movs	r3, #16
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e144      	b.n	80034c8 <UART_SetConfig+0x348>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a83      	ldr	r2, [pc, #524]	; (8003450 <UART_SetConfig+0x2d0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d132      	bne.n	80032ae <UART_SetConfig+0x12e>
 8003248:	4b80      	ldr	r3, [pc, #512]	; (800344c <UART_SetConfig+0x2cc>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d828      	bhi.n	80032a8 <UART_SetConfig+0x128>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0xdc>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003291 	.word	0x08003291
 8003260:	080032a9 	.word	0x080032a9
 8003264:	080032a9 	.word	0x080032a9
 8003268:	080032a9 	.word	0x080032a9
 800326c:	0800329d 	.word	0x0800329d
 8003270:	080032a9 	.word	0x080032a9
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080032a9 	.word	0x080032a9
 800327c:	08003297 	.word	0x08003297
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032a9 	.word	0x080032a9
 800328c:	080032a3 	.word	0x080032a3
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e118      	b.n	80034c8 <UART_SetConfig+0x348>
 8003296:	2302      	movs	r3, #2
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e115      	b.n	80034c8 <UART_SetConfig+0x348>
 800329c:	2304      	movs	r3, #4
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e112      	b.n	80034c8 <UART_SetConfig+0x348>
 80032a2:	2308      	movs	r3, #8
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e10f      	b.n	80034c8 <UART_SetConfig+0x348>
 80032a8:	2310      	movs	r3, #16
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e10c      	b.n	80034c8 <UART_SetConfig+0x348>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a68      	ldr	r2, [pc, #416]	; (8003454 <UART_SetConfig+0x2d4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d120      	bne.n	80032fa <UART_SetConfig+0x17a>
 80032b8:	4b64      	ldr	r3, [pc, #400]	; (800344c <UART_SetConfig+0x2cc>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d013      	beq.n	80032ee <UART_SetConfig+0x16e>
 80032c6:	2b30      	cmp	r3, #48	; 0x30
 80032c8:	d814      	bhi.n	80032f4 <UART_SetConfig+0x174>
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d009      	beq.n	80032e2 <UART_SetConfig+0x162>
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d810      	bhi.n	80032f4 <UART_SetConfig+0x174>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <UART_SetConfig+0x15c>
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d006      	beq.n	80032e8 <UART_SetConfig+0x168>
 80032da:	e00b      	b.n	80032f4 <UART_SetConfig+0x174>
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e0f2      	b.n	80034c8 <UART_SetConfig+0x348>
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e0ef      	b.n	80034c8 <UART_SetConfig+0x348>
 80032e8:	2304      	movs	r3, #4
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e0ec      	b.n	80034c8 <UART_SetConfig+0x348>
 80032ee:	2308      	movs	r3, #8
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e0e9      	b.n	80034c8 <UART_SetConfig+0x348>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e0e6      	b.n	80034c8 <UART_SetConfig+0x348>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a56      	ldr	r2, [pc, #344]	; (8003458 <UART_SetConfig+0x2d8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d120      	bne.n	8003346 <UART_SetConfig+0x1c6>
 8003304:	4b51      	ldr	r3, [pc, #324]	; (800344c <UART_SetConfig+0x2cc>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800330e:	2bc0      	cmp	r3, #192	; 0xc0
 8003310:	d013      	beq.n	800333a <UART_SetConfig+0x1ba>
 8003312:	2bc0      	cmp	r3, #192	; 0xc0
 8003314:	d814      	bhi.n	8003340 <UART_SetConfig+0x1c0>
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d009      	beq.n	800332e <UART_SetConfig+0x1ae>
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d810      	bhi.n	8003340 <UART_SetConfig+0x1c0>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_SetConfig+0x1a8>
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x1b4>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x1c0>
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0cc      	b.n	80034c8 <UART_SetConfig+0x348>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e0c9      	b.n	80034c8 <UART_SetConfig+0x348>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e0c6      	b.n	80034c8 <UART_SetConfig+0x348>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e0c3      	b.n	80034c8 <UART_SetConfig+0x348>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e0c0      	b.n	80034c8 <UART_SetConfig+0x348>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a44      	ldr	r2, [pc, #272]	; (800345c <UART_SetConfig+0x2dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d125      	bne.n	800339c <UART_SetConfig+0x21c>
 8003350:	4b3e      	ldr	r3, [pc, #248]	; (800344c <UART_SetConfig+0x2cc>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335e:	d017      	beq.n	8003390 <UART_SetConfig+0x210>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d817      	bhi.n	8003396 <UART_SetConfig+0x216>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d00b      	beq.n	8003384 <UART_SetConfig+0x204>
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d811      	bhi.n	8003396 <UART_SetConfig+0x216>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <UART_SetConfig+0x1fe>
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d006      	beq.n	800338a <UART_SetConfig+0x20a>
 800337c:	e00b      	b.n	8003396 <UART_SetConfig+0x216>
 800337e:	2300      	movs	r3, #0
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e0a1      	b.n	80034c8 <UART_SetConfig+0x348>
 8003384:	2302      	movs	r3, #2
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e09e      	b.n	80034c8 <UART_SetConfig+0x348>
 800338a:	2304      	movs	r3, #4
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e09b      	b.n	80034c8 <UART_SetConfig+0x348>
 8003390:	2308      	movs	r3, #8
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e098      	b.n	80034c8 <UART_SetConfig+0x348>
 8003396:	2310      	movs	r3, #16
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e095      	b.n	80034c8 <UART_SetConfig+0x348>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <UART_SetConfig+0x2e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d125      	bne.n	80033f2 <UART_SetConfig+0x272>
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <UART_SetConfig+0x2cc>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b4:	d017      	beq.n	80033e6 <UART_SetConfig+0x266>
 80033b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ba:	d817      	bhi.n	80033ec <UART_SetConfig+0x26c>
 80033bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c0:	d00b      	beq.n	80033da <UART_SetConfig+0x25a>
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c6:	d811      	bhi.n	80033ec <UART_SetConfig+0x26c>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <UART_SetConfig+0x254>
 80033cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d0:	d006      	beq.n	80033e0 <UART_SetConfig+0x260>
 80033d2:	e00b      	b.n	80033ec <UART_SetConfig+0x26c>
 80033d4:	2301      	movs	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e076      	b.n	80034c8 <UART_SetConfig+0x348>
 80033da:	2302      	movs	r3, #2
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e073      	b.n	80034c8 <UART_SetConfig+0x348>
 80033e0:	2304      	movs	r3, #4
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e070      	b.n	80034c8 <UART_SetConfig+0x348>
 80033e6:	2308      	movs	r3, #8
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e06d      	b.n	80034c8 <UART_SetConfig+0x348>
 80033ec:	2310      	movs	r3, #16
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e06a      	b.n	80034c8 <UART_SetConfig+0x348>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <UART_SetConfig+0x2e4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d138      	bne.n	800346e <UART_SetConfig+0x2ee>
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <UART_SetConfig+0x2cc>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003406:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800340a:	d017      	beq.n	800343c <UART_SetConfig+0x2bc>
 800340c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003410:	d82a      	bhi.n	8003468 <UART_SetConfig+0x2e8>
 8003412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003416:	d00b      	beq.n	8003430 <UART_SetConfig+0x2b0>
 8003418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341c:	d824      	bhi.n	8003468 <UART_SetConfig+0x2e8>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <UART_SetConfig+0x2aa>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d006      	beq.n	8003436 <UART_SetConfig+0x2b6>
 8003428:	e01e      	b.n	8003468 <UART_SetConfig+0x2e8>
 800342a:	2300      	movs	r3, #0
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e04b      	b.n	80034c8 <UART_SetConfig+0x348>
 8003430:	2302      	movs	r3, #2
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e048      	b.n	80034c8 <UART_SetConfig+0x348>
 8003436:	2304      	movs	r3, #4
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e045      	b.n	80034c8 <UART_SetConfig+0x348>
 800343c:	2308      	movs	r3, #8
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e042      	b.n	80034c8 <UART_SetConfig+0x348>
 8003442:	bf00      	nop
 8003444:	efff69f3 	.word	0xefff69f3
 8003448:	40011000 	.word	0x40011000
 800344c:	40023800 	.word	0x40023800
 8003450:	40004400 	.word	0x40004400
 8003454:	40004800 	.word	0x40004800
 8003458:	40004c00 	.word	0x40004c00
 800345c:	40005000 	.word	0x40005000
 8003460:	40011400 	.word	0x40011400
 8003464:	40007800 	.word	0x40007800
 8003468:	2310      	movs	r3, #16
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e02c      	b.n	80034c8 <UART_SetConfig+0x348>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a72      	ldr	r2, [pc, #456]	; (800363c <UART_SetConfig+0x4bc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d125      	bne.n	80034c4 <UART_SetConfig+0x344>
 8003478:	4b71      	ldr	r3, [pc, #452]	; (8003640 <UART_SetConfig+0x4c0>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003482:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003486:	d017      	beq.n	80034b8 <UART_SetConfig+0x338>
 8003488:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800348c:	d817      	bhi.n	80034be <UART_SetConfig+0x33e>
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d00b      	beq.n	80034ac <UART_SetConfig+0x32c>
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	d811      	bhi.n	80034be <UART_SetConfig+0x33e>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <UART_SetConfig+0x326>
 800349e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a2:	d006      	beq.n	80034b2 <UART_SetConfig+0x332>
 80034a4:	e00b      	b.n	80034be <UART_SetConfig+0x33e>
 80034a6:	2300      	movs	r3, #0
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e00d      	b.n	80034c8 <UART_SetConfig+0x348>
 80034ac:	2302      	movs	r3, #2
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e00a      	b.n	80034c8 <UART_SetConfig+0x348>
 80034b2:	2304      	movs	r3, #4
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e007      	b.n	80034c8 <UART_SetConfig+0x348>
 80034b8:	2308      	movs	r3, #8
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e004      	b.n	80034c8 <UART_SetConfig+0x348>
 80034be:	2310      	movs	r3, #16
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e001      	b.n	80034c8 <UART_SetConfig+0x348>
 80034c4:	2310      	movs	r3, #16
 80034c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	d15b      	bne.n	800358a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d828      	bhi.n	800352a <UART_SetConfig+0x3aa>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UART_SetConfig+0x360>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003505 	.word	0x08003505
 80034e4:	0800350d 	.word	0x0800350d
 80034e8:	08003515 	.word	0x08003515
 80034ec:	0800352b 	.word	0x0800352b
 80034f0:	0800351b 	.word	0x0800351b
 80034f4:	0800352b 	.word	0x0800352b
 80034f8:	0800352b 	.word	0x0800352b
 80034fc:	0800352b 	.word	0x0800352b
 8003500:	08003523 	.word	0x08003523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff f9d6 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003508:	61b8      	str	r0, [r7, #24]
        break;
 800350a:	e013      	b.n	8003534 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7ff f9e6 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003510:	61b8      	str	r0, [r7, #24]
        break;
 8003512:	e00f      	b.n	8003534 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <UART_SetConfig+0x4c4>)
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e00c      	b.n	8003534 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351a:	f7ff f8b9 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800351e:	61b8      	str	r0, [r7, #24]
        break;
 8003520:	e008      	b.n	8003534 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	61bb      	str	r3, [r7, #24]
        break;
 8003528:	e004      	b.n	8003534 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	77bb      	strb	r3, [r7, #30]
        break;
 8003532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d074      	beq.n	8003624 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	d916      	bls.n	8003584 <UART_SetConfig+0x404>
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d212      	bcs.n	8003584 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f023 030f 	bic.w	r3, r3, #15
 8003566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	b29a      	uxth	r2, r3
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	4313      	orrs	r3, r2
 8003578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	89fa      	ldrh	r2, [r7, #14]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	e04f      	b.n	8003624 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77bb      	strb	r3, [r7, #30]
 8003588:	e04c      	b.n	8003624 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358a:	7ffb      	ldrb	r3, [r7, #31]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d828      	bhi.n	80035e2 <UART_SetConfig+0x462>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x418>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035e3 	.word	0x080035e3
 80035a8:	080035d3 	.word	0x080035d3
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035e3 	.word	0x080035e3
 80035b4:	080035e3 	.word	0x080035e3
 80035b8:	080035db 	.word	0x080035db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7ff f97a 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80035c0:	61b8      	str	r0, [r7, #24]
        break;
 80035c2:	e013      	b.n	80035ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7ff f98a 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80035c8:	61b8      	str	r0, [r7, #24]
        break;
 80035ca:	e00f      	b.n	80035ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <UART_SetConfig+0x4c4>)
 80035ce:	61bb      	str	r3, [r7, #24]
        break;
 80035d0:	e00c      	b.n	80035ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7ff f85d 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80035d6:	61b8      	str	r0, [r7, #24]
        break;
 80035d8:	e008      	b.n	80035ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e004      	b.n	80035ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77bb      	strb	r3, [r7, #30]
        break;
 80035ea:	bf00      	nop
    }

    if (pclk != 0U)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085a      	lsrs	r2, r3, #1
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d909      	bls.n	8003620 <UART_SetConfig+0x4a0>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d205      	bcs.n	8003620 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	e001      	b.n	8003624 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003630:	7fbb      	ldrb	r3, [r7, #30]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40007c00 	.word	0x40007c00
 8003640:	40023800 	.word	0x40023800
 8003644:	00f42400 	.word	0x00f42400

08003648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01a      	beq.n	800375e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003746:	d10a      	bne.n	800375e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800379c:	f7fd fc8e 	bl	80010bc <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d10e      	bne.n	80037ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f81b 	bl	80037fa <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e011      	b.n	80037f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b09c      	sub	sp, #112	; 0x70
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380a:	e0a7      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	f000 80a3 	beq.w	800395c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fd fc51 	bl	80010bc <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <UART_WaitOnFlagUntilTimeout+0x32>
 8003826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13f      	bne.n	80038ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003840:	667b      	str	r3, [r7, #100]	; 0x64
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e6      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800387e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e068      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d050      	beq.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d148      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
 80038f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	613b      	str	r3, [r7, #16]
   return(result);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	66bb      	str	r3, [r7, #104]	; 0x68
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003926:	623a      	str	r2, [r7, #32]
 8003928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	61bb      	str	r3, [r7, #24]
   return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e010      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	429a      	cmp	r2, r3
 8003978:	f43f af48 	beq.w	800380c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3770      	adds	r7, #112	; 0x70
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003988:	b084      	sub	sp, #16
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	f107 001c 	add.w	r0, r7, #28
 8003996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	d120      	bne.n	80039e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <USB_CoreInit+0xac>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa96 	bl	8003f08 <USB_CoreReset>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e010      	b.n	8003a04 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa8a 	bl	8003f08 <USB_CoreReset>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10b      	bne.n	8003a22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f043 0206 	orr.w	r2, r3, #6
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a2e:	b004      	add	sp, #16
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	ffbdffbf 	.word	0xffbdffbf

08003a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 0201 	bic.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d115      	bne.n	8003aa8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7fd fb23 	bl	80010d4 <HAL_Delay>
      ms++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa29 	bl	8003eec <USB_GetMode>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d01e      	beq.n	8003ade <USB_SetCurrentMode+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b31      	cmp	r3, #49	; 0x31
 8003aa4:	d9f0      	bls.n	8003a88 <USB_SetCurrentMode+0x2e>
 8003aa6:	e01a      	b.n	8003ade <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d115      	bne.n	8003ada <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7fd fb0a 	bl	80010d4 <HAL_Delay>
      ms++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa10 	bl	8003eec <USB_GetMode>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <USB_SetCurrentMode+0x84>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b31      	cmp	r3, #49	; 0x31
 8003ad6:	d9f0      	bls.n	8003aba <USB_SetCurrentMode+0x60>
 8003ad8:	e001      	b.n	8003ade <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e005      	b.n	8003aea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b32      	cmp	r3, #50	; 0x32
 8003ae2:	d101      	bne.n	8003ae8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003af4:	b084      	sub	sp, #16
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e009      	b.n	8003b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	3340      	adds	r3, #64	; 0x40
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3301      	adds	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b0e      	cmp	r3, #14
 8003b2c:	d9f2      	bls.n	8003b14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11c      	bne.n	8003b6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b42:	f043 0302 	orr.w	r3, r3, #2
 8003b46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e005      	b.n	8003b7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b94:	461a      	mov	r2, r3
 8003b96:	680b      	ldr	r3, [r1, #0]
 8003b98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10c      	bne.n	8003bba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f965 	bl	8003e78 <USB_SetDevSpeed>
 8003bae:	e008      	b.n	8003bc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f960 	bl	8003e78 <USB_SetDevSpeed>
 8003bb8:	e003      	b.n	8003bc2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bba:	2103      	movs	r1, #3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f95b 	bl	8003e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8f3 	bl	8003db0 <USB_FlushTxFifo>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f91f 	bl	8003e18 <USB_FlushRxFifo>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e043      	b.n	8003c96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c24:	d118      	bne.n	8003c58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e013      	b.n	8003c6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e008      	b.n	8003c6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	3301      	adds	r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3b7      	bcc.n	8003c0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	e043      	b.n	8003d2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cba:	d118      	bne.n	8003cee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e013      	b.n	8003d00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e008      	b.n	8003d00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3b7      	bcc.n	8003ca4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <USB_DevInit+0x2b4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f043 0208 	orr.w	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <USB_DevInit+0x2b8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003da4:	b004      	add	sp, #16
 8003da6:	4770      	bx	lr
 8003da8:	803c3800 	.word	0x803c3800
 8003dac:	40000004 	.word	0x40000004

08003db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <USB_FlushTxFifo+0x64>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e01b      	b.n	8003e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	daf2      	bge.n	8003dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <USB_FlushTxFifo+0x64>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e006      	b.n	8003e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d0f0      	beq.n	8003de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	00030d40 	.word	0x00030d40

08003e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <USB_FlushRxFifo+0x5c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e018      	b.n	8003e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	daf2      	bge.n	8003e24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2210      	movs	r2, #16
 8003e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <USB_FlushRxFifo+0x5c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e006      	b.n	8003e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d0f0      	beq.n	8003e48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	00030d40 	.word	0x00030d40

08003e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ec4:	f023 0303 	bic.w	r3, r3, #3
 8003ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <USB_CoreReset+0x64>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e01b      	b.n	8003f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	daf2      	bge.n	8003f14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <USB_CoreReset+0x64>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e006      	b.n	8003f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d0f0      	beq.n	8003f3e <USB_CoreReset+0x36>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	00030d40 	.word	0x00030d40

08003f70 <tvmgen_default_run>:
#ifdef __cplusplus
extern "C" {
#endif
#include <tvmgen_default.h>
TVM_DLL int32_t tvmgen_default___tvm_main__(void* serving_default_input_1_0,void* output0);
int32_t tvmgen_default_run(struct tvmgen_default_inputs* inputs,struct tvmgen_default_outputs* outputs) {return tvmgen_default___tvm_main__(inputs->serving_default_input_1_0,outputs->StatefulPartitionedCall_0);
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f000 fcaf 	bl	80048e8 <tvmgen_default___tvm_main__>
 8003f8a:	4603      	mov	r3, r0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_>:
}

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_(int8_t* p0, int8_t* T_cast) {
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0a6      	sub	sp, #152	; 0x98
 8003f9a:	af02      	add	r7, sp, #8
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
  void* dense = TVMBackendAllocWorkspace(1, 0, (uint64_t)2048, 0, 32);
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 fd24 	bl	8004a00 <TVMBackendAllocWorkspace>
 8003fb8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (dense == NULL) {
 8003fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x36>
    return -1;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	e16c      	b.n	80042a4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x310>
  }
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fd0:	e0b7      	b.n	8004142 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x1ae>
    gemm_1x1x1_reset_QBTRSJPK((&(((int32_t*)dense)[y_outer])), 1);
 8003fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fdc:	4413      	add	r3, r2
 8003fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int i = 0; i < 1; i++) {
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe8:	e016      	b.n	8004018 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x84>
    for (int j = 0; j < 1; j++) {
 8003fea:	2300      	movs	r3, #0
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
 8003fee:	e00d      	b.n	800400c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x78>
      cc[i*C_stride + j] = 0;
 8003ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ff4:	fb03 f202 	mul.w	r2, r3, r2
 8003ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8004006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004008:	3301      	adds	r3, #1
 800400a:	663b      	str	r3, [r7, #96]	; 0x60
 800400c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400e:	2b00      	cmp	r3, #0
 8004010:	ddee      	ble.n	8003ff0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x5c>
  for (int i = 0; i < 1; i++) {
 8004012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004014:	3301      	adds	r3, #1
 8004016:	667b      	str	r3, [r7, #100]	; 0x64
 8004018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	dde5      	ble.n	8003fea <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x56>
    for (int32_t k_outer = 0; k_outer < 5; ++k_outer) {
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004024:	e083      	b.n	800412e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x19a>
      gemm_1x1x1_update_QBTRSJPK((&(p0[k_outer])), (&(((int8_t*)fused_constant)[((y_outer * 5) + k_outer)])), (&(((int32_t*)dense)[y_outer])), 1, 1, 1);
 8004026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	18d1      	adds	r1, r2, r3
 800402e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800403c:	4413      	add	r3, r2
 800403e:	461a      	mov	r2, r3
 8004040:	4b9b      	ldr	r3, [pc, #620]	; (80042b0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x31c>)
 8004042:	441a      	add	r2, r3
 8004044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800404e:	4403      	add	r3, r0
 8004050:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004052:	65ba      	str	r2, [r7, #88]	; 0x58
 8004054:	657b      	str	r3, [r7, #84]	; 0x54
 8004056:	2301      	movs	r3, #1
 8004058:	653b      	str	r3, [r7, #80]	; 0x50
 800405a:	2301      	movs	r3, #1
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405e:	2301      	movs	r3, #1
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
  int32_t retcode = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
 8004066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004068:	643b      	str	r3, [r7, #64]	; 0x40
 800406a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004070:	63bb      	str	r3, [r7, #56]	; 0x38
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < 1; i++) {
 800407e:	2300      	movs	r3, #0
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
 8004082:	e048      	b.n	8004116 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x182>
    for (int j = 0; j < 1; j++) {
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
 8004088:	e03f      	b.n	800410a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x176>
      int32_t sum = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e01e      	b.n	80040d2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x13e>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	fb03 f202 	mul.w	r2, r3, r2
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a4:	4413      	add	r3, r2
 80040a6:	f993 3000 	ldrsb.w	r3, [r3]
 80040aa:	4619      	mov	r1, r3
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	fb03 f202 	mul.w	r2, r3, r2
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	4413      	add	r3, r2
 80040be:	f993 3000 	ldrsb.w	r3, [r3]
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	4413      	add	r3, r2
 80040ca:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dddd      	ble.n	8004094 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x100>
      cc[i*C_stride + j] += sum;
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e8:	4413      	add	r3, r2
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	fb03 f202 	mul.w	r2, r3, r2
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fc:	4413      	add	r3, r2
 80040fe:	6a3a      	ldr	r2, [r7, #32]
 8004100:	440a      	add	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	3301      	adds	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	ddbc      	ble.n	800408a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0xf6>
  for (int i = 0; i < 1; i++) {
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	3301      	adds	r3, #1
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	ddb3      	ble.n	8004084 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0xf0>
  return 0;
 800411c:	2300      	movs	r3, #0
    retcode = gemm_1x1x1_update_loop_QBTRSJPK(aa, bb, cc, A_stride, B_stride, C_stride);
 800411e:	647b      	str	r3, [r7, #68]	; 0x44
    goto out;
 8004120:	bf00      	nop
  return retcode;
 8004122:	bf00      	nop
    for (int32_t k_outer = 0; k_outer < 5; ++k_outer) {
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004128:	3301      	adds	r3, #1
 800412a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004132:	2b04      	cmp	r3, #4
 8004134:	f77f af77 	ble.w	8004026 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x92>
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8004138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413c:	3301      	adds	r3, #1
 800413e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414a:	f6ff af42 	blt.w	8003fd2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x3e>
    }
  }
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004154:	e093      	b.n	800427e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2ea>
    int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant)[ax1]) - ((int32_t*)fused_nn_dense_constant)[ax1])) << ((int64_t)0)) : ((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant)[ax1]) - ((int32_t*)fused_nn_dense_constant)[ax1]))) * (int64_t)1365986415) + ((int64_t)1 << ((int64_t)((8 + 31) - 1)))) >> ((int64_t)(8 + 31)))) - 1;
 8004156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004160:	4413      	add	r3, r2
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4952      	ldr	r1, [pc, #328]	; (80042b4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x320>)
 800416c:	440b      	add	r3, r1
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	441a      	add	r2, r3
 8004172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	494f      	ldr	r1, [pc, #316]	; (80042b8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x324>)
 800417a:	440b      	add	r3, r1
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	17da      	asrs	r2, r3, #31
 8004182:	4698      	mov	r8, r3
 8004184:	4691      	mov	r9, r2
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x328>)
 8004188:	fb03 f209 	mul.w	r2, r3, r9
 800418c:	2300      	movs	r3, #0
 800418e:	fb03 f308 	mul.w	r3, r3, r8
 8004192:	4413      	add	r3, r2
 8004194:	4a49      	ldr	r2, [pc, #292]	; (80042bc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x328>)
 8004196:	fba8 4502 	umull	r4, r5, r8, r2
 800419a:	442b      	add	r3, r5
 800419c:	461d      	mov	r5, r3
 800419e:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 80041a2:	46a2      	mov	sl, r4
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 12eb 	mov.w	r2, fp, asr #7
 80041b0:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80041b4:	4613      	mov	r3, r2
 80041b6:	3b01      	subs	r3, #1
 80041b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t v__1 = (v_) < (127) ? (v_) : (127);
 80041ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041bc:	2b7f      	cmp	r3, #127	; 0x7f
 80041be:	bfa8      	it	ge
 80041c0:	237f      	movge	r3, #127	; 0x7f
 80041c2:	67bb      	str	r3, [r7, #120]	; 0x78
    float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 1)) * 3.400486e-01f))))) * 2.560000e+02f)) + -1.280000e+02f;
 80041c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80041ca:	4293      	cmp	r3, r2
 80041cc:	bfb8      	it	lt
 80041ce:	4613      	movlt	r3, r2
 80041d0:	3301      	adds	r3, #1
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041da:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80042c0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x32c>
 80041de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80042c4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x330>
 80041e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ea:	eeb0 0a67 	vmov.f32	s0, s15
 80041ee:	f002 f875 	bl	80062dc <expf>
 80041f2:	eef0 7a40 	vmov.f32	s15, s0
 80041f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004206:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80042c8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x334>
 800420a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420e:	eeb0 0a67 	vmov.f32	s0, s15
 8004212:	f002 f83f 	bl	8006294 <roundf>
 8004216:	eef0 7a40 	vmov.f32	s15, s0
 800421a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80042cc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x338>
 800421e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004222:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 8004226:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800422a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80042d0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x33c>
 800422e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	d501      	bpl.n	800423c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2a8>
 8004238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423a:	e000      	b.n	800423e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2aa>
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x340>)
 800423e:	673b      	str	r3, [r7, #112]	; 0x70
    T_cast[ax1] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 8004240:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004244:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80042d8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x344>
 8004248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	dd08      	ble.n	8004264 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2d0>
 8004252:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800425a:	edc7 7a01 	vstr	s15, [r7, #4]
 800425e:	793b      	ldrb	r3, [r7, #4]
 8004260:	b259      	sxtb	r1, r3
 8004262:	e001      	b.n	8004268 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x2d4>
 8004264:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8004268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4413      	add	r3, r2
 8004270:	460a      	mov	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 8004274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004278:	3301      	adds	r3, #1
 800427a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800427e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004286:	f6ff af66 	blt.w	8004156 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x1c2>
  }
  if (TVMBackendFreeWorkspace(1, 0, dense) != 0) {
 800428a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800428e:	2100      	movs	r1, #0
 8004290:	2001      	movs	r0, #1
 8004292:	f000 fc09 	bl	8004aa8 <TVMBackendFreeWorkspace>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x30e>
    return -1;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	e000      	b.n	80042a4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_+0x310>
  }
  return 0;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3790      	adds	r7, #144	; 0x90
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	080078f0 	.word	0x080078f0
 80042b4:	080070f0 	.word	0x080070f0
 80042b8:	080068f0 	.word	0x080068f0
 80042bc:	516b4c6f 	.word	0x516b4c6f
 80042c0:	3eae1ada 	.word	0x3eae1ada
 80042c4:	00000000 	.word	0x00000000
 80042c8:	43800000 	.word	0x43800000
 80042cc:	43000000 	.word	0x43000000
 80042d0:	42fe0000 	.word	0x42fe0000
 80042d4:	42fe0000 	.word	0x42fe0000
 80042d8:	c3000000 	.word	0xc3000000

080042dc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1(int8_t* p0, int8_t* T_cast) {
 80042dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e0:	b0a6      	sub	sp, #152	; 0x98
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
  void* dense = TVMBackendAllocWorkspace(1, 0, (uint64_t)2048, 0, 32);
 80042e8:	2320      	movs	r3, #32
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	2001      	movs	r0, #1
 80042fc:	f000 fb80 	bl	8004a00 <TVMBackendAllocWorkspace>
 8004300:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (dense == NULL) {
 8004304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x36>
    return -1;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	e16b      	b.n	80045ea <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30e>
  }
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004318:	e0b6      	b.n	8004488 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x1ac>
    gemm_1x1x1_reset_TIIKKEPU((&(((int32_t*)dense)[y_outer])), 1);
 800431a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004324:	4413      	add	r3, r2
 8004326:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004328:	2301      	movs	r3, #1
 800432a:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int i = 0; i < 1; i++) {
 800432c:	2300      	movs	r3, #0
 800432e:	667b      	str	r3, [r7, #100]	; 0x64
 8004330:	e016      	b.n	8004360 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x84>
    for (int j = 0; j < 1; j++) {
 8004332:	2300      	movs	r3, #0
 8004334:	663b      	str	r3, [r7, #96]	; 0x60
 8004336:	e00d      	b.n	8004354 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x78>
      cc[i*C_stride + j] = 0;
 8004338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800433c:	fb03 f202 	mul.w	r2, r3, r2
 8004340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004348:	4413      	add	r3, r2
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 800434e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004350:	3301      	adds	r3, #1
 8004352:	663b      	str	r3, [r7, #96]	; 0x60
 8004354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004356:	2b00      	cmp	r3, #0
 8004358:	ddee      	ble.n	8004338 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x5c>
  for (int i = 0; i < 1; i++) {
 800435a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435c:	3301      	adds	r3, #1
 800435e:	667b      	str	r3, [r7, #100]	; 0x64
 8004360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004362:	2b00      	cmp	r3, #0
 8004364:	dde5      	ble.n	8004332 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x56>
    for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800436c:	e081      	b.n	8004472 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x196>
      gemm_1x1x1_update_TIIKKEPU((&(p0[k_outer])), (&(((int8_t*)fused_constant_1)[((y_outer * 512) + k_outer)])), (&(((int32_t*)dense)[y_outer])), 1, 1, 1);
 800436e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	18d1      	adds	r1, r2, r3
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800437a:	025a      	lsls	r2, r3, #9
 800437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004380:	4413      	add	r3, r2
 8004382:	461a      	mov	r2, r3
 8004384:	4b9b      	ldr	r3, [pc, #620]	; (80045f4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x318>)
 8004386:	441a      	add	r2, r3
 8004388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004392:	4403      	add	r3, r0
 8004394:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004396:	65ba      	str	r2, [r7, #88]	; 0x58
 8004398:	657b      	str	r3, [r7, #84]	; 0x54
 800439a:	2301      	movs	r3, #1
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
 800439e:	2301      	movs	r3, #1
 80043a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a2:	2301      	movs	r3, #1
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
  int32_t retcode = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
 80043ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < 1; i++) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	e048      	b.n	800445a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x17e>
    for (int j = 0; j < 1; j++) {
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e03f      	b.n	800444e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x172>
      int32_t sum = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e01e      	b.n	8004416 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x13a>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043dc:	fb03 f202 	mul.w	r2, r3, r2
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e8:	4413      	add	r3, r2
 80043ea:	f993 3000 	ldrsb.w	r3, [r3]
 80043ee:	4619      	mov	r1, r3
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	fb03 f202 	mul.w	r2, r3, r2
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	4413      	add	r3, r2
 8004402:	f993 3000 	ldrsb.w	r3, [r3]
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	4413      	add	r3, r2
 800440e:	623b      	str	r3, [r7, #32]
      for (int l = 0; l < 1; l++) {
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	dddd      	ble.n	80043d8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xfc>
      cc[i*C_stride + j] += sum;
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004420:	fb03 f202 	mul.w	r2, r3, r2
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442c:	4413      	add	r3, r2
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004434:	fb03 f202 	mul.w	r2, r3, r2
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004440:	4413      	add	r3, r2
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	440a      	add	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 1; j++) {
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	3301      	adds	r3, #1
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	ddbc      	ble.n	80043ce <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xf2>
  for (int i = 0; i < 1; i++) {
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	3301      	adds	r3, #1
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	ddb3      	ble.n	80043c8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0xec>
  return 0;
 8004460:	2300      	movs	r3, #0
    retcode = gemm_1x1x1_update_loop_TIIKKEPU(aa, bb, cc, A_stride, B_stride, C_stride);
 8004462:	647b      	str	r3, [r7, #68]	; 0x44
    goto out;
 8004464:	bf00      	nop
  return retcode;
 8004466:	bf00      	nop
    for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8004468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800446c:	3301      	adds	r3, #1
 800446e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447a:	f6ff af78 	blt.w	800436e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x92>
  for (int32_t y_outer = 0; y_outer < 512; ++y_outer) {
 800447e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004482:	3301      	adds	r3, #1
 8004484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004490:	f6ff af43 	blt.w	800431a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x3e>
    }
  }
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800449a:	e093      	b.n	80045c4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2e8>
    int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant_1)[ax1]) - ((int32_t*)fused_nn_dense_constant_1)[ax1])) << ((int64_t)0)) : ((int64_t)((((int32_t*)dense)[ax1] + ((int32_t*)fused_nn_dense_subtract_constant_1)[ax1]) - ((int32_t*)fused_nn_dense_constant_1)[ax1]))) * (int64_t)1881032762) + ((int64_t)1 << ((int64_t)((13 + 31) - 1)))) >> ((int64_t)(13 + 31)))) - 42;
 800449c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044a6:	4413      	add	r3, r2
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4951      	ldr	r1, [pc, #324]	; (80045f8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x31c>)
 80044b2:	440b      	add	r3, r1
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	441a      	add	r2, r3
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	494f      	ldr	r1, [pc, #316]	; (80045fc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x320>)
 80044c0:	440b      	add	r3, r1
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	17da      	asrs	r2, r3, #31
 80044c8:	4698      	mov	r8, r3
 80044ca:	4691      	mov	r9, r2
 80044cc:	4b4c      	ldr	r3, [pc, #304]	; (8004600 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x324>)
 80044ce:	fb03 f209 	mul.w	r2, r3, r9
 80044d2:	2300      	movs	r3, #0
 80044d4:	fb03 f308 	mul.w	r3, r3, r8
 80044d8:	4413      	add	r3, r2
 80044da:	4a49      	ldr	r2, [pc, #292]	; (8004600 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x324>)
 80044dc:	fba8 4502 	umull	r4, r5, r8, r2
 80044e0:	442b      	add	r3, r5
 80044e2:	461d      	mov	r5, r3
 80044e4:	f505 6b00 	add.w	fp, r5, #2048	; 0x800
 80044e8:	46a2      	mov	sl, r4
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 322b 	mov.w	r2, fp, asr #12
 80044f6:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80044fa:	4613      	mov	r3, r2
 80044fc:	3b2a      	subs	r3, #42	; 0x2a
 80044fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t v__1 = (v_) < (127) ? (v_) : (127);
 8004500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004502:	2b7f      	cmp	r3, #127	; 0x7f
 8004504:	bfa8      	it	ge
 8004506:	237f      	movge	r3, #127	; 0x7f
 8004508:	67bb      	str	r3, [r7, #120]	; 0x78
    float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 42)) * 2.201938e-02f))))) * 2.560000e+02f)) + -1.280000e+02f;
 800450a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800450c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8004510:	4293      	cmp	r3, r2
 8004512:	bfb8      	it	lt
 8004514:	4613      	movlt	r3, r2
 8004516:	332a      	adds	r3, #42	; 0x2a
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004604 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x328>
 8004524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004528:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004608 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x32c>
 800452c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004530:	eeb0 0a67 	vmov.f32	s0, s15
 8004534:	f001 fed2 	bl	80062dc <expf>
 8004538:	eef0 7a40 	vmov.f32	s15, s0
 800453c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800460c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x330>
 8004550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004554:	eeb0 0a67 	vmov.f32	s0, s15
 8004558:	f001 fe9c 	bl	8006294 <roundf>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004610 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x334>
 8004564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004568:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 800456c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004570:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004614 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x338>
 8004574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	d501      	bpl.n	8004582 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2a6>
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	e000      	b.n	8004584 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2a8>
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x33c>)
 8004584:	673b      	str	r3, [r7, #112]	; 0x70
    T_cast[ax1] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 8004586:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800458a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800461c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x340>
 800458e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	dd08      	ble.n	80045aa <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2ce>
 8004598:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80045a4:	793b      	ldrb	r3, [r7, #4]
 80045a6:	b259      	sxtb	r1, r3
 80045a8:	e001      	b.n	80045ae <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x2d2>
 80045aa:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80045ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	460a      	mov	r2, r1
 80045b8:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1 = 0; ax1 < 512; ++ax1) {
 80045ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045be:	3301      	adds	r3, #1
 80045c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	f6ff af66 	blt.w	800449c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x1c0>
  }
  if (TVMBackendFreeWorkspace(1, 0, dense) != 0) {
 80045d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045d4:	2100      	movs	r1, #0
 80045d6:	2001      	movs	r0, #1
 80045d8:	f000 fa66 	bl	8004aa8 <TVMBackendFreeWorkspace>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30c>
    return -1;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	e000      	b.n	80045ea <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1+0x30e>
  }
  return 0;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3790      	adds	r7, #144	; 0x90
 80045ee:	46bd      	mov	sp, r7
 80045f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f4:	080092f0 	.word	0x080092f0
 80045f8:	08008af0 	.word	0x08008af0
 80045fc:	080082f0 	.word	0x080082f0
 8004600:	701e483a 	.word	0x701e483a
 8004604:	3cb461fd 	.word	0x3cb461fd
 8004608:	00000000 	.word	0x00000000
 800460c:	43800000 	.word	0x43800000
 8004610:	43000000 	.word	0x43000000
 8004614:	42fe0000 	.word	0x42fe0000
 8004618:	42fe0000 	.word	0x42fe0000
 800461c:	c3000000 	.word	0xc3000000

08004620 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2(int8_t* p0, int8_t* T_cast) {
 8004620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004624:	b0a3      	sub	sp, #140	; 0x8c
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	f107 011c 	add.w	r1, r7, #28
 8004630:	6739      	str	r1, [r7, #112]	; 0x70
 8004632:	2101      	movs	r1, #1
 8004634:	66f9      	str	r1, [r7, #108]	; 0x6c
  for (int i = 0; i < 1; i++) {
 8004636:	2100      	movs	r1, #0
 8004638:	66b9      	str	r1, [r7, #104]	; 0x68
 800463a:	e016      	b.n	800466a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x4a>
    for (int j = 0; j < 1; j++) {
 800463c:	2100      	movs	r1, #0
 800463e:	6679      	str	r1, [r7, #100]	; 0x64
 8004640:	e00d      	b.n	800465e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x3e>
      cc[i*C_stride + j] = 0;
 8004642:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004644:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004646:	fb01 f000 	mul.w	r0, r1, r0
 800464a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800464c:	4401      	add	r1, r0
 800464e:	0089      	lsls	r1, r1, #2
 8004650:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004652:	4401      	add	r1, r0
 8004654:	2000      	movs	r0, #0
 8004656:	6008      	str	r0, [r1, #0]
    for (int j = 0; j < 1; j++) {
 8004658:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800465a:	3101      	adds	r1, #1
 800465c:	6679      	str	r1, [r7, #100]	; 0x64
 800465e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004660:	2900      	cmp	r1, #0
 8004662:	ddee      	ble.n	8004642 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x22>
  for (int i = 0; i < 1; i++) {
 8004664:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004666:	3101      	adds	r1, #1
 8004668:	66b9      	str	r1, [r7, #104]	; 0x68
 800466a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800466c:	2900      	cmp	r1, #0
 800466e:	dde5      	ble.n	800463c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x1c>
  int32_t dense[1];
  gemm_1x1x1_reset_KETPAKCQ((&(dense[0])), 1);
  for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8004670:	2100      	movs	r1, #0
 8004672:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004676:	e078      	b.n	800476a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x14a>
    gemm_1x1x1_update_KETPAKCQ((&(p0[k_outer])), (&(((int8_t*)fused_constant_2)[k_outer])), (&(dense[0])), 1, 1, 1);
 8004678:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	4408      	add	r0, r1
 8004680:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004684:	4e7e      	ldr	r6, [pc, #504]	; (8004880 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x260>)
 8004686:	4431      	add	r1, r6
 8004688:	6638      	str	r0, [r7, #96]	; 0x60
 800468a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800468c:	f107 011c 	add.w	r1, r7, #28
 8004690:	65b9      	str	r1, [r7, #88]	; 0x58
 8004692:	2101      	movs	r1, #1
 8004694:	6579      	str	r1, [r7, #84]	; 0x54
 8004696:	2101      	movs	r1, #1
 8004698:	6539      	str	r1, [r7, #80]	; 0x50
 800469a:	2101      	movs	r1, #1
 800469c:	64f9      	str	r1, [r7, #76]	; 0x4c
  int32_t retcode = 0;
 800469e:	2100      	movs	r1, #0
 80046a0:	64b9      	str	r1, [r7, #72]	; 0x48
 80046a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046a4:	6479      	str	r1, [r7, #68]	; 0x44
 80046a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80046a8:	6439      	str	r1, [r7, #64]	; 0x40
 80046aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046ac:	63f9      	str	r1, [r7, #60]	; 0x3c
 80046ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b0:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046b4:	6379      	str	r1, [r7, #52]	; 0x34
 80046b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046b8:	6339      	str	r1, [r7, #48]	; 0x30
  for (int i = 0; i < 1; i++) {
 80046ba:	2100      	movs	r1, #0
 80046bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046be:	e048      	b.n	8004752 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x132>
    for (int j = 0; j < 1; j++) {
 80046c0:	2100      	movs	r1, #0
 80046c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80046c4:	e03f      	b.n	8004746 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x126>
      int32_t sum = 0;
 80046c6:	2100      	movs	r1, #0
 80046c8:	6279      	str	r1, [r7, #36]	; 0x24
      for (int l = 0; l < 1; l++) {
 80046ca:	2100      	movs	r1, #0
 80046cc:	6239      	str	r1, [r7, #32]
 80046ce:	e01e      	b.n	800470e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xee>
        sum += (int32_t) aa[i*A_stride + l] * (int32_t) bb[j*B_stride + l];
 80046d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046d4:	fb01 f000 	mul.w	r0, r1, r0
 80046d8:	6a39      	ldr	r1, [r7, #32]
 80046da:	4401      	add	r1, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046e0:	4401      	add	r1, r0
 80046e2:	f991 1000 	ldrsb.w	r1, [r1]
 80046e6:	460e      	mov	r6, r1
 80046e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ec:	fb01 f000 	mul.w	r0, r1, r0
 80046f0:	6a39      	ldr	r1, [r7, #32]
 80046f2:	4401      	add	r1, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046f8:	4401      	add	r1, r0
 80046fa:	f991 1000 	ldrsb.w	r1, [r1]
 80046fe:	fb06 f101 	mul.w	r1, r6, r1
 8004702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004704:	4401      	add	r1, r0
 8004706:	6279      	str	r1, [r7, #36]	; 0x24
      for (int l = 0; l < 1; l++) {
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	3101      	adds	r1, #1
 800470c:	6239      	str	r1, [r7, #32]
 800470e:	6a39      	ldr	r1, [r7, #32]
 8004710:	2900      	cmp	r1, #0
 8004712:	dddd      	ble.n	80046d0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xb0>
      cc[i*C_stride + j] += sum;
 8004714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004718:	fb01 f000 	mul.w	r0, r1, r0
 800471c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471e:	4401      	add	r1, r0
 8004720:	0089      	lsls	r1, r1, #2
 8004722:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004724:	4401      	add	r1, r0
 8004726:	680e      	ldr	r6, [r1, #0]
 8004728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800472a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800472c:	fb01 f000 	mul.w	r0, r1, r0
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	4401      	add	r1, r0
 8004734:	0089      	lsls	r1, r1, #2
 8004736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004738:	4401      	add	r1, r0
 800473a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800473c:	4430      	add	r0, r6
 800473e:	6008      	str	r0, [r1, #0]
    for (int j = 0; j < 1; j++) {
 8004740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004742:	3101      	adds	r1, #1
 8004744:	62b9      	str	r1, [r7, #40]	; 0x28
 8004746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004748:	2900      	cmp	r1, #0
 800474a:	ddbc      	ble.n	80046c6 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xa6>
  for (int i = 0; i < 1; i++) {
 800474c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800474e:	3101      	adds	r1, #1
 8004750:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	2900      	cmp	r1, #0
 8004756:	ddb3      	ble.n	80046c0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0xa0>
  return 0;
 8004758:	2100      	movs	r1, #0
    retcode = gemm_1x1x1_update_loop_KETPAKCQ(aa, bb, cc, A_stride, B_stride, C_stride);
 800475a:	64b9      	str	r1, [r7, #72]	; 0x48
    goto out;
 800475c:	bf00      	nop
  return retcode;
 800475e:	bf00      	nop
  for (int32_t k_outer = 0; k_outer < 512; ++k_outer) {
 8004760:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004764:	3101      	adds	r1, #1
 8004766:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800476a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800476e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004772:	db81      	blt.n	8004678 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x58>
  }
  int32_t v_ = ((int32_t)(((((0 != 0) ? (((int64_t)((dense[0] + ((int32_t*)fused_nn_dense_subtract_constant_2)[0]) - ((int32_t*)fused_nn_dense_constant_2)[0])) << ((int64_t)0)) : ((int64_t)((dense[0] + ((int32_t*)fused_nn_dense_subtract_constant_2)[0]) - ((int32_t*)fused_nn_dense_constant_2)[0]))) * (int64_t)1081317156) + ((int64_t)1 << ((int64_t)((10 + 31) - 1)))) >> ((int64_t)(10 + 31)))) - 128;
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	4943      	ldr	r1, [pc, #268]	; (8004884 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x264>)
 8004778:	6809      	ldr	r1, [r1, #0]
 800477a:	4408      	add	r0, r1
 800477c:	4942      	ldr	r1, [pc, #264]	; (8004888 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x268>)
 800477e:	6809      	ldr	r1, [r1, #0]
 8004780:	1a41      	subs	r1, r0, r1
 8004782:	17c8      	asrs	r0, r1, #31
 8004784:	460c      	mov	r4, r1
 8004786:	4605      	mov	r5, r0
 8004788:	4940      	ldr	r1, [pc, #256]	; (800488c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x26c>)
 800478a:	fb01 f005 	mul.w	r0, r1, r5
 800478e:	2100      	movs	r1, #0
 8004790:	fb04 f101 	mul.w	r1, r4, r1
 8004794:	4401      	add	r1, r0
 8004796:	483d      	ldr	r0, [pc, #244]	; (800488c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x26c>)
 8004798:	fba4 2300 	umull	r2, r3, r4, r0
 800479c:	4419      	add	r1, r3
 800479e:	460b      	mov	r3, r1
 80047a0:	f503 7980 	add.w	r9, r3, #256	; 0x100
 80047a4:	4690      	mov	r8, r2
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 2269 	mov.w	r2, r9, asr #9
 80047b2:	ea4f 73e9 	mov.w	r3, r9, asr #31
 80047b6:	4613      	mov	r3, r2
 80047b8:	3b80      	subs	r3, #128	; 0x80
 80047ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int32_t v__1 = (v_) < (127) ? (v_) : (127);
 80047be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047c2:	2b7f      	cmp	r3, #127	; 0x7f
 80047c4:	bfa8      	it	ge
 80047c6:	237f      	movge	r3, #127	; 0x7f
 80047c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  float v__2 = roundf(((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - (((float)(((v__1) > (-128) ? (v__1) : (-128)) + 128)) * 6.750199e-03f))))) * 2.560000e+02f)) + -1.280000e+02f;
 80047ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047cc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	3380      	adds	r3, #128	; 0x80
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004890 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x270>
 80047e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004894 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x274>
 80047ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	f001 fd72 	bl	80062dc <expf>
 80047f8:	eef0 7a40 	vmov.f32	s15, s0
 80047fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800480c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004898 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x278>
 8004810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004814:	eeb0 0a67 	vmov.f32	s0, s15
 8004818:	f001 fd3c 	bl	8006294 <roundf>
 800481c:	eef0 7a40 	vmov.f32	s15, s0
 8004820:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800489c <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x27c>
 8004824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004828:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  float v__3 = (v__2) < (1.270000e+02f) ? (v__2) : (1.270000e+02f);
 800482c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004830:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80048a0 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x280>
 8004834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	d501      	bpl.n	8004842 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x222>
 800483e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004840:	e000      	b.n	8004844 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x224>
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x284>)
 8004844:	677b      	str	r3, [r7, #116]	; 0x74
  T_cast[0] = ((int8_t)((v__3) > (-1.280000e+02f) ? (v__3) : (-1.280000e+02f)));
 8004846:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800484a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80048a8 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x288>
 800484e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004856:	dd08      	ble.n	800486a <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x24a>
 8004858:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800485c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004860:	edc7 7a01 	vstr	s15, [r7, #4]
 8004864:	793b      	ldrb	r3, [r7, #4]
 8004866:	b25a      	sxtb	r2, r3
 8004868:	e001      	b.n	800486e <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2+0x24e>
 800486a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	701a      	strb	r2, [r3, #0]
  return 0;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	378c      	adds	r7, #140	; 0x8c
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800487e:	bf00      	nop
 8004880:	08049310 	.word	0x08049310
 8004884:	08049300 	.word	0x08049300
 8004888:	080492f0 	.word	0x080492f0
 800488c:	40739724 	.word	0x40739724
 8004890:	3bdd30c6 	.word	0x3bdd30c6
 8004894:	00000000 	.word	0x00000000
 8004898:	43800000 	.word	0x43800000
 800489c:	43000000 	.word	0x43000000
 80048a0:	42fe0000 	.word	0x42fe0000
 80048a4:	42fe0000 	.word	0x42fe0000
 80048a8:	c3000000 	.word	0xc3000000

080048ac <tvmgen_default_fused_reshape>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default_fused_reshape(int8_t* p0, int8_t* T_reshape) {
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  for (int32_t ax1_inner = 0; ax1_inner < 5; ++ax1_inner) {
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e00b      	b.n	80048d4 <tvmgen_default_fused_reshape+0x28>
    T_reshape[ax1_inner] = p0[ax1_inner];
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	440b      	add	r3, r1
 80048c8:	f992 2000 	ldrsb.w	r2, [r2]
 80048cc:	701a      	strb	r2, [r3, #0]
  for (int32_t ax1_inner = 0; ax1_inner < 5; ++ax1_inner) {
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	ddf0      	ble.n	80048bc <tvmgen_default_fused_reshape+0x10>
  }
  return 0;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <tvmgen_default___tvm_main__>:

#ifdef __cplusplus
extern "C"
#endif
TVM_DLL int32_t tvmgen_default___tvm_main__(int8_t* serving_default_input_1_0_buffer_var, int8_t* StatefulPartitionedCall_0_buffer_var) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  void* sid_1 = TVMBackendAllocWorkspace(1, 0, (uint64_t)5, 0, 8);
 80048f2:	2308      	movs	r3, #8
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f04f 0205 	mov.w	r2, #5
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	2100      	movs	r1, #0
 8004904:	2001      	movs	r0, #1
 8004906:	f000 f87b 	bl	8004a00 <TVMBackendAllocWorkspace>
 800490a:	6178      	str	r0, [r7, #20]
  if (sid_1 == NULL) {
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <tvmgen_default___tvm_main__+0x30>
    return -1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	e06f      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  void* sid_2 = TVMBackendAllocWorkspace(1, 0, (uint64_t)512, 0, 8);
 8004918:	2308      	movs	r3, #8
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	2100      	movs	r1, #0
 800492a:	2001      	movs	r0, #1
 800492c:	f000 f868 	bl	8004a00 <TVMBackendAllocWorkspace>
 8004930:	6138      	str	r0, [r7, #16]
  if (sid_2 == NULL) {
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <tvmgen_default___tvm_main__+0x56>
    return -1;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	e05c      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  void* sid_3 = TVMBackendAllocWorkspace(1, 0, (uint64_t)512, 0, 8);
 800493e:	2308      	movs	r3, #8
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	2100      	movs	r1, #0
 8004950:	2001      	movs	r0, #1
 8004952:	f000 f855 	bl	8004a00 <TVMBackendAllocWorkspace>
 8004956:	60f8      	str	r0, [r7, #12]
  if (sid_3 == NULL) {
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <tvmgen_default___tvm_main__+0x7c>
    return -1;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	e049      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  if (tvmgen_default_fused_reshape(serving_default_input_1_0_buffer_var, sid_1) != 0 ) return -1;
 8004964:	6979      	ldr	r1, [r7, #20]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ffa0 	bl	80048ac <tvmgen_default_fused_reshape>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <tvmgen_default___tvm_main__+0x90>
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
 8004976:	e03f      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_(sid_1, sid_2) != 0 ) return -1;
 8004978:	6939      	ldr	r1, [r7, #16]
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f7ff fb0a 	bl	8003f94 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d_>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <tvmgen_default___tvm_main__+0xa4>
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e035      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1(sid_2, sid_3) != 0 ) return -1;
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f7ff fca4 	bl	80042dc <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__1>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <tvmgen_default___tvm_main__+0xb8>
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e02b      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  if (tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2(sid_3, StatefulPartitionedCall_0_buffer_var) != 0 ) return -1;
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff fe3c 	bl	8004620 <tvmgen_default_fused_nn_dense_subtract_add_fixed_point_multiply_add_clip_subtract_cast_multiply_db845967e9aad69d__2>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <tvmgen_default___tvm_main__+0xcc>
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e021      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  if (TVMBackendFreeWorkspace(1, 0, sid_3) != 0) {
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	2100      	movs	r1, #0
 80049b8:	2001      	movs	r0, #1
 80049ba:	f000 f875 	bl	8004aa8 <TVMBackendFreeWorkspace>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <tvmgen_default___tvm_main__+0xe2>
    return -1;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e016      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  if (TVMBackendFreeWorkspace(1, 0, sid_2) != 0) {
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	2100      	movs	r1, #0
 80049ce:	2001      	movs	r0, #1
 80049d0:	f000 f86a 	bl	8004aa8 <TVMBackendFreeWorkspace>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <tvmgen_default___tvm_main__+0xf8>
    return -1;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295
 80049de:	e00b      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  if (TVMBackendFreeWorkspace(1, 0, sid_1) != 0) {
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	2100      	movs	r1, #0
 80049e4:	2001      	movs	r0, #1
 80049e6:	f000 f85f 	bl	8004aa8 <TVMBackendFreeWorkspace>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <tvmgen_default___tvm_main__+0x10e>
    return -1;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	e000      	b.n	80049f8 <tvmgen_default___tvm_main__+0x110>
  }
  return 0;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <TVMBackendAllocWorkspace>:
#include <tvm/runtime/crt/platform.h>

#include "crt_config.h"

void* TVMBackendAllocWorkspace(int device_type, int device_id, uint64_t nbytes, int dtype_code_hint,
                               int dtype_bits_hint) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b092      	sub	sp, #72	; 0x48
 8004a04:	af0a      	add	r7, sp, #40	; 0x28
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	e9c7 2300 	strd	r2, r3, [r7]
  tvm_crt_error_t err = kTvmErrorNoError;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
  void* ptr = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  DLDevice dev = {device_type, device_id};
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	743b      	strb	r3, [r7, #16]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	617b      	str	r3, [r7, #20]
  assert(nbytes > 0);
 8004a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d105      	bne.n	8004a34 <TVMBackendAllocWorkspace+0x34>
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <TVMBackendAllocWorkspace+0x8c>)
 8004a2a:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <TVMBackendAllocWorkspace+0x90>)
 8004a2c:	2128      	movs	r1, #40	; 0x28
 8004a2e:	4819      	ldr	r0, [pc, #100]	; (8004a94 <TVMBackendAllocWorkspace+0x94>)
 8004a30:	f000 fb8c 	bl	800514c <__assert_func>
  err = TVMPlatformMemoryAllocate(nbytes, dev, &ptr);
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f107 0318 	add.w	r3, r7, #24
 8004a3a:	f107 0210 	add.w	r2, r7, #16
 8004a3e:	ca06      	ldmia	r2, {r1, r2}
 8004a40:	f7fb ffb2 	bl	80009a8 <TVMPlatformMemoryAllocate>
 8004a44:	61f8      	str	r0, [r7, #28]
  CHECK_EQ(err, kTvmErrorNoError,
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d019      	beq.n	8004a80 <TVMBackendAllocWorkspace+0x80>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	9308      	str	r3, [sp, #32]
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	9307      	str	r3, [sp, #28]
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	9306      	str	r3, [sp, #24]
 8004a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <TVMBackendAllocWorkspace+0x98>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <TVMBackendAllocWorkspace+0x9c>)
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <TVMBackendAllocWorkspace+0xa0>)
 8004a70:	212a      	movs	r1, #42	; 0x2a
 8004a72:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <TVMBackendAllocWorkspace+0xa4>)
 8004a74:	f7fb fd9e 	bl	80005b4 <TVMLogf>
 8004a78:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004a7c:	f7fb ff8d 	bl	800099a <TVMPlatformAbort>
           "TVMBackendAllocWorkspace(%d, %d, %" PRIu64 ", %d, %d) -> %" PRId32, device_type,
           device_id, nbytes, dtype_code_hint, dtype_bits_hint, err);
  return ptr;
 8004a80:	69bb      	ldr	r3, [r7, #24]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08006584 	.word	0x08006584
 8004a90:	08049510 	.word	0x08049510
 8004a94:	08006590 	.word	0x08006590
 8004a98:	08006664 	.word	0x08006664
 8004a9c:	080065cc 	.word	0x080065cc
 8004aa0:	080065d0 	.word	0x080065d0
 8004aa4:	080065d4 	.word	0x080065d4

08004aa8 <TVMBackendFreeWorkspace>:

int TVMBackendFreeWorkspace(int device_type, int device_id, void* ptr) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  tvm_crt_error_t err = kTvmErrorNoError;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
  DLDevice dev = {device_type, device_id};
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	753b      	strb	r3, [r7, #20]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
  err = TVMPlatformMemoryFree(ptr, dev);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fb ff86 	bl	80009dc <TVMPlatformMemoryFree>
 8004ad0:	61f8      	str	r0, [r7, #28]
  return err;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <PageCreate>:
#include <tvm/runtime/crt/logging.h>
#include <tvm/runtime/crt/platform.h>

// construct a new page
Page PageCreate(uint8_t* memory_pool, size_t page_size_bytes, tvm_index_t ptable_begin,
                tvm_index_t num_pages) {
 8004adc:	b4b0      	push	{r4, r5, r7}
 8004ade:	b08b      	sub	sp, #44	; 0x2c
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  Page page;
  page.ptable_begin = ptable_begin;
 8004ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  page.num_pages = num_pages;
 8004af0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004af4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  page.data = memory_pool + ptable_begin * page_size_bytes;
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	4413      	add	r3, r2
 8004b04:	623b      	str	r3, [r7, #32]
  return page;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	461d      	mov	r5, r3
 8004b0a:	f107 0410 	add.w	r4, r7, #16
 8004b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b16:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	372c      	adds	r7, #44	; 0x2c
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bcb0      	pop	{r4, r5, r7}
 8004b22:	4770      	bx	lr

08004b24 <PageTable_Resize>:

void PageTable_Resize(struct PageTable* ptable, size_t new_size, Page* page) {
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  CHECK_LE(ptable->num_pages, new_size, "size value (%zu) is smaller than expected (%zu).",
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d210      	bcs.n	8004b5c <PageTable_Resize+0x38>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	9302      	str	r3, [sp, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <PageTable_Resize+0x80>)
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <PageTable_Resize+0x84>)
 8004b4a:	4a18      	ldr	r2, [pc, #96]	; (8004bac <PageTable_Resize+0x88>)
 8004b4c:	2133      	movs	r1, #51	; 0x33
 8004b4e:	4818      	ldr	r0, [pc, #96]	; (8004bb0 <PageTable_Resize+0x8c>)
 8004b50:	f7fb fd30 	bl	80005b4 <TVMLogf>
 8004b54:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b58:	f7fb ff1f 	bl	800099a <TVMPlatformAbort>
           new_size, ptable->num_pages);
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e013      	b.n	8004b8c <PageTable_Resize+0x68>
    ptable->page[idx] = *page;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6899      	ldr	r1, [r3, #8]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	18ca      	adds	r2, r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4614      	mov	r4, r2
 8004b78:	461d      	mov	r5, r3
 8004b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b82:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint32_t idx = ptable->num_pages; idx < new_size; idx++) {
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3e7      	bcc.n	8004b64 <PageTable_Resize+0x40>
  }
  ptable->num_pages = new_size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	611a      	str	r2, [r3, #16]
}
 8004b9a:	bf00      	nop
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	08006718 	.word	0x08006718
 8004ba8:	08006678 	.word	0x08006678
 8004bac:	0800667c 	.word	0x0800667c
 8004bb0:	08006690 	.word	0x08006690

08004bb4 <TLB_Set>:

void TLB_Set(TLB* tlb, uint8_t* data, Page* page) {
 8004bb4:	b5b0      	push	{r4, r5, r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  PageEntry* entry = tlb->find(tlb, data);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	4798      	blx	r3
 8004bca:	6178      	str	r0, [r7, #20]
  if (entry == 0) {
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11d      	bne.n	8004c0e <TLB_Set+0x5a>
    tlb->entries[tlb->num_pages].addr = data;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	015b      	lsls	r3, r3, #5
 8004bdc:	4413      	add	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	601a      	str	r2, [r3, #0]
    tlb->entries[tlb->num_pages].page = *page;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	015b      	lsls	r3, r3, #5
 8004bec:	4413      	add	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	f103 0408 	add.w	r4, r3, #8
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bfe:	e884 0003 	stmia.w	r4, {r0, r1}
    tlb->num_pages++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
  } else {
    entry->addr = data;
    entry->page = *page;
  }
}
 8004c0c:	e00d      	b.n	8004c2a <TLB_Set+0x76>
    entry->addr = data;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	601a      	str	r2, [r3, #0]
    entry->page = *page;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	f103 0408 	add.w	r4, r3, #8
 8004c1c:	4615      	mov	r5, r2
 8004c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004c26:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bdb0      	pop	{r4, r5, r7, pc}

08004c32 <TLB_Find>:

PageEntry* TLB_Find(TLB* tlb, uint8_t* data) {
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  PageEntry* entry = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	e012      	b.n	8004c6c <TLB_Find+0x3a>
    if (tlb->entries[idx].addr == data) {
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	015b      	lsls	r3, r3, #5
 8004c4e:	4413      	add	r3, r2
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d106      	bne.n	8004c66 <TLB_Find+0x34>
      entry = tlb->entries + idx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015b      	lsls	r3, r3, #5
 8004c60:	4413      	add	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
      break;
 8004c64:	e007      	b.n	8004c76 <TLB_Find+0x44>
  for (uint32_t idx = 0; idx < tlb->num_pages; idx++) {
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d3e7      	bcc.n	8004c46 <TLB_Find+0x14>
    }
  }
  return entry;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <MultiMap_LowerBound>:

IndexedEntry* MultiMap_LowerBound(struct MultiMap* map, uint32_t npage) {
 8004c84:	b4b0      	push	{r4, r5, r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  IndexedEntry* entry = 0;
 8004c8e:	2100      	movs	r1, #0
 8004c90:	60f9      	str	r1, [r7, #12]
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8004c92:	2100      	movs	r1, #0
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	e017      	b.n	8004cc8 <MultiMap_LowerBound+0x44>
    if (map->entries[idx].index >= npage) {
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	6808      	ldr	r0, [r1, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	0149      	lsls	r1, r1, #5
 8004ca0:	4401      	add	r1, r0
 8004ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ca6:	683c      	ldr	r4, [r7, #0]
 8004ca8:	2500      	movs	r5, #0
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	4290      	cmp	r0, r2
 8004cb0:	4199      	sbcs	r1, r3
 8004cb2:	db06      	blt.n	8004cc2 <MultiMap_LowerBound+0x3e>
      entry = map->entries + idx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	015b      	lsls	r3, r3, #5
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
      break;
 8004cc0:	e007      	b.n	8004cd2 <MultiMap_LowerBound+0x4e>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	3101      	adds	r1, #1
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	6889      	ldr	r1, [r1, #8]
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	4288      	cmp	r0, r1
 8004cd0:	d3e2      	bcc.n	8004c98 <MultiMap_LowerBound+0x14>
    }
  }
  return entry;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bcb0      	pop	{r4, r5, r7}
 8004cdc:	4770      	bx	lr

08004cde <MultiMap_End>:

IndexedEntry* MultiMap_End(struct MultiMap* map) {
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  IndexedEntry* entry = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  return entry;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <MultiMap_Erase>:

void MultiMap_Erase(struct MultiMap* map, IndexedEntry* entry) {
 8004cf8:	b4b0      	push	{r4, r5, r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e031      	b.n	8004d6c <MultiMap_Erase+0x74>
    if ((map->entries + idx) == entry) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	015b      	lsls	r3, r3, #5
 8004d10:	4413      	add	r3, r2
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d126      	bne.n	8004d66 <MultiMap_Erase+0x6e>
      // NOTE: do not use memcpy due to overlap.
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	e017      	b.n	8004d50 <MultiMap_Erase+0x58>
        map->entries[src_idx - 1] = map->entries[src_idx];
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015b      	lsls	r3, r3, #5
 8004d28:	18d0      	adds	r0, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8004d34:	440b      	add	r3, r1
 8004d36:	015b      	lsls	r3, r3, #5
 8004d38:	4413      	add	r3, r2
 8004d3a:	461c      	mov	r4, r3
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for (uint32_t src_idx = idx + 1; src_idx < map->num_entries; src_idx++) {
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3e2      	bcc.n	8004d20 <MultiMap_Erase+0x28>
      }
      map->num_entries--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
      break;
 8004d64:	e008      	b.n	8004d78 <MultiMap_Erase+0x80>
  for (uint32_t idx = 0; idx < map->num_entries; idx++) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3c8      	bcc.n	8004d08 <MultiMap_Erase+0x10>
    }
  }
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bcb0      	pop	{r4, r5, r7}
 8004d80:	4770      	bx	lr
	...

08004d84 <MultiMap_Insert>:

void MultiMap_Insert(struct MultiMap* map, uint32_t npage, Page* p) {
 8004d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  CHECK_LE(map->num_entries + 1, map->max_entries, "invalid number of free pages.");
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d90b      	bls.n	8004db8 <MultiMap_Insert+0x34>
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <MultiMap_Insert+0x9c>)
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <MultiMap_Insert+0xa0>)
 8004da6:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <MultiMap_Insert+0xa4>)
 8004da8:	2170      	movs	r1, #112	; 0x70
 8004daa:	4820      	ldr	r0, [pc, #128]	; (8004e2c <MultiMap_Insert+0xa8>)
 8004dac:	f7fb fc02 	bl	80005b4 <TVMLogf>
 8004db0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004db4:	f7fb fdf1 	bl	800099a <TVMPlatformAbort>
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e01e      	b.n	8004dfe <MultiMap_Insert+0x7a>
    map->entries[map->num_entries].index = npage;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	015b      	lsls	r3, r3, #5
 8004dca:	4413      	add	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4690      	mov	r8, r2
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	e9c3 8900 	strd	r8, r9, [r3]
    map->entries[map->num_entries].page = *p;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	015b      	lsls	r3, r3, #5
 8004de2:	4413      	add	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	f103 0408 	add.w	r4, r3, #8
 8004dea:	4615      	mov	r5, r2
 8004dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004df4:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint32_t idx = map->num_entries; idx < (map->num_entries + npage); idx++) {
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4413      	add	r3, r2
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3d9      	bcc.n	8004dc0 <MultiMap_Insert+0x3c>
  }
  map->num_entries++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e20:	080067b0 	.word	0x080067b0
 8004e24:	08006678 	.word	0x08006678
 8004e28:	08006724 	.word	0x08006724
 8004e2c:	0800673c 	.word	0x0800673c

08004e30 <PageMemoryManager_Allocate>:
 * \brief Allocate memory from manager
 * \param size The size of memory
 * \return The virtual address
 */
tvm_crt_error_t PageMemoryManager_Allocate(MemoryManagerInterface* interface, size_t num_bytes,
                                           DLDevice dev, void** out_ptr) {
 8004e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e34:	b09e      	sub	sp, #120	; 0x78
 8004e36:	af04      	add	r7, sp, #16
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	e881 000c 	stmia.w	r1, {r2, r3}
  MemoryManager* mgr = (MemoryManager*)interface;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	667b      	str	r3, [r7, #100]	; 0x64

  *out_ptr = 0;
 8004e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
  PageTable* ptable = &(mgr->ptable);
 8004e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e50:	330c      	adds	r3, #12
 8004e52:	663b      	str	r3, [r7, #96]	; 0x60
  tvm_index_t npage = (num_bytes + ptable->page_size_bytes - 1) / ptable->page_size_bytes;
 8004e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	2200      	movs	r2, #0
 8004e68:	4698      	mov	r8, r3
 8004e6a:	4691      	mov	r9, r2
 8004e6c:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58

  MultiMap* free_map = &(mgr->free_map);
 8004e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e72:	3338      	adds	r3, #56	; 0x38
 8004e74:	657b      	str	r3, [r7, #84]	; 0x54
  IndexedEntry* it = free_map->lower_bound(free_map, npage);
 8004e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004e80:	4798      	blx	r3
 8004e82:	6538      	str	r0, [r7, #80]	; 0x50
  tvm_index_t start = 0;
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  if (it != free_map->end(free_map)) {
 8004e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004e96:	4798      	blx	r3
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01c      	beq.n	8004eda <PageMemoryManager_Allocate+0xaa>
    Page p = it->page;
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004ea6:	f103 0508 	add.w	r5, r3, #8
 8004eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004eb2:	e884 0003 	stmia.w	r4, {r0, r1}
    free_map->erase(free_map, it);
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ebc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ebe:	4798      	blx	r3
    *out_ptr = p.data;
 8004ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ec6:	601a      	str	r2, [r3, #0]
    start = p.ptable_begin;
 8004ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ecc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    npage = p.num_pages;
 8004ed0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ed4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004ed8:	e03a      	b.n	8004f50 <PageMemoryManager_Allocate+0x120>
  } else {
    start = ptable->num_pages;
 8004eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	4615      	mov	r5, r2
 8004ee4:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    if ((unsigned)(start + npage) > ptable->max_pages) {
 8004ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eec:	441a      	add	r2, r3
 8004eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d902      	bls.n	8004efc <PageMemoryManager_Allocate+0xcc>
#if TVM_CRT_DEBUG > 1
      TVMLogf("insufficient memory, start=%" PRId32 ", npage=%" PRId32 ", total=%" PRId32 " / %zu",
              (int32_t)start, (int32_t)npage, (int32_t)(start + npage), mgr->pmap.max_pages);
#endif
      return kTvmErrorPlatformNoMemory;
 8004ef6:	f240 5303 	movw	r3, #1283	; 0x503
 8004efa:	e02f      	b.n	8004f5c <PageMemoryManager_Allocate+0x12c>
    }
    /* insert page entry */
    Page p = PageCreate(ptable->memory_pool, ptable->page_size_bytes, start, npage);
 8004efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f02:	685c      	ldr	r4, [r3, #4]
 8004f04:	f107 0010 	add.w	r0, r7, #16
 8004f08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f14:	e9cd 2300 	strd	r2, r3, [sp]
 8004f18:	4622      	mov	r2, r4
 8004f1a:	f7ff fddf 	bl	8004adc <PageCreate>
    ptable->resize(ptable, start + npage, &p);
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f26:	4411      	add	r1, r2
 8004f28:	f107 0210 	add.w	r2, r7, #16
 8004f2c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004f2e:	4798      	blx	r3
    *out_ptr = p.data;
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f36:	601a      	str	r2, [r3, #0]
    TLB* pmap = &(mgr->pmap);
 8004f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3a:	3324      	adds	r3, #36	; 0x24
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
    pmap->set(pmap, *out_ptr, &p);
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f46:	6811      	ldr	r1, [r2, #0]
 8004f48:	f107 0210 	add.w	r2, r7, #16
 8004f4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f4e:	4798      	blx	r3
  }
  mgr->interface.vleak_size++;
 8004f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f58:	609a      	str	r2, [r3, #8]
#if TVM_CRT_DEBUG > 1
  TVMLogf("allocate: addr=%p, start=%" PRId64 "/%zu, npage=%" PRId64 ", vleak=%d\n", data, start,
          ptable->max_pages, npage, mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3768      	adds	r7, #104	; 0x68
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004f68 <PageMemoryManager_Free>:
 * \param interface Pointer to this structure.
 * \param ptr A pointer returned from TVMPlatformMemoryAllocate which should be free'd.
 * \param dev Execution device passed to TVMPlatformMemoryAllocate. Fixed to {kDLCPU, 0}.
 * \return kTvmErrorNoError if successful; a descriptive error code otherwise.
 */
tvm_crt_error_t PageMemoryManager_Free(MemoryManagerInterface* interface, void* ptr, DLDevice dev) {
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b08d      	sub	sp, #52	; 0x34
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4639      	mov	r1, r7
 8004f74:	e881 000c 	stmia.w	r1, {r2, r3}
  MemoryManager* mgr = (MemoryManager*)interface;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

  TLB* pmap = &(mgr->pmap);
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	623b      	str	r3, [r7, #32]
  CHECK_NE(pmap->num_pages, 0, "invalid translation look-aside buffer.");
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10c      	bne.n	8004fa4 <PageMemoryManager_Free+0x3c>
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <PageMemoryManager_Free+0x9c>)
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <PageMemoryManager_Free+0xa0>)
 8004f90:	4a1e      	ldr	r2, [pc, #120]	; (800500c <PageMemoryManager_Free+0xa4>)
 8004f92:	f240 1109 	movw	r1, #265	; 0x109
 8004f96:	481e      	ldr	r0, [pc, #120]	; (8005010 <PageMemoryManager_Free+0xa8>)
 8004f98:	f7fb fb0c 	bl	80005b4 <TVMLogf>
 8004f9c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004fa0:	f7fb fcfb 	bl	800099a <TVMPlatformAbort>
  PageEntry* entry = pmap->find(pmap, (uint8_t*)ptr);  // NOLINT(*)
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6a38      	ldr	r0, [r7, #32]
 8004fac:	4798      	blx	r3
 8004fae:	61f8      	str	r0, [r7, #28]
  CHECK_NE(entry, 0, "no valid page entry found.");
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10c      	bne.n	8004fd0 <PageMemoryManager_Free+0x68>
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <PageMemoryManager_Free+0x9c>)
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <PageMemoryManager_Free+0xa0>)
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <PageMemoryManager_Free+0xac>)
 8004fbe:	f240 110b 	movw	r1, #267	; 0x10b
 8004fc2:	4815      	ldr	r0, [pc, #84]	; (8005018 <PageMemoryManager_Free+0xb0>)
 8004fc4:	f7fb faf6 	bl	80005b4 <TVMLogf>
 8004fc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004fcc:	f7fb fce5 	bl	800099a <TVMPlatformAbort>
  Page* p = &(entry->page);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	61bb      	str	r3, [r7, #24]
  MultiMap* free_map = &(mgr->free_map);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	3338      	adds	r3, #56	; 0x38
 8004fda:	617b      	str	r3, [r7, #20]
  free_map->insert(free_map, p->num_pages, p);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	699c      	ldr	r4, [r3, #24]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4619      	mov	r1, r3
 8004fec:	6978      	ldr	r0, [r7, #20]
 8004fee:	47a0      	blx	r4
  mgr->interface.vleak_size--;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	609a      	str	r2, [r3, #8]
#if TVM_CRT_DEBUG > 1
  TVMLogf("release: addr=%p, start=%" PRId64 "/%zu, npage=%zu, vleak=%d", ptr,
          entry->page.ptable_begin, mgr->ptable.max_pages, entry->page.num_pages,
          mgr->interface.vleak_size);
#endif  // TVM_CRT_DEBUG
  return kTvmErrorNoError;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	372c      	adds	r7, #44	; 0x2c
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}
 8005004:	08006858 	.word	0x08006858
 8005008:	080067c4 	.word	0x080067c4
 800500c:	080067c8 	.word	0x080067c8
 8005010:	080067d8 	.word	0x080067d8
 8005014:	0800685c 	.word	0x0800685c
 8005018:	08006864 	.word	0x08006864

0800501c <PageMemoryManagerCreate>:

tvm_crt_error_t PageMemoryManagerCreate(MemoryManagerInterface** interface, uint8_t* memory_pool,
                                        size_t memory_pool_size_bytes,
                                        size_t page_size_bytes_log2) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  memset(memory_pool, 0, memory_pool_size_bytes);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f000 f96b 	bl	800530a <memset>

  // Allocate enough space for MAX_PAGES.
  size_t page_size_bytes = 1 << page_size_bytes_log2;
 8005034:	2201      	movs	r2, #1
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
  size_t metadata_bytes_per_page = sizeof(Page) + sizeof(PageEntry) + sizeof(IndexedEntry);
 800503e:	2358      	movs	r3, #88	; 0x58
 8005040:	623b      	str	r3, [r7, #32]
  size_t bytes_needed_per_page = page_size_bytes + metadata_bytes_per_page;
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	4413      	add	r3, r2
 8005048:	61fb      	str	r3, [r7, #28]
  size_t num_pages = (memory_pool_size_bytes - sizeof(MemoryManager)) / bytes_needed_per_page;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1a3 0254 	sub.w	r2, r3, #84	; 0x54
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	61bb      	str	r3, [r7, #24]

  uint8_t* metadata_cursor = memory_pool + (num_pages << page_size_bytes_log2);
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	4413      	add	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
  MemoryManager* manager = (MemoryManager*)metadata_cursor;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	613b      	str	r3, [r7, #16]
  *interface = &manager->interface;
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]
  /* handle MemoryManager member functions */
  manager->interface.Allocate = PageMemoryManager_Allocate;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <PageMemoryManagerCreate+0x10c>)
 8005074:	601a      	str	r2, [r3, #0]
  //  manager->Realloc = MemoryManager_Reallocate;
  manager->interface.Free = PageMemoryManager_Free;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4a2c      	ldr	r2, [pc, #176]	; (800512c <PageMemoryManagerCreate+0x110>)
 800507a:	605a      	str	r2, [r3, #4]

  metadata_cursor += sizeof(MemoryManager);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3354      	adds	r3, #84	; 0x54
 8005080:	617b      	str	r3, [r7, #20]

  manager->interface.Allocate = PageMemoryManager_Allocate;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4a28      	ldr	r2, [pc, #160]	; (8005128 <PageMemoryManagerCreate+0x10c>)
 8005086:	601a      	str	r2, [r3, #0]
  manager->interface.Free = PageMemoryManager_Free;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <PageMemoryManagerCreate+0x110>)
 800508c:	605a      	str	r2, [r3, #4]
  manager->ptable.memory_pool = memory_pool;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	60da      	str	r2, [r3, #12]

  /* handle PageTable member functions */
  manager->ptable.page = (Page*)metadata_cursor;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	615a      	str	r2, [r3, #20]
  metadata_cursor += sizeof(Page) * num_pages;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	461a      	mov	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  manager->ptable.page_size_bytes = (1 << page_size_bytes_log2);
 80050ac:	2201      	movs	r2, #1
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	611a      	str	r2, [r3, #16]
  manager->ptable.max_pages = num_pages;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	619a      	str	r2, [r3, #24]
  manager->ptable.resize = PageTable_Resize;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <PageMemoryManagerCreate+0x114>)
 80050c4:	621a      	str	r2, [r3, #32]

  /* handle TLB member functions */
  manager->pmap.entries = (PageEntry*)metadata_cursor;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
  metadata_cursor += sizeof(PageEntry) * num_pages;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	015b      	lsls	r3, r3, #5
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
  manager->pmap.max_pages = num_pages;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  manager->pmap.num_pages = 0;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2200      	movs	r2, #0
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

  manager->pmap.set = TLB_Set;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <PageMemoryManagerCreate+0x118>)
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  manager->pmap.find = TLB_Find;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <PageMemoryManagerCreate+0x11c>)
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34
  /* handle free_map member functions */
  manager->free_map.entries = (IndexedEntry*)metadata_cursor;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
  metadata_cursor += sizeof(IndexedEntry) * num_pages;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
  manager->free_map.max_entries = num_pages;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	63da      	str	r2, [r3, #60]	; 0x3c
  manager->free_map.lower_bound = MultiMap_LowerBound;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4a0d      	ldr	r2, [pc, #52]	; (800513c <PageMemoryManagerCreate+0x120>)
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
  manager->free_map.end = MultiMap_End;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4a0c      	ldr	r2, [pc, #48]	; (8005140 <PageMemoryManagerCreate+0x124>)
 800510e:	649a      	str	r2, [r3, #72]	; 0x48
  manager->free_map.erase = MultiMap_Erase;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <PageMemoryManagerCreate+0x128>)
 8005114:	64da      	str	r2, [r3, #76]	; 0x4c
  manager->free_map.insert = MultiMap_Insert;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <PageMemoryManagerCreate+0x12c>)
 800511a:	651a      	str	r2, [r3, #80]	; 0x50

  return kTvmErrorNoError;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	08004e31 	.word	0x08004e31
 800512c:	08004f69 	.word	0x08004f69
 8005130:	08004b25 	.word	0x08004b25
 8005134:	08004bb5 	.word	0x08004bb5
 8005138:	08004c33 	.word	0x08004c33
 800513c:	08004c85 	.word	0x08004c85
 8005140:	08004cdf 	.word	0x08004cdf
 8005144:	08004cf9 	.word	0x08004cf9
 8005148:	08004d85 	.word	0x08004d85

0800514c <__assert_func>:
 800514c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800514e:	4614      	mov	r4, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <__assert_func+0x2c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4605      	mov	r5, r0
 8005158:	68d8      	ldr	r0, [r3, #12]
 800515a:	b14c      	cbz	r4, 8005170 <__assert_func+0x24>
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <__assert_func+0x30>)
 800515e:	9100      	str	r1, [sp, #0]
 8005160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005164:	4906      	ldr	r1, [pc, #24]	; (8005180 <__assert_func+0x34>)
 8005166:	462b      	mov	r3, r5
 8005168:	f000 f828 	bl	80051bc <fiprintf>
 800516c:	f000 fc82 	bl	8005a74 <abort>
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <__assert_func+0x38>)
 8005172:	461c      	mov	r4, r3
 8005174:	e7f3      	b.n	800515e <__assert_func+0x12>
 8005176:	bf00      	nop
 8005178:	20000014 	.word	0x20000014
 800517c:	08049529 	.word	0x08049529
 8005180:	08049536 	.word	0x08049536
 8005184:	08049564 	.word	0x08049564

08005188 <__errno>:
 8005188:	4b01      	ldr	r3, [pc, #4]	; (8005190 <__errno+0x8>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000014 	.word	0x20000014

08005194 <exit>:
 8005194:	b508      	push	{r3, lr}
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <exit+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	b113      	cbz	r3, 80051a2 <exit+0xe>
 800519c:	2100      	movs	r1, #0
 800519e:	f3af 8000 	nop.w
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <exit+0x24>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051a8:	b103      	cbz	r3, 80051ac <exit+0x18>
 80051aa:	4798      	blx	r3
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7fb fe4b 	bl	8000e48 <_exit>
 80051b2:	bf00      	nop
 80051b4:	00000000 	.word	0x00000000
 80051b8:	08049568 	.word	0x08049568

080051bc <fiprintf>:
 80051bc:	b40e      	push	{r1, r2, r3}
 80051be:	b503      	push	{r0, r1, lr}
 80051c0:	4601      	mov	r1, r0
 80051c2:	ab03      	add	r3, sp, #12
 80051c4:	4805      	ldr	r0, [pc, #20]	; (80051dc <fiprintf+0x20>)
 80051c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	f000 f8cd 	bl	800536c <_vfiprintf_r>
 80051d2:	b002      	add	sp, #8
 80051d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d8:	b003      	add	sp, #12
 80051da:	4770      	bx	lr
 80051dc:	20000014 	.word	0x20000014

080051e0 <_fwrite_r>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	9c08      	ldr	r4, [sp, #32]
 80051e6:	468a      	mov	sl, r1
 80051e8:	4690      	mov	r8, r2
 80051ea:	fb02 f903 	mul.w	r9, r2, r3
 80051ee:	4605      	mov	r5, r0
 80051f0:	b118      	cbz	r0, 80051fa <_fwrite_r+0x1a>
 80051f2:	6983      	ldr	r3, [r0, #24]
 80051f4:	b90b      	cbnz	r3, 80051fa <_fwrite_r+0x1a>
 80051f6:	f000 fd5f 	bl	8005cb8 <__sinit>
 80051fa:	4b26      	ldr	r3, [pc, #152]	; (8005294 <_fwrite_r+0xb4>)
 80051fc:	429c      	cmp	r4, r3
 80051fe:	d123      	bne.n	8005248 <_fwrite_r+0x68>
 8005200:	686c      	ldr	r4, [r5, #4]
 8005202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005204:	07de      	lsls	r6, r3, #31
 8005206:	d405      	bmi.n	8005214 <_fwrite_r+0x34>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	0598      	lsls	r0, r3, #22
 800520c:	d402      	bmi.n	8005214 <_fwrite_r+0x34>
 800520e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005210:	f000 f879 	bl	8005306 <__retarget_lock_acquire_recursive>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	0719      	lsls	r1, r3, #28
 8005218:	d520      	bpl.n	800525c <_fwrite_r+0x7c>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	b1f3      	cbz	r3, 800525c <_fwrite_r+0x7c>
 800521e:	2600      	movs	r6, #0
 8005220:	454e      	cmp	r6, r9
 8005222:	d029      	beq.n	8005278 <_fwrite_r+0x98>
 8005224:	68a7      	ldr	r7, [r4, #8]
 8005226:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800522a:	3f01      	subs	r7, #1
 800522c:	2f00      	cmp	r7, #0
 800522e:	60a7      	str	r7, [r4, #8]
 8005230:	da04      	bge.n	800523c <_fwrite_r+0x5c>
 8005232:	69a3      	ldr	r3, [r4, #24]
 8005234:	429f      	cmp	r7, r3
 8005236:	db19      	blt.n	800526c <_fwrite_r+0x8c>
 8005238:	290a      	cmp	r1, #10
 800523a:	d017      	beq.n	800526c <_fwrite_r+0x8c>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	6022      	str	r2, [r4, #0]
 8005242:	7019      	strb	r1, [r3, #0]
 8005244:	3601      	adds	r6, #1
 8005246:	e7eb      	b.n	8005220 <_fwrite_r+0x40>
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <_fwrite_r+0xb8>)
 800524a:	429c      	cmp	r4, r3
 800524c:	d101      	bne.n	8005252 <_fwrite_r+0x72>
 800524e:	68ac      	ldr	r4, [r5, #8]
 8005250:	e7d7      	b.n	8005202 <_fwrite_r+0x22>
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <_fwrite_r+0xbc>)
 8005254:	429c      	cmp	r4, r3
 8005256:	bf08      	it	eq
 8005258:	68ec      	ldreq	r4, [r5, #12]
 800525a:	e7d2      	b.n	8005202 <_fwrite_r+0x22>
 800525c:	4621      	mov	r1, r4
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fb9a 	bl	8005998 <__swsetup_r>
 8005264:	2800      	cmp	r0, #0
 8005266:	d0da      	beq.n	800521e <_fwrite_r+0x3e>
 8005268:	2600      	movs	r6, #0
 800526a:	e005      	b.n	8005278 <_fwrite_r+0x98>
 800526c:	4622      	mov	r2, r4
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fb40 	bl	80058f4 <__swbuf_r>
 8005274:	3001      	adds	r0, #1
 8005276:	d1e5      	bne.n	8005244 <_fwrite_r+0x64>
 8005278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527a:	07da      	lsls	r2, r3, #31
 800527c:	d405      	bmi.n	800528a <_fwrite_r+0xaa>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	059b      	lsls	r3, r3, #22
 8005282:	d402      	bmi.n	800528a <_fwrite_r+0xaa>
 8005284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005286:	f000 f83f 	bl	8005308 <__retarget_lock_release_recursive>
 800528a:	fbb6 f0f8 	udiv	r0, r6, r8
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	bf00      	nop
 8005294:	080495c0 	.word	0x080495c0
 8005298:	080495e0 	.word	0x080495e0
 800529c:	080495a0 	.word	0x080495a0

080052a0 <fwrite>:
 80052a0:	b507      	push	{r0, r1, r2, lr}
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	460a      	mov	r2, r1
 80052a8:	4601      	mov	r1, r0
 80052aa:	4803      	ldr	r0, [pc, #12]	; (80052b8 <fwrite+0x18>)
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f7ff ff97 	bl	80051e0 <_fwrite_r>
 80052b2:	b003      	add	sp, #12
 80052b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052b8:	20000014 	.word	0x20000014

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	; (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	; (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	; (8005300 <__libc_init_array+0x44>)
 80052d0:	f001 f938 	bl	8006544 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08049620 	.word	0x08049620
 80052f8:	08049620 	.word	0x08049620
 80052fc:	08049620 	.word	0x08049620
 8005300:	08049624 	.word	0x08049624

08005304 <__retarget_lock_init_recursive>:
 8005304:	4770      	bx	lr

08005306 <__retarget_lock_acquire_recursive>:
 8005306:	4770      	bx	lr

08005308 <__retarget_lock_release_recursive>:
 8005308:	4770      	bx	lr

0800530a <memset>:
 800530a:	4402      	add	r2, r0
 800530c:	4603      	mov	r3, r0
 800530e:	4293      	cmp	r3, r2
 8005310:	d100      	bne.n	8005314 <memset+0xa>
 8005312:	4770      	bx	lr
 8005314:	f803 1b01 	strb.w	r1, [r3], #1
 8005318:	e7f9      	b.n	800530e <memset+0x4>

0800531a <__sfputc_r>:
 800531a:	6893      	ldr	r3, [r2, #8]
 800531c:	3b01      	subs	r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	b410      	push	{r4}
 8005322:	6093      	str	r3, [r2, #8]
 8005324:	da08      	bge.n	8005338 <__sfputc_r+0x1e>
 8005326:	6994      	ldr	r4, [r2, #24]
 8005328:	42a3      	cmp	r3, r4
 800532a:	db01      	blt.n	8005330 <__sfputc_r+0x16>
 800532c:	290a      	cmp	r1, #10
 800532e:	d103      	bne.n	8005338 <__sfputc_r+0x1e>
 8005330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005334:	f000 bade 	b.w	80058f4 <__swbuf_r>
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	1c58      	adds	r0, r3, #1
 800533c:	6010      	str	r0, [r2, #0]
 800533e:	7019      	strb	r1, [r3, #0]
 8005340:	4608      	mov	r0, r1
 8005342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005346:	4770      	bx	lr

08005348 <__sfputs_r>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	4614      	mov	r4, r2
 8005350:	18d5      	adds	r5, r2, r3
 8005352:	42ac      	cmp	r4, r5
 8005354:	d101      	bne.n	800535a <__sfputs_r+0x12>
 8005356:	2000      	movs	r0, #0
 8005358:	e007      	b.n	800536a <__sfputs_r+0x22>
 800535a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535e:	463a      	mov	r2, r7
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffda 	bl	800531a <__sfputc_r>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d1f3      	bne.n	8005352 <__sfputs_r+0xa>
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800536c <_vfiprintf_r>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	460d      	mov	r5, r1
 8005372:	b09d      	sub	sp, #116	; 0x74
 8005374:	4614      	mov	r4, r2
 8005376:	4698      	mov	r8, r3
 8005378:	4606      	mov	r6, r0
 800537a:	b118      	cbz	r0, 8005384 <_vfiprintf_r+0x18>
 800537c:	6983      	ldr	r3, [r0, #24]
 800537e:	b90b      	cbnz	r3, 8005384 <_vfiprintf_r+0x18>
 8005380:	f000 fc9a 	bl	8005cb8 <__sinit>
 8005384:	4b89      	ldr	r3, [pc, #548]	; (80055ac <_vfiprintf_r+0x240>)
 8005386:	429d      	cmp	r5, r3
 8005388:	d11b      	bne.n	80053c2 <_vfiprintf_r+0x56>
 800538a:	6875      	ldr	r5, [r6, #4]
 800538c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800538e:	07d9      	lsls	r1, r3, #31
 8005390:	d405      	bmi.n	800539e <_vfiprintf_r+0x32>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	059a      	lsls	r2, r3, #22
 8005396:	d402      	bmi.n	800539e <_vfiprintf_r+0x32>
 8005398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800539a:	f7ff ffb4 	bl	8005306 <__retarget_lock_acquire_recursive>
 800539e:	89ab      	ldrh	r3, [r5, #12]
 80053a0:	071b      	lsls	r3, r3, #28
 80053a2:	d501      	bpl.n	80053a8 <_vfiprintf_r+0x3c>
 80053a4:	692b      	ldr	r3, [r5, #16]
 80053a6:	b9eb      	cbnz	r3, 80053e4 <_vfiprintf_r+0x78>
 80053a8:	4629      	mov	r1, r5
 80053aa:	4630      	mov	r0, r6
 80053ac:	f000 faf4 	bl	8005998 <__swsetup_r>
 80053b0:	b1c0      	cbz	r0, 80053e4 <_vfiprintf_r+0x78>
 80053b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b4:	07dc      	lsls	r4, r3, #31
 80053b6:	d50e      	bpl.n	80053d6 <_vfiprintf_r+0x6a>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	b01d      	add	sp, #116	; 0x74
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c2:	4b7b      	ldr	r3, [pc, #492]	; (80055b0 <_vfiprintf_r+0x244>)
 80053c4:	429d      	cmp	r5, r3
 80053c6:	d101      	bne.n	80053cc <_vfiprintf_r+0x60>
 80053c8:	68b5      	ldr	r5, [r6, #8]
 80053ca:	e7df      	b.n	800538c <_vfiprintf_r+0x20>
 80053cc:	4b79      	ldr	r3, [pc, #484]	; (80055b4 <_vfiprintf_r+0x248>)
 80053ce:	429d      	cmp	r5, r3
 80053d0:	bf08      	it	eq
 80053d2:	68f5      	ldreq	r5, [r6, #12]
 80053d4:	e7da      	b.n	800538c <_vfiprintf_r+0x20>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	0598      	lsls	r0, r3, #22
 80053da:	d4ed      	bmi.n	80053b8 <_vfiprintf_r+0x4c>
 80053dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053de:	f7ff ff93 	bl	8005308 <__retarget_lock_release_recursive>
 80053e2:	e7e9      	b.n	80053b8 <_vfiprintf_r+0x4c>
 80053e4:	2300      	movs	r3, #0
 80053e6:	9309      	str	r3, [sp, #36]	; 0x24
 80053e8:	2320      	movs	r3, #32
 80053ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f2:	2330      	movs	r3, #48	; 0x30
 80053f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055b8 <_vfiprintf_r+0x24c>
 80053f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053fc:	f04f 0901 	mov.w	r9, #1
 8005400:	4623      	mov	r3, r4
 8005402:	469a      	mov	sl, r3
 8005404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005408:	b10a      	cbz	r2, 800540e <_vfiprintf_r+0xa2>
 800540a:	2a25      	cmp	r2, #37	; 0x25
 800540c:	d1f9      	bne.n	8005402 <_vfiprintf_r+0x96>
 800540e:	ebba 0b04 	subs.w	fp, sl, r4
 8005412:	d00b      	beq.n	800542c <_vfiprintf_r+0xc0>
 8005414:	465b      	mov	r3, fp
 8005416:	4622      	mov	r2, r4
 8005418:	4629      	mov	r1, r5
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ff94 	bl	8005348 <__sfputs_r>
 8005420:	3001      	adds	r0, #1
 8005422:	f000 80aa 	beq.w	800557a <_vfiprintf_r+0x20e>
 8005426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005428:	445a      	add	r2, fp
 800542a:	9209      	str	r2, [sp, #36]	; 0x24
 800542c:	f89a 3000 	ldrb.w	r3, [sl]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80a2 	beq.w	800557a <_vfiprintf_r+0x20e>
 8005436:	2300      	movs	r3, #0
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005440:	f10a 0a01 	add.w	sl, sl, #1
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	9307      	str	r3, [sp, #28]
 8005448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800544c:	931a      	str	r3, [sp, #104]	; 0x68
 800544e:	4654      	mov	r4, sl
 8005450:	2205      	movs	r2, #5
 8005452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005456:	4858      	ldr	r0, [pc, #352]	; (80055b8 <_vfiprintf_r+0x24c>)
 8005458:	f7fa feda 	bl	8000210 <memchr>
 800545c:	9a04      	ldr	r2, [sp, #16]
 800545e:	b9d8      	cbnz	r0, 8005498 <_vfiprintf_r+0x12c>
 8005460:	06d1      	lsls	r1, r2, #27
 8005462:	bf44      	itt	mi
 8005464:	2320      	movmi	r3, #32
 8005466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546a:	0713      	lsls	r3, r2, #28
 800546c:	bf44      	itt	mi
 800546e:	232b      	movmi	r3, #43	; 0x2b
 8005470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005474:	f89a 3000 	ldrb.w	r3, [sl]
 8005478:	2b2a      	cmp	r3, #42	; 0x2a
 800547a:	d015      	beq.n	80054a8 <_vfiprintf_r+0x13c>
 800547c:	9a07      	ldr	r2, [sp, #28]
 800547e:	4654      	mov	r4, sl
 8005480:	2000      	movs	r0, #0
 8005482:	f04f 0c0a 	mov.w	ip, #10
 8005486:	4621      	mov	r1, r4
 8005488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548c:	3b30      	subs	r3, #48	; 0x30
 800548e:	2b09      	cmp	r3, #9
 8005490:	d94e      	bls.n	8005530 <_vfiprintf_r+0x1c4>
 8005492:	b1b0      	cbz	r0, 80054c2 <_vfiprintf_r+0x156>
 8005494:	9207      	str	r2, [sp, #28]
 8005496:	e014      	b.n	80054c2 <_vfiprintf_r+0x156>
 8005498:	eba0 0308 	sub.w	r3, r0, r8
 800549c:	fa09 f303 	lsl.w	r3, r9, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	46a2      	mov	sl, r4
 80054a6:	e7d2      	b.n	800544e <_vfiprintf_r+0xe2>
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	1d19      	adds	r1, r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	9103      	str	r1, [sp, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bfbb      	ittet	lt
 80054b4:	425b      	neglt	r3, r3
 80054b6:	f042 0202 	orrlt.w	r2, r2, #2
 80054ba:	9307      	strge	r3, [sp, #28]
 80054bc:	9307      	strlt	r3, [sp, #28]
 80054be:	bfb8      	it	lt
 80054c0:	9204      	strlt	r2, [sp, #16]
 80054c2:	7823      	ldrb	r3, [r4, #0]
 80054c4:	2b2e      	cmp	r3, #46	; 0x2e
 80054c6:	d10c      	bne.n	80054e2 <_vfiprintf_r+0x176>
 80054c8:	7863      	ldrb	r3, [r4, #1]
 80054ca:	2b2a      	cmp	r3, #42	; 0x2a
 80054cc:	d135      	bne.n	800553a <_vfiprintf_r+0x1ce>
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	1d1a      	adds	r2, r3, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	9203      	str	r2, [sp, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bfb8      	it	lt
 80054da:	f04f 33ff 	movlt.w	r3, #4294967295
 80054de:	3402      	adds	r4, #2
 80054e0:	9305      	str	r3, [sp, #20]
 80054e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055c8 <_vfiprintf_r+0x25c>
 80054e6:	7821      	ldrb	r1, [r4, #0]
 80054e8:	2203      	movs	r2, #3
 80054ea:	4650      	mov	r0, sl
 80054ec:	f7fa fe90 	bl	8000210 <memchr>
 80054f0:	b140      	cbz	r0, 8005504 <_vfiprintf_r+0x198>
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	eba0 000a 	sub.w	r0, r0, sl
 80054f8:	fa03 f000 	lsl.w	r0, r3, r0
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	4303      	orrs	r3, r0
 8005500:	3401      	adds	r4, #1
 8005502:	9304      	str	r3, [sp, #16]
 8005504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005508:	482c      	ldr	r0, [pc, #176]	; (80055bc <_vfiprintf_r+0x250>)
 800550a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800550e:	2206      	movs	r2, #6
 8005510:	f7fa fe7e 	bl	8000210 <memchr>
 8005514:	2800      	cmp	r0, #0
 8005516:	d03f      	beq.n	8005598 <_vfiprintf_r+0x22c>
 8005518:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <_vfiprintf_r+0x254>)
 800551a:	bb1b      	cbnz	r3, 8005564 <_vfiprintf_r+0x1f8>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	3307      	adds	r3, #7
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	3308      	adds	r3, #8
 8005526:	9303      	str	r3, [sp, #12]
 8005528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552a:	443b      	add	r3, r7
 800552c:	9309      	str	r3, [sp, #36]	; 0x24
 800552e:	e767      	b.n	8005400 <_vfiprintf_r+0x94>
 8005530:	fb0c 3202 	mla	r2, ip, r2, r3
 8005534:	460c      	mov	r4, r1
 8005536:	2001      	movs	r0, #1
 8005538:	e7a5      	b.n	8005486 <_vfiprintf_r+0x11a>
 800553a:	2300      	movs	r3, #0
 800553c:	3401      	adds	r4, #1
 800553e:	9305      	str	r3, [sp, #20]
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0c0a 	mov.w	ip, #10
 8005546:	4620      	mov	r0, r4
 8005548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800554c:	3a30      	subs	r2, #48	; 0x30
 800554e:	2a09      	cmp	r2, #9
 8005550:	d903      	bls.n	800555a <_vfiprintf_r+0x1ee>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0c5      	beq.n	80054e2 <_vfiprintf_r+0x176>
 8005556:	9105      	str	r1, [sp, #20]
 8005558:	e7c3      	b.n	80054e2 <_vfiprintf_r+0x176>
 800555a:	fb0c 2101 	mla	r1, ip, r1, r2
 800555e:	4604      	mov	r4, r0
 8005560:	2301      	movs	r3, #1
 8005562:	e7f0      	b.n	8005546 <_vfiprintf_r+0x1da>
 8005564:	ab03      	add	r3, sp, #12
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	462a      	mov	r2, r5
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <_vfiprintf_r+0x258>)
 800556c:	a904      	add	r1, sp, #16
 800556e:	4630      	mov	r0, r6
 8005570:	f3af 8000 	nop.w
 8005574:	4607      	mov	r7, r0
 8005576:	1c78      	adds	r0, r7, #1
 8005578:	d1d6      	bne.n	8005528 <_vfiprintf_r+0x1bc>
 800557a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800557c:	07d9      	lsls	r1, r3, #31
 800557e:	d405      	bmi.n	800558c <_vfiprintf_r+0x220>
 8005580:	89ab      	ldrh	r3, [r5, #12]
 8005582:	059a      	lsls	r2, r3, #22
 8005584:	d402      	bmi.n	800558c <_vfiprintf_r+0x220>
 8005586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005588:	f7ff febe 	bl	8005308 <__retarget_lock_release_recursive>
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	065b      	lsls	r3, r3, #25
 8005590:	f53f af12 	bmi.w	80053b8 <_vfiprintf_r+0x4c>
 8005594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005596:	e711      	b.n	80053bc <_vfiprintf_r+0x50>
 8005598:	ab03      	add	r3, sp, #12
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	462a      	mov	r2, r5
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <_vfiprintf_r+0x258>)
 80055a0:	a904      	add	r1, sp, #16
 80055a2:	4630      	mov	r0, r6
 80055a4:	f000 f880 	bl	80056a8 <_printf_i>
 80055a8:	e7e4      	b.n	8005574 <_vfiprintf_r+0x208>
 80055aa:	bf00      	nop
 80055ac:	080495c0 	.word	0x080495c0
 80055b0:	080495e0 	.word	0x080495e0
 80055b4:	080495a0 	.word	0x080495a0
 80055b8:	0804956c 	.word	0x0804956c
 80055bc:	08049576 	.word	0x08049576
 80055c0:	00000000 	.word	0x00000000
 80055c4:	08005349 	.word	0x08005349
 80055c8:	08049572 	.word	0x08049572

080055cc <_printf_common>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	4616      	mov	r6, r2
 80055d2:	4699      	mov	r9, r3
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	690b      	ldr	r3, [r1, #16]
 80055d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055dc:	4293      	cmp	r3, r2
 80055de:	bfb8      	it	lt
 80055e0:	4613      	movlt	r3, r2
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e8:	4607      	mov	r7, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	b10a      	cbz	r2, 80055f2 <_printf_common+0x26>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	0699      	lsls	r1, r3, #26
 80055f6:	bf42      	ittt	mi
 80055f8:	6833      	ldrmi	r3, [r6, #0]
 80055fa:	3302      	addmi	r3, #2
 80055fc:	6033      	strmi	r3, [r6, #0]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d106      	bne.n	8005614 <_printf_common+0x48>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	6832      	ldr	r2, [r6, #0]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ab      	cmp	r3, r5
 8005612:	dc26      	bgt.n	8005662 <_printf_common+0x96>
 8005614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005618:	1e13      	subs	r3, r2, #0
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	2301      	movne	r3, #1
 8005620:	0692      	lsls	r2, r2, #26
 8005622:	d42b      	bmi.n	800567c <_printf_common+0xb0>
 8005624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005628:	4649      	mov	r1, r9
 800562a:	4638      	mov	r0, r7
 800562c:	47c0      	blx	r8
 800562e:	3001      	adds	r0, #1
 8005630:	d01e      	beq.n	8005670 <_printf_common+0xa4>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	68e5      	ldr	r5, [r4, #12]
 8005636:	6832      	ldr	r2, [r6, #0]
 8005638:	f003 0306 	and.w	r3, r3, #6
 800563c:	2b04      	cmp	r3, #4
 800563e:	bf08      	it	eq
 8005640:	1aad      	subeq	r5, r5, r2
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	bf0c      	ite	eq
 8005648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800564c:	2500      	movne	r5, #0
 800564e:	4293      	cmp	r3, r2
 8005650:	bfc4      	itt	gt
 8005652:	1a9b      	subgt	r3, r3, r2
 8005654:	18ed      	addgt	r5, r5, r3
 8005656:	2600      	movs	r6, #0
 8005658:	341a      	adds	r4, #26
 800565a:	42b5      	cmp	r5, r6
 800565c:	d11a      	bne.n	8005694 <_printf_common+0xc8>
 800565e:	2000      	movs	r0, #0
 8005660:	e008      	b.n	8005674 <_printf_common+0xa8>
 8005662:	2301      	movs	r3, #1
 8005664:	4652      	mov	r2, sl
 8005666:	4649      	mov	r1, r9
 8005668:	4638      	mov	r0, r7
 800566a:	47c0      	blx	r8
 800566c:	3001      	adds	r0, #1
 800566e:	d103      	bne.n	8005678 <_printf_common+0xac>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005678:	3501      	adds	r5, #1
 800567a:	e7c6      	b.n	800560a <_printf_common+0x3e>
 800567c:	18e1      	adds	r1, r4, r3
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	2030      	movs	r0, #48	; 0x30
 8005682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005686:	4422      	add	r2, r4
 8005688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800568c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005690:	3302      	adds	r3, #2
 8005692:	e7c7      	b.n	8005624 <_printf_common+0x58>
 8005694:	2301      	movs	r3, #1
 8005696:	4622      	mov	r2, r4
 8005698:	4649      	mov	r1, r9
 800569a:	4638      	mov	r0, r7
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d0e6      	beq.n	8005670 <_printf_common+0xa4>
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7d9      	b.n	800565a <_printf_common+0x8e>
	...

080056a8 <_printf_i>:
 80056a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	7e0f      	ldrb	r7, [r1, #24]
 80056ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056b0:	2f78      	cmp	r7, #120	; 0x78
 80056b2:	4691      	mov	r9, r2
 80056b4:	4680      	mov	r8, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	469a      	mov	sl, r3
 80056ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056be:	d807      	bhi.n	80056d0 <_printf_i+0x28>
 80056c0:	2f62      	cmp	r7, #98	; 0x62
 80056c2:	d80a      	bhi.n	80056da <_printf_i+0x32>
 80056c4:	2f00      	cmp	r7, #0
 80056c6:	f000 80d8 	beq.w	800587a <_printf_i+0x1d2>
 80056ca:	2f58      	cmp	r7, #88	; 0x58
 80056cc:	f000 80a3 	beq.w	8005816 <_printf_i+0x16e>
 80056d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d8:	e03a      	b.n	8005750 <_printf_i+0xa8>
 80056da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056de:	2b15      	cmp	r3, #21
 80056e0:	d8f6      	bhi.n	80056d0 <_printf_i+0x28>
 80056e2:	a101      	add	r1, pc, #4	; (adr r1, 80056e8 <_printf_i+0x40>)
 80056e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005755 	.word	0x08005755
 80056f0:	080056d1 	.word	0x080056d1
 80056f4:	080056d1 	.word	0x080056d1
 80056f8:	080056d1 	.word	0x080056d1
 80056fc:	080056d1 	.word	0x080056d1
 8005700:	08005755 	.word	0x08005755
 8005704:	080056d1 	.word	0x080056d1
 8005708:	080056d1 	.word	0x080056d1
 800570c:	080056d1 	.word	0x080056d1
 8005710:	080056d1 	.word	0x080056d1
 8005714:	08005861 	.word	0x08005861
 8005718:	08005785 	.word	0x08005785
 800571c:	08005843 	.word	0x08005843
 8005720:	080056d1 	.word	0x080056d1
 8005724:	080056d1 	.word	0x080056d1
 8005728:	08005883 	.word	0x08005883
 800572c:	080056d1 	.word	0x080056d1
 8005730:	08005785 	.word	0x08005785
 8005734:	080056d1 	.word	0x080056d1
 8005738:	080056d1 	.word	0x080056d1
 800573c:	0800584b 	.word	0x0800584b
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	602a      	str	r2, [r5, #0]
 8005748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800574c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005750:	2301      	movs	r3, #1
 8005752:	e0a3      	b.n	800589c <_printf_i+0x1f4>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	6829      	ldr	r1, [r5, #0]
 8005758:	0606      	lsls	r6, r0, #24
 800575a:	f101 0304 	add.w	r3, r1, #4
 800575e:	d50a      	bpl.n	8005776 <_printf_i+0xce>
 8005760:	680e      	ldr	r6, [r1, #0]
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	2e00      	cmp	r6, #0
 8005766:	da03      	bge.n	8005770 <_printf_i+0xc8>
 8005768:	232d      	movs	r3, #45	; 0x2d
 800576a:	4276      	negs	r6, r6
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005770:	485e      	ldr	r0, [pc, #376]	; (80058ec <_printf_i+0x244>)
 8005772:	230a      	movs	r3, #10
 8005774:	e019      	b.n	80057aa <_printf_i+0x102>
 8005776:	680e      	ldr	r6, [r1, #0]
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800577e:	bf18      	it	ne
 8005780:	b236      	sxthne	r6, r6
 8005782:	e7ef      	b.n	8005764 <_printf_i+0xbc>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	6029      	str	r1, [r5, #0]
 800578c:	0601      	lsls	r1, r0, #24
 800578e:	d501      	bpl.n	8005794 <_printf_i+0xec>
 8005790:	681e      	ldr	r6, [r3, #0]
 8005792:	e002      	b.n	800579a <_printf_i+0xf2>
 8005794:	0646      	lsls	r6, r0, #25
 8005796:	d5fb      	bpl.n	8005790 <_printf_i+0xe8>
 8005798:	881e      	ldrh	r6, [r3, #0]
 800579a:	4854      	ldr	r0, [pc, #336]	; (80058ec <_printf_i+0x244>)
 800579c:	2f6f      	cmp	r7, #111	; 0x6f
 800579e:	bf0c      	ite	eq
 80057a0:	2308      	moveq	r3, #8
 80057a2:	230a      	movne	r3, #10
 80057a4:	2100      	movs	r1, #0
 80057a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057aa:	6865      	ldr	r5, [r4, #4]
 80057ac:	60a5      	str	r5, [r4, #8]
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	bfa2      	ittt	ge
 80057b2:	6821      	ldrge	r1, [r4, #0]
 80057b4:	f021 0104 	bicge.w	r1, r1, #4
 80057b8:	6021      	strge	r1, [r4, #0]
 80057ba:	b90e      	cbnz	r6, 80057c0 <_printf_i+0x118>
 80057bc:	2d00      	cmp	r5, #0
 80057be:	d04d      	beq.n	800585c <_printf_i+0x1b4>
 80057c0:	4615      	mov	r5, r2
 80057c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80057c6:	fb03 6711 	mls	r7, r3, r1, r6
 80057ca:	5dc7      	ldrb	r7, [r0, r7]
 80057cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057d0:	4637      	mov	r7, r6
 80057d2:	42bb      	cmp	r3, r7
 80057d4:	460e      	mov	r6, r1
 80057d6:	d9f4      	bls.n	80057c2 <_printf_i+0x11a>
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d10b      	bne.n	80057f4 <_printf_i+0x14c>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07de      	lsls	r6, r3, #31
 80057e0:	d508      	bpl.n	80057f4 <_printf_i+0x14c>
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	6861      	ldr	r1, [r4, #4]
 80057e6:	4299      	cmp	r1, r3
 80057e8:	bfde      	ittt	le
 80057ea:	2330      	movle	r3, #48	; 0x30
 80057ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057f4:	1b52      	subs	r2, r2, r5
 80057f6:	6122      	str	r2, [r4, #16]
 80057f8:	f8cd a000 	str.w	sl, [sp]
 80057fc:	464b      	mov	r3, r9
 80057fe:	aa03      	add	r2, sp, #12
 8005800:	4621      	mov	r1, r4
 8005802:	4640      	mov	r0, r8
 8005804:	f7ff fee2 	bl	80055cc <_printf_common>
 8005808:	3001      	adds	r0, #1
 800580a:	d14c      	bne.n	80058a6 <_printf_i+0x1fe>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	b004      	add	sp, #16
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005816:	4835      	ldr	r0, [pc, #212]	; (80058ec <_printf_i+0x244>)
 8005818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	f851 6b04 	ldr.w	r6, [r1], #4
 8005824:	6029      	str	r1, [r5, #0]
 8005826:	061d      	lsls	r5, r3, #24
 8005828:	d514      	bpl.n	8005854 <_printf_i+0x1ac>
 800582a:	07df      	lsls	r7, r3, #31
 800582c:	bf44      	itt	mi
 800582e:	f043 0320 	orrmi.w	r3, r3, #32
 8005832:	6023      	strmi	r3, [r4, #0]
 8005834:	b91e      	cbnz	r6, 800583e <_printf_i+0x196>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f023 0320 	bic.w	r3, r3, #32
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	2310      	movs	r3, #16
 8005840:	e7b0      	b.n	80057a4 <_printf_i+0xfc>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f043 0320 	orr.w	r3, r3, #32
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	2378      	movs	r3, #120	; 0x78
 800584c:	4828      	ldr	r0, [pc, #160]	; (80058f0 <_printf_i+0x248>)
 800584e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005852:	e7e3      	b.n	800581c <_printf_i+0x174>
 8005854:	0659      	lsls	r1, r3, #25
 8005856:	bf48      	it	mi
 8005858:	b2b6      	uxthmi	r6, r6
 800585a:	e7e6      	b.n	800582a <_printf_i+0x182>
 800585c:	4615      	mov	r5, r2
 800585e:	e7bb      	b.n	80057d8 <_printf_i+0x130>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	6826      	ldr	r6, [r4, #0]
 8005864:	6961      	ldr	r1, [r4, #20]
 8005866:	1d18      	adds	r0, r3, #4
 8005868:	6028      	str	r0, [r5, #0]
 800586a:	0635      	lsls	r5, r6, #24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	d501      	bpl.n	8005874 <_printf_i+0x1cc>
 8005870:	6019      	str	r1, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0x1d2>
 8005874:	0670      	lsls	r0, r6, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0x1c8>
 8005878:	8019      	strh	r1, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	4615      	mov	r5, r2
 8005880:	e7ba      	b.n	80057f8 <_printf_i+0x150>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	681d      	ldr	r5, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	2100      	movs	r1, #0
 800588e:	4628      	mov	r0, r5
 8005890:	f7fa fcbe 	bl	8000210 <memchr>
 8005894:	b108      	cbz	r0, 800589a <_printf_i+0x1f2>
 8005896:	1b40      	subs	r0, r0, r5
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a4:	e7a8      	b.n	80057f8 <_printf_i+0x150>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	47d0      	blx	sl
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0ab      	beq.n	800580c <_printf_i+0x164>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d413      	bmi.n	80058e2 <_printf_i+0x23a>
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	4298      	cmp	r0, r3
 80058c0:	bfb8      	it	lt
 80058c2:	4618      	movlt	r0, r3
 80058c4:	e7a4      	b.n	8005810 <_printf_i+0x168>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	47d0      	blx	sl
 80058d0:	3001      	adds	r0, #1
 80058d2:	d09b      	beq.n	800580c <_printf_i+0x164>
 80058d4:	3501      	adds	r5, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dcf2      	bgt.n	80058c6 <_printf_i+0x21e>
 80058e0:	e7eb      	b.n	80058ba <_printf_i+0x212>
 80058e2:	2500      	movs	r5, #0
 80058e4:	f104 0619 	add.w	r6, r4, #25
 80058e8:	e7f5      	b.n	80058d6 <_printf_i+0x22e>
 80058ea:	bf00      	nop
 80058ec:	0804957d 	.word	0x0804957d
 80058f0:	0804958e 	.word	0x0804958e

080058f4 <__swbuf_r>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	460e      	mov	r6, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	4605      	mov	r5, r0
 80058fc:	b118      	cbz	r0, 8005906 <__swbuf_r+0x12>
 80058fe:	6983      	ldr	r3, [r0, #24]
 8005900:	b90b      	cbnz	r3, 8005906 <__swbuf_r+0x12>
 8005902:	f000 f9d9 	bl	8005cb8 <__sinit>
 8005906:	4b21      	ldr	r3, [pc, #132]	; (800598c <__swbuf_r+0x98>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d12b      	bne.n	8005964 <__swbuf_r+0x70>
 800590c:	686c      	ldr	r4, [r5, #4]
 800590e:	69a3      	ldr	r3, [r4, #24]
 8005910:	60a3      	str	r3, [r4, #8]
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	071a      	lsls	r2, r3, #28
 8005916:	d52f      	bpl.n	8005978 <__swbuf_r+0x84>
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	b36b      	cbz	r3, 8005978 <__swbuf_r+0x84>
 800591c:	6923      	ldr	r3, [r4, #16]
 800591e:	6820      	ldr	r0, [r4, #0]
 8005920:	1ac0      	subs	r0, r0, r3
 8005922:	6963      	ldr	r3, [r4, #20]
 8005924:	b2f6      	uxtb	r6, r6
 8005926:	4283      	cmp	r3, r0
 8005928:	4637      	mov	r7, r6
 800592a:	dc04      	bgt.n	8005936 <__swbuf_r+0x42>
 800592c:	4621      	mov	r1, r4
 800592e:	4628      	mov	r0, r5
 8005930:	f000 f92e 	bl	8005b90 <_fflush_r>
 8005934:	bb30      	cbnz	r0, 8005984 <__swbuf_r+0x90>
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	3b01      	subs	r3, #1
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	6022      	str	r2, [r4, #0]
 8005942:	701e      	strb	r6, [r3, #0]
 8005944:	6963      	ldr	r3, [r4, #20]
 8005946:	3001      	adds	r0, #1
 8005948:	4283      	cmp	r3, r0
 800594a:	d004      	beq.n	8005956 <__swbuf_r+0x62>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	07db      	lsls	r3, r3, #31
 8005950:	d506      	bpl.n	8005960 <__swbuf_r+0x6c>
 8005952:	2e0a      	cmp	r6, #10
 8005954:	d104      	bne.n	8005960 <__swbuf_r+0x6c>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f919 	bl	8005b90 <_fflush_r>
 800595e:	b988      	cbnz	r0, 8005984 <__swbuf_r+0x90>
 8005960:	4638      	mov	r0, r7
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <__swbuf_r+0x9c>)
 8005966:	429c      	cmp	r4, r3
 8005968:	d101      	bne.n	800596e <__swbuf_r+0x7a>
 800596a:	68ac      	ldr	r4, [r5, #8]
 800596c:	e7cf      	b.n	800590e <__swbuf_r+0x1a>
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <__swbuf_r+0xa0>)
 8005970:	429c      	cmp	r4, r3
 8005972:	bf08      	it	eq
 8005974:	68ec      	ldreq	r4, [r5, #12]
 8005976:	e7ca      	b.n	800590e <__swbuf_r+0x1a>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f80c 	bl	8005998 <__swsetup_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	d0cb      	beq.n	800591c <__swbuf_r+0x28>
 8005984:	f04f 37ff 	mov.w	r7, #4294967295
 8005988:	e7ea      	b.n	8005960 <__swbuf_r+0x6c>
 800598a:	bf00      	nop
 800598c:	080495c0 	.word	0x080495c0
 8005990:	080495e0 	.word	0x080495e0
 8005994:	080495a0 	.word	0x080495a0

08005998 <__swsetup_r>:
 8005998:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <__swsetup_r+0xcc>)
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	681d      	ldr	r5, [r3, #0]
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	b125      	cbz	r5, 80059ae <__swsetup_r+0x16>
 80059a4:	69ab      	ldr	r3, [r5, #24]
 80059a6:	b913      	cbnz	r3, 80059ae <__swsetup_r+0x16>
 80059a8:	4628      	mov	r0, r5
 80059aa:	f000 f985 	bl	8005cb8 <__sinit>
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <__swsetup_r+0xd0>)
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d10f      	bne.n	80059d4 <__swsetup_r+0x3c>
 80059b4:	686c      	ldr	r4, [r5, #4]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059bc:	0719      	lsls	r1, r3, #28
 80059be:	d42c      	bmi.n	8005a1a <__swsetup_r+0x82>
 80059c0:	06dd      	lsls	r5, r3, #27
 80059c2:	d411      	bmi.n	80059e8 <__swsetup_r+0x50>
 80059c4:	2309      	movs	r3, #9
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	f04f 30ff 	mov.w	r0, #4294967295
 80059d2:	e03e      	b.n	8005a52 <__swsetup_r+0xba>
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <__swsetup_r+0xd4>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d101      	bne.n	80059de <__swsetup_r+0x46>
 80059da:	68ac      	ldr	r4, [r5, #8]
 80059dc:	e7eb      	b.n	80059b6 <__swsetup_r+0x1e>
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <__swsetup_r+0xd8>)
 80059e0:	429c      	cmp	r4, r3
 80059e2:	bf08      	it	eq
 80059e4:	68ec      	ldreq	r4, [r5, #12]
 80059e6:	e7e6      	b.n	80059b6 <__swsetup_r+0x1e>
 80059e8:	0758      	lsls	r0, r3, #29
 80059ea:	d512      	bpl.n	8005a12 <__swsetup_r+0x7a>
 80059ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ee:	b141      	cbz	r1, 8005a02 <__swsetup_r+0x6a>
 80059f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059f4:	4299      	cmp	r1, r3
 80059f6:	d002      	beq.n	80059fe <__swsetup_r+0x66>
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 fa5f 	bl	8005ebc <_free_r>
 80059fe:	2300      	movs	r3, #0
 8005a00:	6363      	str	r3, [r4, #52]	; 0x34
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	b94b      	cbnz	r3, 8005a32 <__swsetup_r+0x9a>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a28:	d003      	beq.n	8005a32 <__swsetup_r+0x9a>
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f000 fa05 	bl	8005e3c <__smakebuf_r>
 8005a32:	89a0      	ldrh	r0, [r4, #12]
 8005a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a38:	f010 0301 	ands.w	r3, r0, #1
 8005a3c:	d00a      	beq.n	8005a54 <__swsetup_r+0xbc>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60a3      	str	r3, [r4, #8]
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	425b      	negs	r3, r3
 8005a46:	61a3      	str	r3, [r4, #24]
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	b943      	cbnz	r3, 8005a5e <__swsetup_r+0xc6>
 8005a4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a50:	d1ba      	bne.n	80059c8 <__swsetup_r+0x30>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	0781      	lsls	r1, r0, #30
 8005a56:	bf58      	it	pl
 8005a58:	6963      	ldrpl	r3, [r4, #20]
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	e7f4      	b.n	8005a48 <__swsetup_r+0xb0>
 8005a5e:	2000      	movs	r0, #0
 8005a60:	e7f7      	b.n	8005a52 <__swsetup_r+0xba>
 8005a62:	bf00      	nop
 8005a64:	20000014 	.word	0x20000014
 8005a68:	080495c0 	.word	0x080495c0
 8005a6c:	080495e0 	.word	0x080495e0
 8005a70:	080495a0 	.word	0x080495a0

08005a74 <abort>:
 8005a74:	b508      	push	{r3, lr}
 8005a76:	2006      	movs	r0, #6
 8005a78:	f000 fb38 	bl	80060ec <raise>
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f7fb f9e3 	bl	8000e48 <_exit>
	...

08005a84 <__sflush_r>:
 8005a84:	898a      	ldrh	r2, [r1, #12]
 8005a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	0710      	lsls	r0, r2, #28
 8005a8e:	460c      	mov	r4, r1
 8005a90:	d458      	bmi.n	8005b44 <__sflush_r+0xc0>
 8005a92:	684b      	ldr	r3, [r1, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dc05      	bgt.n	8005aa4 <__sflush_r+0x20>
 8005a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dc02      	bgt.n	8005aa4 <__sflush_r+0x20>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	d0f9      	beq.n	8005a9e <__sflush_r+0x1a>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ab0:	682f      	ldr	r7, [r5, #0]
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	d032      	beq.n	8005b1c <__sflush_r+0x98>
 8005ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	075a      	lsls	r2, r3, #29
 8005abc:	d505      	bpl.n	8005aca <__sflush_r+0x46>
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	1ac0      	subs	r0, r0, r3
 8005ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ac4:	b10b      	cbz	r3, 8005aca <__sflush_r+0x46>
 8005ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ac8:	1ac0      	subs	r0, r0, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	4602      	mov	r2, r0
 8005ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ad0:	6a21      	ldr	r1, [r4, #32]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b0      	blx	r6
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	d106      	bne.n	8005aea <__sflush_r+0x66>
 8005adc:	6829      	ldr	r1, [r5, #0]
 8005ade:	291d      	cmp	r1, #29
 8005ae0:	d82c      	bhi.n	8005b3c <__sflush_r+0xb8>
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <__sflush_r+0x108>)
 8005ae4:	40ca      	lsrs	r2, r1
 8005ae6:	07d6      	lsls	r6, r2, #31
 8005ae8:	d528      	bpl.n	8005b3c <__sflush_r+0xb8>
 8005aea:	2200      	movs	r2, #0
 8005aec:	6062      	str	r2, [r4, #4]
 8005aee:	04d9      	lsls	r1, r3, #19
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	d504      	bpl.n	8005b00 <__sflush_r+0x7c>
 8005af6:	1c42      	adds	r2, r0, #1
 8005af8:	d101      	bne.n	8005afe <__sflush_r+0x7a>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	b903      	cbnz	r3, 8005b00 <__sflush_r+0x7c>
 8005afe:	6560      	str	r0, [r4, #84]	; 0x54
 8005b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b02:	602f      	str	r7, [r5, #0]
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d0ca      	beq.n	8005a9e <__sflush_r+0x1a>
 8005b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	d002      	beq.n	8005b16 <__sflush_r+0x92>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f9d3 	bl	8005ebc <_free_r>
 8005b16:	2000      	movs	r0, #0
 8005b18:	6360      	str	r0, [r4, #52]	; 0x34
 8005b1a:	e7c1      	b.n	8005aa0 <__sflush_r+0x1c>
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b0      	blx	r6
 8005b24:	1c41      	adds	r1, r0, #1
 8005b26:	d1c7      	bne.n	8005ab8 <__sflush_r+0x34>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0c4      	beq.n	8005ab8 <__sflush_r+0x34>
 8005b2e:	2b1d      	cmp	r3, #29
 8005b30:	d001      	beq.n	8005b36 <__sflush_r+0xb2>
 8005b32:	2b16      	cmp	r3, #22
 8005b34:	d101      	bne.n	8005b3a <__sflush_r+0xb6>
 8005b36:	602f      	str	r7, [r5, #0]
 8005b38:	e7b1      	b.n	8005a9e <__sflush_r+0x1a>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	e7ad      	b.n	8005aa0 <__sflush_r+0x1c>
 8005b44:	690f      	ldr	r7, [r1, #16]
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	d0a9      	beq.n	8005a9e <__sflush_r+0x1a>
 8005b4a:	0793      	lsls	r3, r2, #30
 8005b4c:	680e      	ldr	r6, [r1, #0]
 8005b4e:	bf08      	it	eq
 8005b50:	694b      	ldreq	r3, [r1, #20]
 8005b52:	600f      	str	r7, [r1, #0]
 8005b54:	bf18      	it	ne
 8005b56:	2300      	movne	r3, #0
 8005b58:	eba6 0807 	sub.w	r8, r6, r7
 8005b5c:	608b      	str	r3, [r1, #8]
 8005b5e:	f1b8 0f00 	cmp.w	r8, #0
 8005b62:	dd9c      	ble.n	8005a9e <__sflush_r+0x1a>
 8005b64:	6a21      	ldr	r1, [r4, #32]
 8005b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b68:	4643      	mov	r3, r8
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b0      	blx	r6
 8005b70:	2800      	cmp	r0, #0
 8005b72:	dc06      	bgt.n	8005b82 <__sflush_r+0xfe>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	e78e      	b.n	8005aa0 <__sflush_r+0x1c>
 8005b82:	4407      	add	r7, r0
 8005b84:	eba8 0800 	sub.w	r8, r8, r0
 8005b88:	e7e9      	b.n	8005b5e <__sflush_r+0xda>
 8005b8a:	bf00      	nop
 8005b8c:	20400001 	.word	0x20400001

08005b90 <_fflush_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b913      	cbnz	r3, 8005ba0 <_fflush_r+0x10>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	b118      	cbz	r0, 8005baa <_fflush_r+0x1a>
 8005ba2:	6983      	ldr	r3, [r0, #24]
 8005ba4:	b90b      	cbnz	r3, 8005baa <_fflush_r+0x1a>
 8005ba6:	f000 f887 	bl	8005cb8 <__sinit>
 8005baa:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <_fflush_r+0x6c>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	d11b      	bne.n	8005be8 <_fflush_r+0x58>
 8005bb0:	686c      	ldr	r4, [r5, #4]
 8005bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ef      	beq.n	8005b9a <_fflush_r+0xa>
 8005bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bbc:	07d0      	lsls	r0, r2, #31
 8005bbe:	d404      	bmi.n	8005bca <_fflush_r+0x3a>
 8005bc0:	0599      	lsls	r1, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_fflush_r+0x3a>
 8005bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bc6:	f7ff fb9e 	bl	8005306 <__retarget_lock_acquire_recursive>
 8005bca:	4628      	mov	r0, r5
 8005bcc:	4621      	mov	r1, r4
 8005bce:	f7ff ff59 	bl	8005a84 <__sflush_r>
 8005bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd4:	07da      	lsls	r2, r3, #31
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	d4e0      	bmi.n	8005b9c <_fflush_r+0xc>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	059b      	lsls	r3, r3, #22
 8005bde:	d4dd      	bmi.n	8005b9c <_fflush_r+0xc>
 8005be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be2:	f7ff fb91 	bl	8005308 <__retarget_lock_release_recursive>
 8005be6:	e7d9      	b.n	8005b9c <_fflush_r+0xc>
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <_fflush_r+0x70>)
 8005bea:	429c      	cmp	r4, r3
 8005bec:	d101      	bne.n	8005bf2 <_fflush_r+0x62>
 8005bee:	68ac      	ldr	r4, [r5, #8]
 8005bf0:	e7df      	b.n	8005bb2 <_fflush_r+0x22>
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <_fflush_r+0x74>)
 8005bf4:	429c      	cmp	r4, r3
 8005bf6:	bf08      	it	eq
 8005bf8:	68ec      	ldreq	r4, [r5, #12]
 8005bfa:	e7da      	b.n	8005bb2 <_fflush_r+0x22>
 8005bfc:	080495c0 	.word	0x080495c0
 8005c00:	080495e0 	.word	0x080495e0
 8005c04:	080495a0 	.word	0x080495a0

08005c08 <std>:
 8005c08:	2300      	movs	r3, #0
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c16:	6083      	str	r3, [r0, #8]
 8005c18:	8181      	strh	r1, [r0, #12]
 8005c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c1c:	81c2      	strh	r2, [r0, #14]
 8005c1e:	6183      	str	r3, [r0, #24]
 8005c20:	4619      	mov	r1, r3
 8005c22:	2208      	movs	r2, #8
 8005c24:	305c      	adds	r0, #92	; 0x5c
 8005c26:	f7ff fb70 	bl	800530a <memset>
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <std+0x38>)
 8005c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <std+0x3c>)
 8005c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <std+0x40>)
 8005c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <std+0x44>)
 8005c38:	6224      	str	r4, [r4, #32]
 8005c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	bf00      	nop
 8005c40:	08006125 	.word	0x08006125
 8005c44:	08006147 	.word	0x08006147
 8005c48:	0800617f 	.word	0x0800617f
 8005c4c:	080061a3 	.word	0x080061a3

08005c50 <_cleanup_r>:
 8005c50:	4901      	ldr	r1, [pc, #4]	; (8005c58 <_cleanup_r+0x8>)
 8005c52:	f000 b8af 	b.w	8005db4 <_fwalk_reent>
 8005c56:	bf00      	nop
 8005c58:	08005b91 	.word	0x08005b91

08005c5c <__sfmoreglue>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	2268      	movs	r2, #104	; 0x68
 8005c60:	1e4d      	subs	r5, r1, #1
 8005c62:	4355      	muls	r5, r2
 8005c64:	460e      	mov	r6, r1
 8005c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c6a:	f000 f993 	bl	8005f94 <_malloc_r>
 8005c6e:	4604      	mov	r4, r0
 8005c70:	b140      	cbz	r0, 8005c84 <__sfmoreglue+0x28>
 8005c72:	2100      	movs	r1, #0
 8005c74:	e9c0 1600 	strd	r1, r6, [r0]
 8005c78:	300c      	adds	r0, #12
 8005c7a:	60a0      	str	r0, [r4, #8]
 8005c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c80:	f7ff fb43 	bl	800530a <memset>
 8005c84:	4620      	mov	r0, r4
 8005c86:	bd70      	pop	{r4, r5, r6, pc}

08005c88 <__sfp_lock_acquire>:
 8005c88:	4801      	ldr	r0, [pc, #4]	; (8005c90 <__sfp_lock_acquire+0x8>)
 8005c8a:	f7ff bb3c 	b.w	8005306 <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20002861 	.word	0x20002861

08005c94 <__sfp_lock_release>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__sfp_lock_release+0x8>)
 8005c96:	f7ff bb37 	b.w	8005308 <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20002861 	.word	0x20002861

08005ca0 <__sinit_lock_acquire>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__sinit_lock_acquire+0x8>)
 8005ca2:	f7ff bb30 	b.w	8005306 <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20002862 	.word	0x20002862

08005cac <__sinit_lock_release>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__sinit_lock_release+0x8>)
 8005cae:	f7ff bb2b 	b.w	8005308 <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20002862 	.word	0x20002862

08005cb8 <__sinit>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	4604      	mov	r4, r0
 8005cbc:	f7ff fff0 	bl	8005ca0 <__sinit_lock_acquire>
 8005cc0:	69a3      	ldr	r3, [r4, #24]
 8005cc2:	b11b      	cbz	r3, 8005ccc <__sinit+0x14>
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc8:	f7ff bff0 	b.w	8005cac <__sinit_lock_release>
 8005ccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cd0:	6523      	str	r3, [r4, #80]	; 0x50
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <__sinit+0x68>)
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <__sinit+0x6c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	bf04      	itt	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	61a3      	streq	r3, [r4, #24]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 f820 	bl	8005d28 <__sfp>
 8005ce8:	6060      	str	r0, [r4, #4]
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f81c 	bl	8005d28 <__sfp>
 8005cf0:	60a0      	str	r0, [r4, #8]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f818 	bl	8005d28 <__sfp>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	60e0      	str	r0, [r4, #12]
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	6860      	ldr	r0, [r4, #4]
 8005d00:	f7ff ff82 	bl	8005c08 <std>
 8005d04:	68a0      	ldr	r0, [r4, #8]
 8005d06:	2201      	movs	r2, #1
 8005d08:	2109      	movs	r1, #9
 8005d0a:	f7ff ff7d 	bl	8005c08 <std>
 8005d0e:	68e0      	ldr	r0, [r4, #12]
 8005d10:	2202      	movs	r2, #2
 8005d12:	2112      	movs	r1, #18
 8005d14:	f7ff ff78 	bl	8005c08 <std>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	61a3      	str	r3, [r4, #24]
 8005d1c:	e7d2      	b.n	8005cc4 <__sinit+0xc>
 8005d1e:	bf00      	nop
 8005d20:	08049568 	.word	0x08049568
 8005d24:	08005c51 	.word	0x08005c51

08005d28 <__sfp>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	f7ff ffac 	bl	8005c88 <__sfp_lock_acquire>
 8005d30:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <__sfp+0x84>)
 8005d32:	681e      	ldr	r6, [r3, #0]
 8005d34:	69b3      	ldr	r3, [r6, #24]
 8005d36:	b913      	cbnz	r3, 8005d3e <__sfp+0x16>
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff ffbd 	bl	8005cb8 <__sinit>
 8005d3e:	3648      	adds	r6, #72	; 0x48
 8005d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	d503      	bpl.n	8005d50 <__sfp+0x28>
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	b30b      	cbz	r3, 8005d90 <__sfp+0x68>
 8005d4c:	6836      	ldr	r6, [r6, #0]
 8005d4e:	e7f7      	b.n	8005d40 <__sfp+0x18>
 8005d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d54:	b9d5      	cbnz	r5, 8005d8c <__sfp+0x64>
 8005d56:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <__sfp+0x88>)
 8005d58:	60e3      	str	r3, [r4, #12]
 8005d5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d5e:	6665      	str	r5, [r4, #100]	; 0x64
 8005d60:	f7ff fad0 	bl	8005304 <__retarget_lock_init_recursive>
 8005d64:	f7ff ff96 	bl	8005c94 <__sfp_lock_release>
 8005d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d70:	6025      	str	r5, [r4, #0]
 8005d72:	61a5      	str	r5, [r4, #24]
 8005d74:	2208      	movs	r2, #8
 8005d76:	4629      	mov	r1, r5
 8005d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d7c:	f7ff fac5 	bl	800530a <memset>
 8005d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d88:	4620      	mov	r0, r4
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	3468      	adds	r4, #104	; 0x68
 8005d8e:	e7d9      	b.n	8005d44 <__sfp+0x1c>
 8005d90:	2104      	movs	r1, #4
 8005d92:	4638      	mov	r0, r7
 8005d94:	f7ff ff62 	bl	8005c5c <__sfmoreglue>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	6030      	str	r0, [r6, #0]
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d1d5      	bne.n	8005d4c <__sfp+0x24>
 8005da0:	f7ff ff78 	bl	8005c94 <__sfp_lock_release>
 8005da4:	230c      	movs	r3, #12
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	e7ee      	b.n	8005d88 <__sfp+0x60>
 8005daa:	bf00      	nop
 8005dac:	08049568 	.word	0x08049568
 8005db0:	ffff0001 	.word	0xffff0001

08005db4 <_fwalk_reent>:
 8005db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	4606      	mov	r6, r0
 8005dba:	4688      	mov	r8, r1
 8005dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dc0:	2700      	movs	r7, #0
 8005dc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dc6:	f1b9 0901 	subs.w	r9, r9, #1
 8005dca:	d505      	bpl.n	8005dd8 <_fwalk_reent+0x24>
 8005dcc:	6824      	ldr	r4, [r4, #0]
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	d1f7      	bne.n	8005dc2 <_fwalk_reent+0xe>
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd8:	89ab      	ldrh	r3, [r5, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d907      	bls.n	8005dee <_fwalk_reent+0x3a>
 8005dde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005de2:	3301      	adds	r3, #1
 8005de4:	d003      	beq.n	8005dee <_fwalk_reent+0x3a>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4630      	mov	r0, r6
 8005dea:	47c0      	blx	r8
 8005dec:	4307      	orrs	r7, r0
 8005dee:	3568      	adds	r5, #104	; 0x68
 8005df0:	e7e9      	b.n	8005dc6 <_fwalk_reent+0x12>

08005df2 <__swhatbuf_r>:
 8005df2:	b570      	push	{r4, r5, r6, lr}
 8005df4:	460e      	mov	r6, r1
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	b096      	sub	sp, #88	; 0x58
 8005dfe:	4614      	mov	r4, r2
 8005e00:	461d      	mov	r5, r3
 8005e02:	da08      	bge.n	8005e16 <__swhatbuf_r+0x24>
 8005e04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	602a      	str	r2, [r5, #0]
 8005e0c:	061a      	lsls	r2, r3, #24
 8005e0e:	d410      	bmi.n	8005e32 <__swhatbuf_r+0x40>
 8005e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e14:	e00e      	b.n	8005e34 <__swhatbuf_r+0x42>
 8005e16:	466a      	mov	r2, sp
 8005e18:	f000 f9ea 	bl	80061f0 <_fstat_r>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	dbf1      	blt.n	8005e04 <__swhatbuf_r+0x12>
 8005e20:	9a01      	ldr	r2, [sp, #4]
 8005e22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e2a:	425a      	negs	r2, r3
 8005e2c:	415a      	adcs	r2, r3
 8005e2e:	602a      	str	r2, [r5, #0]
 8005e30:	e7ee      	b.n	8005e10 <__swhatbuf_r+0x1e>
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	2000      	movs	r0, #0
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	b016      	add	sp, #88	; 0x58
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}

08005e3c <__smakebuf_r>:
 8005e3c:	898b      	ldrh	r3, [r1, #12]
 8005e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e40:	079d      	lsls	r5, r3, #30
 8005e42:	4606      	mov	r6, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	d507      	bpl.n	8005e58 <__smakebuf_r+0x1c>
 8005e48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	2301      	movs	r3, #1
 8005e52:	6163      	str	r3, [r4, #20]
 8005e54:	b002      	add	sp, #8
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	ab01      	add	r3, sp, #4
 8005e5a:	466a      	mov	r2, sp
 8005e5c:	f7ff ffc9 	bl	8005df2 <__swhatbuf_r>
 8005e60:	9900      	ldr	r1, [sp, #0]
 8005e62:	4605      	mov	r5, r0
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 f895 	bl	8005f94 <_malloc_r>
 8005e6a:	b948      	cbnz	r0, 8005e80 <__smakebuf_r+0x44>
 8005e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e70:	059a      	lsls	r2, r3, #22
 8005e72:	d4ef      	bmi.n	8005e54 <__smakebuf_r+0x18>
 8005e74:	f023 0303 	bic.w	r3, r3, #3
 8005e78:	f043 0302 	orr.w	r3, r3, #2
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	e7e3      	b.n	8005e48 <__smakebuf_r+0xc>
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <__smakebuf_r+0x7c>)
 8005e82:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	6020      	str	r0, [r4, #0]
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	81a3      	strh	r3, [r4, #12]
 8005e8e:	9b00      	ldr	r3, [sp, #0]
 8005e90:	6163      	str	r3, [r4, #20]
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	6120      	str	r0, [r4, #16]
 8005e96:	b15b      	cbz	r3, 8005eb0 <__smakebuf_r+0x74>
 8005e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 f9b9 	bl	8006214 <_isatty_r>
 8005ea2:	b128      	cbz	r0, 8005eb0 <__smakebuf_r+0x74>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	81a3      	strh	r3, [r4, #12]
 8005eb0:	89a0      	ldrh	r0, [r4, #12]
 8005eb2:	4305      	orrs	r5, r0
 8005eb4:	81a5      	strh	r5, [r4, #12]
 8005eb6:	e7cd      	b.n	8005e54 <__smakebuf_r+0x18>
 8005eb8:	08005c51 	.word	0x08005c51

08005ebc <_free_r>:
 8005ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d044      	beq.n	8005f4c <_free_r+0x90>
 8005ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec6:	9001      	str	r0, [sp, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f1a1 0404 	sub.w	r4, r1, #4
 8005ece:	bfb8      	it	lt
 8005ed0:	18e4      	addlt	r4, r4, r3
 8005ed2:	f000 f9c1 	bl	8006258 <__malloc_lock>
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <_free_r+0x94>)
 8005ed8:	9801      	ldr	r0, [sp, #4]
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	b933      	cbnz	r3, 8005eec <_free_r+0x30>
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee8:	f000 b9bc 	b.w	8006264 <__malloc_unlock>
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d908      	bls.n	8005f02 <_free_r+0x46>
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	1961      	adds	r1, r4, r5
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf01      	itttt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	1949      	addeq	r1, r1, r5
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	e7ed      	b.n	8005ede <_free_r+0x22>
 8005f02:	461a      	mov	r2, r3
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b10b      	cbz	r3, 8005f0c <_free_r+0x50>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d9fa      	bls.n	8005f02 <_free_r+0x46>
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	1855      	adds	r5, r2, r1
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d10b      	bne.n	8005f2c <_free_r+0x70>
 8005f14:	6824      	ldr	r4, [r4, #0]
 8005f16:	4421      	add	r1, r4
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	d1e0      	bne.n	8005ee2 <_free_r+0x26>
 8005f20:	681c      	ldr	r4, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	4421      	add	r1, r4
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	e7da      	b.n	8005ee2 <_free_r+0x26>
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x78>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6003      	str	r3, [r0, #0]
 8005f32:	e7d6      	b.n	8005ee2 <_free_r+0x26>
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf04      	itt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	bf04      	itt	eq
 8005f44:	1949      	addeq	r1, r1, r5
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6054      	str	r4, [r2, #4]
 8005f4a:	e7ca      	b.n	8005ee2 <_free_r+0x26>
 8005f4c:	b003      	add	sp, #12
 8005f4e:	bd30      	pop	{r4, r5, pc}
 8005f50:	20002864 	.word	0x20002864

08005f54 <sbrk_aligned>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4e0e      	ldr	r6, [pc, #56]	; (8005f90 <sbrk_aligned+0x3c>)
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	b911      	cbnz	r1, 8005f66 <sbrk_aligned+0x12>
 8005f60:	f000 f88c 	bl	800607c <_sbrk_r>
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f887 	bl	800607c <_sbrk_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d00a      	beq.n	8005f88 <sbrk_aligned+0x34>
 8005f72:	1cc4      	adds	r4, r0, #3
 8005f74:	f024 0403 	bic.w	r4, r4, #3
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d007      	beq.n	8005f8c <sbrk_aligned+0x38>
 8005f7c:	1a21      	subs	r1, r4, r0
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 f87c 	bl	800607c <_sbrk_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d101      	bne.n	8005f8c <sbrk_aligned+0x38>
 8005f88:	f04f 34ff 	mov.w	r4, #4294967295
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	20002868 	.word	0x20002868

08005f94 <_malloc_r>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	1ccd      	adds	r5, r1, #3
 8005f9a:	f025 0503 	bic.w	r5, r5, #3
 8005f9e:	3508      	adds	r5, #8
 8005fa0:	2d0c      	cmp	r5, #12
 8005fa2:	bf38      	it	cc
 8005fa4:	250c      	movcc	r5, #12
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	4607      	mov	r7, r0
 8005faa:	db01      	blt.n	8005fb0 <_malloc_r+0x1c>
 8005fac:	42a9      	cmp	r1, r5
 8005fae:	d905      	bls.n	8005fbc <_malloc_r+0x28>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	4e2e      	ldr	r6, [pc, #184]	; (8006078 <_malloc_r+0xe4>)
 8005fbe:	f000 f94b 	bl	8006258 <__malloc_lock>
 8005fc2:	6833      	ldr	r3, [r6, #0]
 8005fc4:	461c      	mov	r4, r3
 8005fc6:	bb34      	cbnz	r4, 8006016 <_malloc_r+0x82>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff ffc2 	bl	8005f54 <sbrk_aligned>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	d14d      	bne.n	8006072 <_malloc_r+0xde>
 8005fd6:	6834      	ldr	r4, [r6, #0]
 8005fd8:	4626      	mov	r6, r4
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	d140      	bne.n	8006060 <_malloc_r+0xcc>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	eb04 0803 	add.w	r8, r4, r3
 8005fe8:	f000 f848 	bl	800607c <_sbrk_r>
 8005fec:	4580      	cmp	r8, r0
 8005fee:	d13a      	bne.n	8006066 <_malloc_r+0xd2>
 8005ff0:	6821      	ldr	r1, [r4, #0]
 8005ff2:	3503      	adds	r5, #3
 8005ff4:	1a6d      	subs	r5, r5, r1
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	4629      	mov	r1, r5
 8006004:	4638      	mov	r0, r7
 8006006:	f7ff ffa5 	bl	8005f54 <sbrk_aligned>
 800600a:	3001      	adds	r0, #1
 800600c:	d02b      	beq.n	8006066 <_malloc_r+0xd2>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	442b      	add	r3, r5
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e00e      	b.n	8006034 <_malloc_r+0xa0>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	1b52      	subs	r2, r2, r5
 800601a:	d41e      	bmi.n	800605a <_malloc_r+0xc6>
 800601c:	2a0b      	cmp	r2, #11
 800601e:	d916      	bls.n	800604e <_malloc_r+0xba>
 8006020:	1961      	adds	r1, r4, r5
 8006022:	42a3      	cmp	r3, r4
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	bf18      	it	ne
 8006028:	6059      	strne	r1, [r3, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	bf08      	it	eq
 800602e:	6031      	streq	r1, [r6, #0]
 8006030:	5162      	str	r2, [r4, r5]
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	4638      	mov	r0, r7
 8006036:	f104 060b 	add.w	r6, r4, #11
 800603a:	f000 f913 	bl	8006264 <__malloc_unlock>
 800603e:	f026 0607 	bic.w	r6, r6, #7
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	1af2      	subs	r2, r6, r3
 8006046:	d0b6      	beq.n	8005fb6 <_malloc_r+0x22>
 8006048:	1b9b      	subs	r3, r3, r6
 800604a:	50a3      	str	r3, [r4, r2]
 800604c:	e7b3      	b.n	8005fb6 <_malloc_r+0x22>
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	42a3      	cmp	r3, r4
 8006052:	bf0c      	ite	eq
 8006054:	6032      	streq	r2, [r6, #0]
 8006056:	605a      	strne	r2, [r3, #4]
 8006058:	e7ec      	b.n	8006034 <_malloc_r+0xa0>
 800605a:	4623      	mov	r3, r4
 800605c:	6864      	ldr	r4, [r4, #4]
 800605e:	e7b2      	b.n	8005fc6 <_malloc_r+0x32>
 8006060:	4634      	mov	r4, r6
 8006062:	6876      	ldr	r6, [r6, #4]
 8006064:	e7b9      	b.n	8005fda <_malloc_r+0x46>
 8006066:	230c      	movs	r3, #12
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4638      	mov	r0, r7
 800606c:	f000 f8fa 	bl	8006264 <__malloc_unlock>
 8006070:	e7a1      	b.n	8005fb6 <_malloc_r+0x22>
 8006072:	6025      	str	r5, [r4, #0]
 8006074:	e7de      	b.n	8006034 <_malloc_r+0xa0>
 8006076:	bf00      	nop
 8006078:	20002864 	.word	0x20002864

0800607c <_sbrk_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_sbrk_r+0x1c>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	f7fa ff56 	bl	8000f38 <_sbrk>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_sbrk_r+0x1a>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_sbrk_r+0x1a>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	2000286c 	.word	0x2000286c

0800609c <_raise_r>:
 800609c:	291f      	cmp	r1, #31
 800609e:	b538      	push	{r3, r4, r5, lr}
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	d904      	bls.n	80060b0 <_raise_r+0x14>
 80060a6:	2316      	movs	r3, #22
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060b2:	b112      	cbz	r2, 80060ba <_raise_r+0x1e>
 80060b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060b8:	b94b      	cbnz	r3, 80060ce <_raise_r+0x32>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 f830 	bl	8006120 <_getpid_r>
 80060c0:	462a      	mov	r2, r5
 80060c2:	4601      	mov	r1, r0
 80060c4:	4620      	mov	r0, r4
 80060c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ca:	f000 b817 	b.w	80060fc <_kill_r>
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00a      	beq.n	80060e8 <_raise_r+0x4c>
 80060d2:	1c59      	adds	r1, r3, #1
 80060d4:	d103      	bne.n	80060de <_raise_r+0x42>
 80060d6:	2316      	movs	r3, #22
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	2001      	movs	r0, #1
 80060dc:	e7e7      	b.n	80060ae <_raise_r+0x12>
 80060de:	2400      	movs	r4, #0
 80060e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060e4:	4628      	mov	r0, r5
 80060e6:	4798      	blx	r3
 80060e8:	2000      	movs	r0, #0
 80060ea:	e7e0      	b.n	80060ae <_raise_r+0x12>

080060ec <raise>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <raise+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f7ff bfd3 	b.w	800609c <_raise_r>
 80060f6:	bf00      	nop
 80060f8:	20000014 	.word	0x20000014

080060fc <_kill_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	; (800611c <_kill_r+0x20>)
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	f7fa fe8d 	bl	8000e28 <_kill>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d102      	bne.n	8006118 <_kill_r+0x1c>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	b103      	cbz	r3, 8006118 <_kill_r+0x1c>
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	2000286c 	.word	0x2000286c

08006120 <_getpid_r>:
 8006120:	f7fa be7a 	b.w	8000e18 <_getpid>

08006124 <__sread>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	f000 f8a0 	bl	8006270 <_read_r>
 8006130:	2800      	cmp	r0, #0
 8006132:	bfab      	itete	ge
 8006134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006136:	89a3      	ldrhlt	r3, [r4, #12]
 8006138:	181b      	addge	r3, r3, r0
 800613a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800613e:	bfac      	ite	ge
 8006140:	6563      	strge	r3, [r4, #84]	; 0x54
 8006142:	81a3      	strhlt	r3, [r4, #12]
 8006144:	bd10      	pop	{r4, pc}

08006146 <__swrite>:
 8006146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	461f      	mov	r7, r3
 800614c:	898b      	ldrh	r3, [r1, #12]
 800614e:	05db      	lsls	r3, r3, #23
 8006150:	4605      	mov	r5, r0
 8006152:	460c      	mov	r4, r1
 8006154:	4616      	mov	r6, r2
 8006156:	d505      	bpl.n	8006164 <__swrite+0x1e>
 8006158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615c:	2302      	movs	r3, #2
 800615e:	2200      	movs	r2, #0
 8006160:	f000 f868 	bl	8006234 <_lseek_r>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800616a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	4632      	mov	r2, r6
 8006172:	463b      	mov	r3, r7
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	f000 b817 	b.w	80061ac <_write_r>

0800617e <__sseek>:
 800617e:	b510      	push	{r4, lr}
 8006180:	460c      	mov	r4, r1
 8006182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006186:	f000 f855 	bl	8006234 <_lseek_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	bf15      	itete	ne
 8006190:	6560      	strne	r0, [r4, #84]	; 0x54
 8006192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800619a:	81a3      	strheq	r3, [r4, #12]
 800619c:	bf18      	it	ne
 800619e:	81a3      	strhne	r3, [r4, #12]
 80061a0:	bd10      	pop	{r4, pc}

080061a2 <__sclose>:
 80061a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a6:	f000 b813 	b.w	80061d0 <_close_r>
	...

080061ac <_write_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	; (80061cc <_write_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fa fe6b 	bl	8000e96 <_write>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_write_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_write_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	2000286c 	.word	0x2000286c

080061d0 <_close_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d06      	ldr	r5, [pc, #24]	; (80061ec <_close_r+0x1c>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fa fe77 	bl	8000ece <_close>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_close_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_close_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	2000286c 	.word	0x2000286c

080061f0 <_fstat_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	; (8006210 <_fstat_r+0x20>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	f7fa fe72 	bl	8000ee6 <_fstat>
 8006202:	1c43      	adds	r3, r0, #1
 8006204:	d102      	bne.n	800620c <_fstat_r+0x1c>
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	b103      	cbz	r3, 800620c <_fstat_r+0x1c>
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	2000286c 	.word	0x2000286c

08006214 <_isatty_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d06      	ldr	r5, [pc, #24]	; (8006230 <_isatty_r+0x1c>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fa fe71 	bl	8000f06 <_isatty>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_isatty_r+0x1a>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_isatty_r+0x1a>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	2000286c 	.word	0x2000286c

08006234 <_lseek_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d07      	ldr	r5, [pc, #28]	; (8006254 <_lseek_r+0x20>)
 8006238:	4604      	mov	r4, r0
 800623a:	4608      	mov	r0, r1
 800623c:	4611      	mov	r1, r2
 800623e:	2200      	movs	r2, #0
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f7fa fe6a 	bl	8000f1c <_lseek>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_lseek_r+0x1e>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_lseek_r+0x1e>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	2000286c 	.word	0x2000286c

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff b854 	b.w	8005306 <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20002860 	.word	0x20002860

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff b84f 	b.w	8005308 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20002860 	.word	0x20002860

08006270 <_read_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	; (8006290 <_read_r+0x20>)
 8006274:	4604      	mov	r4, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fa fdec 	bl	8000e5c <_read>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_read_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_read_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	2000286c 	.word	0x2000286c

08006294 <roundf>:
 8006294:	ee10 0a10 	vmov	r0, s0
 8006298:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800629c:	3a7f      	subs	r2, #127	; 0x7f
 800629e:	2a16      	cmp	r2, #22
 80062a0:	dc15      	bgt.n	80062ce <roundf+0x3a>
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	da08      	bge.n	80062b8 <roundf+0x24>
 80062a6:	3201      	adds	r2, #1
 80062a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80062ac:	d101      	bne.n	80062b2 <roundf+0x1e>
 80062ae:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80062b2:	ee00 3a10 	vmov	s0, r3
 80062b6:	4770      	bx	lr
 80062b8:	4907      	ldr	r1, [pc, #28]	; (80062d8 <roundf+0x44>)
 80062ba:	4111      	asrs	r1, r2
 80062bc:	4208      	tst	r0, r1
 80062be:	d0fa      	beq.n	80062b6 <roundf+0x22>
 80062c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062c4:	4113      	asrs	r3, r2
 80062c6:	4403      	add	r3, r0
 80062c8:	ea23 0301 	bic.w	r3, r3, r1
 80062cc:	e7f1      	b.n	80062b2 <roundf+0x1e>
 80062ce:	2a80      	cmp	r2, #128	; 0x80
 80062d0:	d1f1      	bne.n	80062b6 <roundf+0x22>
 80062d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062d6:	4770      	bx	lr
 80062d8:	007fffff 	.word	0x007fffff

080062dc <expf>:
 80062dc:	b508      	push	{r3, lr}
 80062de:	ed2d 8b02 	vpush	{d8}
 80062e2:	eef0 8a40 	vmov.f32	s17, s0
 80062e6:	f000 f82f 	bl	8006348 <__ieee754_expf>
 80062ea:	eeb0 8a40 	vmov.f32	s16, s0
 80062ee:	eeb0 0a68 	vmov.f32	s0, s17
 80062f2:	f000 f919 	bl	8006528 <finitef>
 80062f6:	b160      	cbz	r0, 8006312 <expf+0x36>
 80062f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006338 <expf+0x5c>
 80062fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006304:	dd0a      	ble.n	800631c <expf+0x40>
 8006306:	f7fe ff3f 	bl	8005188 <__errno>
 800630a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800633c <expf+0x60>
 800630e:	2322      	movs	r3, #34	; 0x22
 8006310:	6003      	str	r3, [r0, #0]
 8006312:	eeb0 0a48 	vmov.f32	s0, s16
 8006316:	ecbd 8b02 	vpop	{d8}
 800631a:	bd08      	pop	{r3, pc}
 800631c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006340 <expf+0x64>
 8006320:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	d5f3      	bpl.n	8006312 <expf+0x36>
 800632a:	f7fe ff2d 	bl	8005188 <__errno>
 800632e:	2322      	movs	r3, #34	; 0x22
 8006330:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006344 <expf+0x68>
 8006334:	6003      	str	r3, [r0, #0]
 8006336:	e7ec      	b.n	8006312 <expf+0x36>
 8006338:	42b17180 	.word	0x42b17180
 800633c:	7f800000 	.word	0x7f800000
 8006340:	c2cff1b5 	.word	0xc2cff1b5
 8006344:	00000000 	.word	0x00000000

08006348 <__ieee754_expf>:
 8006348:	ee10 2a10 	vmov	r2, s0
 800634c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006350:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006354:	d902      	bls.n	800635c <__ieee754_expf+0x14>
 8006356:	ee30 0a00 	vadd.f32	s0, s0, s0
 800635a:	4770      	bx	lr
 800635c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8006360:	d106      	bne.n	8006370 <__ieee754_expf+0x28>
 8006362:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800649c <__ieee754_expf+0x154>
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf18      	it	ne
 800636a:	eeb0 0a67 	vmovne.f32	s0, s15
 800636e:	4770      	bx	lr
 8006370:	484b      	ldr	r0, [pc, #300]	; (80064a0 <__ieee754_expf+0x158>)
 8006372:	4282      	cmp	r2, r0
 8006374:	dd02      	ble.n	800637c <__ieee754_expf+0x34>
 8006376:	2000      	movs	r0, #0
 8006378:	f000 b8d0 	b.w	800651c <__math_oflowf>
 800637c:	2a00      	cmp	r2, #0
 800637e:	da05      	bge.n	800638c <__ieee754_expf+0x44>
 8006380:	4a48      	ldr	r2, [pc, #288]	; (80064a4 <__ieee754_expf+0x15c>)
 8006382:	4291      	cmp	r1, r2
 8006384:	d902      	bls.n	800638c <__ieee754_expf+0x44>
 8006386:	2000      	movs	r0, #0
 8006388:	f000 b8c2 	b.w	8006510 <__math_uflowf>
 800638c:	4a46      	ldr	r2, [pc, #280]	; (80064a8 <__ieee754_expf+0x160>)
 800638e:	4291      	cmp	r1, r2
 8006390:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006394:	d952      	bls.n	800643c <__ieee754_expf+0xf4>
 8006396:	4a45      	ldr	r2, [pc, #276]	; (80064ac <__ieee754_expf+0x164>)
 8006398:	4291      	cmp	r1, r2
 800639a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800639e:	d834      	bhi.n	800640a <__ieee754_expf+0xc2>
 80063a0:	4943      	ldr	r1, [pc, #268]	; (80064b0 <__ieee754_expf+0x168>)
 80063a2:	4411      	add	r1, r2
 80063a4:	ed91 7a00 	vldr	s14, [r1]
 80063a8:	4942      	ldr	r1, [pc, #264]	; (80064b4 <__ieee754_expf+0x16c>)
 80063aa:	440a      	add	r2, r1
 80063ac:	edd2 7a00 	vldr	s15, [r2]
 80063b0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80063b4:	f1c3 0201 	rsb	r2, r3, #1
 80063b8:	1ad2      	subs	r2, r2, r3
 80063ba:	ee37 0a67 	vsub.f32	s0, s14, s15
 80063be:	ee20 6a00 	vmul.f32	s12, s0, s0
 80063c2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80064b8 <__ieee754_expf+0x170>
 80063c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064bc <__ieee754_expf+0x174>
 80063ca:	eee6 6a05 	vfma.f32	s13, s12, s10
 80063ce:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80064c0 <__ieee754_expf+0x178>
 80063d2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80063d6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80064c4 <__ieee754_expf+0x17c>
 80063da:	eee5 6a06 	vfma.f32	s13, s10, s12
 80063de:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80064c8 <__ieee754_expf+0x180>
 80063e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80063e6:	eef0 6a40 	vmov.f32	s13, s0
 80063ea:	eee5 6a46 	vfms.f32	s13, s10, s12
 80063ee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80063f2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80063f6:	bb92      	cbnz	r2, 800645e <__ieee754_expf+0x116>
 80063f8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80063fc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006400:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006404:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006408:	4770      	bx	lr
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <__ieee754_expf+0x184>)
 800640c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80064d0 <__ieee754_expf+0x188>
 8006410:	eddf 6a30 	vldr	s13, [pc, #192]	; 80064d4 <__ieee754_expf+0x18c>
 8006414:	4413      	add	r3, r2
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800641e:	eeb0 7a40 	vmov.f32	s14, s0
 8006422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006426:	ee17 2a90 	vmov	r2, s15
 800642a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800642e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8006432:	eddf 6a29 	vldr	s13, [pc, #164]	; 80064d8 <__ieee754_expf+0x190>
 8006436:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800643a:	e7be      	b.n	80063ba <__ieee754_expf+0x72>
 800643c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8006440:	d20b      	bcs.n	800645a <__ieee754_expf+0x112>
 8006442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064dc <__ieee754_expf+0x194>
 8006446:	ee70 6a26 	vadd.f32	s13, s0, s13
 800644a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800644e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006452:	dd02      	ble.n	800645a <__ieee754_expf+0x112>
 8006454:	ee30 0a25 	vadd.f32	s0, s0, s11
 8006458:	4770      	bx	lr
 800645a:	2200      	movs	r2, #0
 800645c:	e7af      	b.n	80063be <__ieee754_expf+0x76>
 800645e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006462:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8006466:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800646a:	bfb8      	it	lt
 800646c:	3264      	addlt	r2, #100	; 0x64
 800646e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006472:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006476:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800647a:	ee17 3a90 	vmov	r3, s15
 800647e:	bfab      	itete	ge
 8006480:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006484:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006488:	ee00 3a10 	vmovge	s0, r3
 800648c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80064e0 <__ieee754_expf+0x198>
 8006490:	bfbc      	itt	lt
 8006492:	ee00 3a10 	vmovlt	s0, r3
 8006496:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800649a:	4770      	bx	lr
 800649c:	00000000 	.word	0x00000000
 80064a0:	42b17217 	.word	0x42b17217
 80064a4:	42cff1b5 	.word	0x42cff1b5
 80064a8:	3eb17218 	.word	0x3eb17218
 80064ac:	3f851591 	.word	0x3f851591
 80064b0:	08049608 	.word	0x08049608
 80064b4:	08049610 	.word	0x08049610
 80064b8:	3331bb4c 	.word	0x3331bb4c
 80064bc:	b5ddea0e 	.word	0xb5ddea0e
 80064c0:	388ab355 	.word	0x388ab355
 80064c4:	bb360b61 	.word	0xbb360b61
 80064c8:	3e2aaaab 	.word	0x3e2aaaab
 80064cc:	08049600 	.word	0x08049600
 80064d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80064d4:	3f317180 	.word	0x3f317180
 80064d8:	3717f7d1 	.word	0x3717f7d1
 80064dc:	7149f2ca 	.word	0x7149f2ca
 80064e0:	0d800000 	.word	0x0d800000

080064e4 <with_errnof>:
 80064e4:	b513      	push	{r0, r1, r4, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80064ec:	f7fe fe4c 	bl	8005188 <__errno>
 80064f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80064f4:	6004      	str	r4, [r0, #0]
 80064f6:	b002      	add	sp, #8
 80064f8:	bd10      	pop	{r4, pc}

080064fa <xflowf>:
 80064fa:	b130      	cbz	r0, 800650a <xflowf+0x10>
 80064fc:	eef1 7a40 	vneg.f32	s15, s0
 8006500:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006504:	2022      	movs	r0, #34	; 0x22
 8006506:	f7ff bfed 	b.w	80064e4 <with_errnof>
 800650a:	eef0 7a40 	vmov.f32	s15, s0
 800650e:	e7f7      	b.n	8006500 <xflowf+0x6>

08006510 <__math_uflowf>:
 8006510:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006518 <__math_uflowf+0x8>
 8006514:	f7ff bff1 	b.w	80064fa <xflowf>
 8006518:	10000000 	.word	0x10000000

0800651c <__math_oflowf>:
 800651c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006524 <__math_oflowf+0x8>
 8006520:	f7ff bfeb 	b.w	80064fa <xflowf>
 8006524:	70000000 	.word	0x70000000

08006528 <finitef>:
 8006528:	b082      	sub	sp, #8
 800652a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800652e:	9801      	ldr	r0, [sp, #4]
 8006530:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006534:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006538:	bfac      	ite	ge
 800653a:	2000      	movge	r0, #0
 800653c:	2001      	movlt	r0, #1
 800653e:	b002      	add	sp, #8
 8006540:	4770      	bx	lr
	...

08006544 <_init>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr

08006550 <_fini>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr
