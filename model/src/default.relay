def @main(%serving_default_input_1:0: Tensor[(1, 5), int8] /* span=serving_default_input_1:0:0:0 */, %v_param_1: Tensor[(512, 5), int8] /* span=model/dense/MatMul:0:0 */, %v_param_2: Tensor[(512), int32] /* span=model/dense_1/BiasAdd/ReadVariableOp:0:0 */, %v_param_3: Tensor[(512, 512), int8] /* span=model/dense_1/MatMul:0:0 */, %v_param_4: Tensor[(512), int32] /* span=model/dense_1/BiasAdd/ReadVariableOp1:0:0 */, %v_param_5: Tensor[(1, 512), int8] /* span=model/dense_2/MatMul:0:0 */, %v_param_6: Tensor[(1), int32] /* span=model/dense_2/BiasAdd/ReadVariableOp:0:0 */, output_tensor_names=["StatefulPartitionedCall_0"]) {
  %0 = reshape(%serving_default_input_1:0, newshape=[-1, 5]) /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */;
  %1 = qnn.dense(%0, %v_param_1, -1 /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, 0 /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, 0.996078f /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, 0.00084825f /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, units=512, out_dtype="int32") /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */;
  %2 = nn.bias_add(%1, %v_param_2) /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */;
  %3 = qnn.requantize(%2, 0.000844924f /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, 0 /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, 0.340049f /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, -1 /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=model/dense/MatMul;model/dense/BiasAdd:0:0 */;
  %4 = qnn.dequantize(%3, 0.340049f /* span=model/dense/Sigmoid:0:0 */, -1 /* span=model/dense/Sigmoid:0:0 */) /* span=model/dense/Sigmoid:0:0 */;
  %5 = sigmoid(%4) /* span=model/dense/Sigmoid:0:0 */;
  %6 = qnn.quantize(%5, 0.00390625f /* span=model/dense/Sigmoid:0:0 */, -128 /* span=model/dense/Sigmoid:0:0 */, out_dtype="int8") /* span=model/dense/Sigmoid:0:0 */;
  %7 = reshape(%6, newshape=[-1, 512]) /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */;
  %8 = qnn.dense(%7, %v_param_3, -128 /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, 0 /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, 0.00390625f /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, 0.000602728f /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, units=512, out_dtype="int32") /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */;
  %9 = nn.bias_add(%8, %v_param_4) /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */;
  %10 = qnn.requantize(%9, 2.35441e-06f /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, 0 /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, 0.0220194f /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, -42 /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=model/dense_1/MatMul;model/dense_1/BiasAdd:0:0 */;
  %11 = qnn.dequantize(%10, 0.0220194f /* span=model/dense_1/Sigmoid:0:0 */, -42 /* span=model/dense_1/Sigmoid:0:0 */) /* span=model/dense_1/Sigmoid:0:0 */;
  %12 = sigmoid(%11) /* span=model/dense_1/Sigmoid:0:0 */;
  %13 = qnn.quantize(%12, 0.00390625f /* span=model/dense_1/Sigmoid:0:0 */, -128 /* span=model/dense_1/Sigmoid:0:0 */, out_dtype="int8") /* span=model/dense_1/Sigmoid:0:0 */;
  %14 = reshape(%13, newshape=[-1, 512]) /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */;
  %15 = qnn.dense(%14, %v_param_5, -128 /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, 0 /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, 0.00390625f /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, 0.000849728f /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, units=1, out_dtype="int32") /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */;
  %16 = nn.bias_add(%15, %v_param_6) /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */;
  %17 = qnn.requantize(%16, 3.31925e-06f /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, 0 /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, 0.0067502f /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, -128 /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=model/dense_2/MatMul;model/dense_2/BiasAdd:0:0 */;
  %18 = qnn.dequantize(%17, 0.0067502f /* span=StatefulPartitionedCall:0:0:0 */, -128 /* span=StatefulPartitionedCall:0:0:0 */) /* span=StatefulPartitionedCall:0:0:0 */;
  %19 = sigmoid(%18) /* span=StatefulPartitionedCall:0:0:0 */;
  qnn.quantize(%19, 0.00390625f /* span=StatefulPartitionedCall:0:0:0 */, -128 /* span=StatefulPartitionedCall:0:0:0 */, out_dtype="int8") /* span=StatefulPartitionedCall:0:0:0 */
}
